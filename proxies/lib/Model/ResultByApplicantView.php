<?php
/**
 * ResultByApplicantView
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ResultByApplicantView Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResultByApplicantView implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResultByApplicantView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'application_id' => 'int',
        'reg_number' => 'string',
        'student_fname' => 'string',
        'student_mname' => 'string',
        'student_lname' => 'string',
        'priority_course' => 'int',
        'course_code' => 'string',
        'course_name' => 'string',
        'priority_policy_id' => 'int',
        'priority_program' => 'string',
        'priority_real_campus' => 'string',
        'photo' => 'string',
        'english' => 'float',
        'mathematics' => 'float',
        'science' => 'float',
        'inductive_reasoning' => 'float',
        'csa' => 'float',
        'applicant_id' => 'string',
        'date_result_uploaded' => '\DateTime',
        'uploadedby' => 'int',
        'date_of_exam' => '\DateTime',
        'batch' => 'string',
        'venue' => 'string',
        'remarks' => 'string',
        'part1' => 'int',
        'part2' => 'int',
        'specialization_code' => 'string',
        'rank' => 'int',
        'first_priority' => 'bool',
        'qualified_campuses' => '\OpenAPI\Client\Model\QualifiedRealCampusView[]',
        'priority_real_campus_id' => 'int',
        'priority_major_id' => 'int',
        'priority_major_name' => 'string',
        'term_id' => 'int',
        'priority_campus_id' => 'int',
        'e_signature' => 'string',
        'card_photo' => 'string',
        'pre_registration_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'application_id' => 'int32',
        'reg_number' => null,
        'student_fname' => null,
        'student_mname' => null,
        'student_lname' => null,
        'priority_course' => 'int32',
        'course_code' => null,
        'course_name' => null,
        'priority_policy_id' => 'int32',
        'priority_program' => null,
        'priority_real_campus' => null,
        'photo' => null,
        'english' => 'double',
        'mathematics' => 'double',
        'science' => 'double',
        'inductive_reasoning' => 'double',
        'csa' => 'double',
        'applicant_id' => null,
        'date_result_uploaded' => 'date-time',
        'uploadedby' => 'int32',
        'date_of_exam' => 'date-time',
        'batch' => null,
        'venue' => null,
        'remarks' => null,
        'part1' => 'int32',
        'part2' => 'int32',
        'specialization_code' => null,
        'rank' => 'int32',
        'first_priority' => null,
        'qualified_campuses' => null,
        'priority_real_campus_id' => 'int32',
        'priority_major_id' => 'int32',
        'priority_major_name' => null,
        'term_id' => 'int32',
        'priority_campus_id' => 'int32',
        'e_signature' => null,
        'card_photo' => null,
        'pre_registration_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'application_id' => false,
        'reg_number' => true,
        'student_fname' => true,
        'student_mname' => true,
        'student_lname' => true,
        'priority_course' => true,
        'course_code' => true,
        'course_name' => true,
        'priority_policy_id' => false,
        'priority_program' => true,
        'priority_real_campus' => true,
        'photo' => true,
        'english' => true,
        'mathematics' => true,
        'science' => true,
        'inductive_reasoning' => true,
        'csa' => true,
        'applicant_id' => true,
        'date_result_uploaded' => true,
        'uploadedby' => true,
        'date_of_exam' => true,
        'batch' => true,
        'venue' => true,
        'remarks' => true,
        'part1' => true,
        'part2' => true,
        'specialization_code' => true,
        'rank' => false,
        'first_priority' => false,
        'qualified_campuses' => true,
        'priority_real_campus_id' => true,
        'priority_major_id' => true,
        'priority_major_name' => true,
        'term_id' => true,
        'priority_campus_id' => false,
        'e_signature' => true,
        'card_photo' => true,
        'pre_registration_status' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'application_id' => 'applicationId',
        'reg_number' => 'regNumber',
        'student_fname' => 'studentFname',
        'student_mname' => 'studentMname',
        'student_lname' => 'studentLname',
        'priority_course' => 'priorityCourse',
        'course_code' => 'courseCode',
        'course_name' => 'courseName',
        'priority_policy_id' => 'priorityPolicyId',
        'priority_program' => 'priorityProgram',
        'priority_real_campus' => 'priorityRealCampus',
        'photo' => 'photo',
        'english' => 'english',
        'mathematics' => 'mathematics',
        'science' => 'science',
        'inductive_reasoning' => 'inductiveReasoning',
        'csa' => 'csa',
        'applicant_id' => 'applicantId',
        'date_result_uploaded' => 'dateResultUploaded',
        'uploadedby' => 'uploadedby',
        'date_of_exam' => 'dateOfExam',
        'batch' => 'batch',
        'venue' => 'venue',
        'remarks' => 'remarks',
        'part1' => 'part1',
        'part2' => 'part2',
        'specialization_code' => 'specializationCode',
        'rank' => 'rank',
        'first_priority' => 'firstPriority',
        'qualified_campuses' => 'qualifiedCampuses',
        'priority_real_campus_id' => 'priorityRealCampusId',
        'priority_major_id' => 'priorityMajorId',
        'priority_major_name' => 'priorityMajorName',
        'term_id' => 'termId',
        'priority_campus_id' => 'priorityCampusId',
        'e_signature' => 'eSignature',
        'card_photo' => 'cardPhoto',
        'pre_registration_status' => 'preRegistrationStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'application_id' => 'setApplicationId',
        'reg_number' => 'setRegNumber',
        'student_fname' => 'setStudentFname',
        'student_mname' => 'setStudentMname',
        'student_lname' => 'setStudentLname',
        'priority_course' => 'setPriorityCourse',
        'course_code' => 'setCourseCode',
        'course_name' => 'setCourseName',
        'priority_policy_id' => 'setPriorityPolicyId',
        'priority_program' => 'setPriorityProgram',
        'priority_real_campus' => 'setPriorityRealCampus',
        'photo' => 'setPhoto',
        'english' => 'setEnglish',
        'mathematics' => 'setMathematics',
        'science' => 'setScience',
        'inductive_reasoning' => 'setInductiveReasoning',
        'csa' => 'setCsa',
        'applicant_id' => 'setApplicantId',
        'date_result_uploaded' => 'setDateResultUploaded',
        'uploadedby' => 'setUploadedby',
        'date_of_exam' => 'setDateOfExam',
        'batch' => 'setBatch',
        'venue' => 'setVenue',
        'remarks' => 'setRemarks',
        'part1' => 'setPart1',
        'part2' => 'setPart2',
        'specialization_code' => 'setSpecializationCode',
        'rank' => 'setRank',
        'first_priority' => 'setFirstPriority',
        'qualified_campuses' => 'setQualifiedCampuses',
        'priority_real_campus_id' => 'setPriorityRealCampusId',
        'priority_major_id' => 'setPriorityMajorId',
        'priority_major_name' => 'setPriorityMajorName',
        'term_id' => 'setTermId',
        'priority_campus_id' => 'setPriorityCampusId',
        'e_signature' => 'setESignature',
        'card_photo' => 'setCardPhoto',
        'pre_registration_status' => 'setPreRegistrationStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'application_id' => 'getApplicationId',
        'reg_number' => 'getRegNumber',
        'student_fname' => 'getStudentFname',
        'student_mname' => 'getStudentMname',
        'student_lname' => 'getStudentLname',
        'priority_course' => 'getPriorityCourse',
        'course_code' => 'getCourseCode',
        'course_name' => 'getCourseName',
        'priority_policy_id' => 'getPriorityPolicyId',
        'priority_program' => 'getPriorityProgram',
        'priority_real_campus' => 'getPriorityRealCampus',
        'photo' => 'getPhoto',
        'english' => 'getEnglish',
        'mathematics' => 'getMathematics',
        'science' => 'getScience',
        'inductive_reasoning' => 'getInductiveReasoning',
        'csa' => 'getCsa',
        'applicant_id' => 'getApplicantId',
        'date_result_uploaded' => 'getDateResultUploaded',
        'uploadedby' => 'getUploadedby',
        'date_of_exam' => 'getDateOfExam',
        'batch' => 'getBatch',
        'venue' => 'getVenue',
        'remarks' => 'getRemarks',
        'part1' => 'getPart1',
        'part2' => 'getPart2',
        'specialization_code' => 'getSpecializationCode',
        'rank' => 'getRank',
        'first_priority' => 'getFirstPriority',
        'qualified_campuses' => 'getQualifiedCampuses',
        'priority_real_campus_id' => 'getPriorityRealCampusId',
        'priority_major_id' => 'getPriorityMajorId',
        'priority_major_name' => 'getPriorityMajorName',
        'term_id' => 'getTermId',
        'priority_campus_id' => 'getPriorityCampusId',
        'e_signature' => 'getESignature',
        'card_photo' => 'getCardPhoto',
        'pre_registration_status' => 'getPreRegistrationStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('application_id', $data ?? [], null);
        $this->setIfExists('reg_number', $data ?? [], null);
        $this->setIfExists('student_fname', $data ?? [], null);
        $this->setIfExists('student_mname', $data ?? [], null);
        $this->setIfExists('student_lname', $data ?? [], null);
        $this->setIfExists('priority_course', $data ?? [], null);
        $this->setIfExists('course_code', $data ?? [], null);
        $this->setIfExists('course_name', $data ?? [], null);
        $this->setIfExists('priority_policy_id', $data ?? [], null);
        $this->setIfExists('priority_program', $data ?? [], null);
        $this->setIfExists('priority_real_campus', $data ?? [], null);
        $this->setIfExists('photo', $data ?? [], null);
        $this->setIfExists('english', $data ?? [], null);
        $this->setIfExists('mathematics', $data ?? [], null);
        $this->setIfExists('science', $data ?? [], null);
        $this->setIfExists('inductive_reasoning', $data ?? [], null);
        $this->setIfExists('csa', $data ?? [], null);
        $this->setIfExists('applicant_id', $data ?? [], null);
        $this->setIfExists('date_result_uploaded', $data ?? [], null);
        $this->setIfExists('uploadedby', $data ?? [], null);
        $this->setIfExists('date_of_exam', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('venue', $data ?? [], null);
        $this->setIfExists('remarks', $data ?? [], null);
        $this->setIfExists('part1', $data ?? [], null);
        $this->setIfExists('part2', $data ?? [], null);
        $this->setIfExists('specialization_code', $data ?? [], null);
        $this->setIfExists('rank', $data ?? [], null);
        $this->setIfExists('first_priority', $data ?? [], null);
        $this->setIfExists('qualified_campuses', $data ?? [], null);
        $this->setIfExists('priority_real_campus_id', $data ?? [], null);
        $this->setIfExists('priority_major_id', $data ?? [], null);
        $this->setIfExists('priority_major_name', $data ?? [], null);
        $this->setIfExists('term_id', $data ?? [], null);
        $this->setIfExists('priority_campus_id', $data ?? [], null);
        $this->setIfExists('e_signature', $data ?? [], null);
        $this->setIfExists('card_photo', $data ?? [], null);
        $this->setIfExists('pre_registration_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets application_id
     *
     * @return int|null
     */
    public function getApplicationId()
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param int|null $application_id application_id
     *
     * @return self
     */
    public function setApplicationId($application_id)
    {
        if (is_null($application_id)) {
            throw new \InvalidArgumentException('non-nullable application_id cannot be null');
        }
        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets reg_number
     *
     * @return string|null
     */
    public function getRegNumber()
    {
        return $this->container['reg_number'];
    }

    /**
     * Sets reg_number
     *
     * @param string|null $reg_number reg_number
     *
     * @return self
     */
    public function setRegNumber($reg_number)
    {
        if (is_null($reg_number)) {
            array_push($this->openAPINullablesSetToNull, 'reg_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reg_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reg_number'] = $reg_number;

        return $this;
    }

    /**
     * Gets student_fname
     *
     * @return string|null
     */
    public function getStudentFname()
    {
        return $this->container['student_fname'];
    }

    /**
     * Sets student_fname
     *
     * @param string|null $student_fname student_fname
     *
     * @return self
     */
    public function setStudentFname($student_fname)
    {
        if (is_null($student_fname)) {
            array_push($this->openAPINullablesSetToNull, 'student_fname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student_fname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student_fname'] = $student_fname;

        return $this;
    }

    /**
     * Gets student_mname
     *
     * @return string|null
     */
    public function getStudentMname()
    {
        return $this->container['student_mname'];
    }

    /**
     * Sets student_mname
     *
     * @param string|null $student_mname student_mname
     *
     * @return self
     */
    public function setStudentMname($student_mname)
    {
        if (is_null($student_mname)) {
            array_push($this->openAPINullablesSetToNull, 'student_mname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student_mname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student_mname'] = $student_mname;

        return $this;
    }

    /**
     * Gets student_lname
     *
     * @return string|null
     */
    public function getStudentLname()
    {
        return $this->container['student_lname'];
    }

    /**
     * Sets student_lname
     *
     * @param string|null $student_lname student_lname
     *
     * @return self
     */
    public function setStudentLname($student_lname)
    {
        if (is_null($student_lname)) {
            array_push($this->openAPINullablesSetToNull, 'student_lname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student_lname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student_lname'] = $student_lname;

        return $this;
    }

    /**
     * Gets priority_course
     *
     * @return int|null
     */
    public function getPriorityCourse()
    {
        return $this->container['priority_course'];
    }

    /**
     * Sets priority_course
     *
     * @param int|null $priority_course priority_course
     *
     * @return self
     */
    public function setPriorityCourse($priority_course)
    {
        if (is_null($priority_course)) {
            array_push($this->openAPINullablesSetToNull, 'priority_course');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priority_course', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priority_course'] = $priority_course;

        return $this;
    }

    /**
     * Gets course_code
     *
     * @return string|null
     */
    public function getCourseCode()
    {
        return $this->container['course_code'];
    }

    /**
     * Sets course_code
     *
     * @param string|null $course_code course_code
     *
     * @return self
     */
    public function setCourseCode($course_code)
    {
        if (is_null($course_code)) {
            array_push($this->openAPINullablesSetToNull, 'course_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('course_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['course_code'] = $course_code;

        return $this;
    }

    /**
     * Gets course_name
     *
     * @return string|null
     */
    public function getCourseName()
    {
        return $this->container['course_name'];
    }

    /**
     * Sets course_name
     *
     * @param string|null $course_name course_name
     *
     * @return self
     */
    public function setCourseName($course_name)
    {
        if (is_null($course_name)) {
            array_push($this->openAPINullablesSetToNull, 'course_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('course_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['course_name'] = $course_name;

        return $this;
    }

    /**
     * Gets priority_policy_id
     *
     * @return int|null
     */
    public function getPriorityPolicyId()
    {
        return $this->container['priority_policy_id'];
    }

    /**
     * Sets priority_policy_id
     *
     * @param int|null $priority_policy_id priority_policy_id
     *
     * @return self
     */
    public function setPriorityPolicyId($priority_policy_id)
    {
        if (is_null($priority_policy_id)) {
            throw new \InvalidArgumentException('non-nullable priority_policy_id cannot be null');
        }
        $this->container['priority_policy_id'] = $priority_policy_id;

        return $this;
    }

    /**
     * Gets priority_program
     *
     * @return string|null
     */
    public function getPriorityProgram()
    {
        return $this->container['priority_program'];
    }

    /**
     * Sets priority_program
     *
     * @param string|null $priority_program priority_program
     *
     * @return self
     */
    public function setPriorityProgram($priority_program)
    {
        if (is_null($priority_program)) {
            array_push($this->openAPINullablesSetToNull, 'priority_program');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priority_program', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priority_program'] = $priority_program;

        return $this;
    }

    /**
     * Gets priority_real_campus
     *
     * @return string|null
     */
    public function getPriorityRealCampus()
    {
        return $this->container['priority_real_campus'];
    }

    /**
     * Sets priority_real_campus
     *
     * @param string|null $priority_real_campus priority_real_campus
     *
     * @return self
     */
    public function setPriorityRealCampus($priority_real_campus)
    {
        if (is_null($priority_real_campus)) {
            array_push($this->openAPINullablesSetToNull, 'priority_real_campus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priority_real_campus', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priority_real_campus'] = $priority_real_campus;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return string|null
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param string|null $photo photo
     *
     * @return self
     */
    public function setPhoto($photo)
    {
        if (is_null($photo)) {
            array_push($this->openAPINullablesSetToNull, 'photo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets english
     *
     * @return float|null
     */
    public function getEnglish()
    {
        return $this->container['english'];
    }

    /**
     * Sets english
     *
     * @param float|null $english english
     *
     * @return self
     */
    public function setEnglish($english)
    {
        if (is_null($english)) {
            array_push($this->openAPINullablesSetToNull, 'english');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('english', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['english'] = $english;

        return $this;
    }

    /**
     * Gets mathematics
     *
     * @return float|null
     */
    public function getMathematics()
    {
        return $this->container['mathematics'];
    }

    /**
     * Sets mathematics
     *
     * @param float|null $mathematics mathematics
     *
     * @return self
     */
    public function setMathematics($mathematics)
    {
        if (is_null($mathematics)) {
            array_push($this->openAPINullablesSetToNull, 'mathematics');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mathematics', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mathematics'] = $mathematics;

        return $this;
    }

    /**
     * Gets science
     *
     * @return float|null
     */
    public function getScience()
    {
        return $this->container['science'];
    }

    /**
     * Sets science
     *
     * @param float|null $science science
     *
     * @return self
     */
    public function setScience($science)
    {
        if (is_null($science)) {
            array_push($this->openAPINullablesSetToNull, 'science');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('science', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['science'] = $science;

        return $this;
    }

    /**
     * Gets inductive_reasoning
     *
     * @return float|null
     */
    public function getInductiveReasoning()
    {
        return $this->container['inductive_reasoning'];
    }

    /**
     * Sets inductive_reasoning
     *
     * @param float|null $inductive_reasoning inductive_reasoning
     *
     * @return self
     */
    public function setInductiveReasoning($inductive_reasoning)
    {
        if (is_null($inductive_reasoning)) {
            array_push($this->openAPINullablesSetToNull, 'inductive_reasoning');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inductive_reasoning', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inductive_reasoning'] = $inductive_reasoning;

        return $this;
    }

    /**
     * Gets csa
     *
     * @return float|null
     */
    public function getCsa()
    {
        return $this->container['csa'];
    }

    /**
     * Sets csa
     *
     * @param float|null $csa csa
     *
     * @return self
     */
    public function setCsa($csa)
    {
        if (is_null($csa)) {
            array_push($this->openAPINullablesSetToNull, 'csa');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('csa', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['csa'] = $csa;

        return $this;
    }

    /**
     * Gets applicant_id
     *
     * @return string|null
     */
    public function getApplicantId()
    {
        return $this->container['applicant_id'];
    }

    /**
     * Sets applicant_id
     *
     * @param string|null $applicant_id applicant_id
     *
     * @return self
     */
    public function setApplicantId($applicant_id)
    {
        if (is_null($applicant_id)) {
            array_push($this->openAPINullablesSetToNull, 'applicant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('applicant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['applicant_id'] = $applicant_id;

        return $this;
    }

    /**
     * Gets date_result_uploaded
     *
     * @return \DateTime|null
     */
    public function getDateResultUploaded()
    {
        return $this->container['date_result_uploaded'];
    }

    /**
     * Sets date_result_uploaded
     *
     * @param \DateTime|null $date_result_uploaded date_result_uploaded
     *
     * @return self
     */
    public function setDateResultUploaded($date_result_uploaded)
    {
        if (is_null($date_result_uploaded)) {
            array_push($this->openAPINullablesSetToNull, 'date_result_uploaded');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_result_uploaded', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_result_uploaded'] = $date_result_uploaded;

        return $this;
    }

    /**
     * Gets uploadedby
     *
     * @return int|null
     */
    public function getUploadedby()
    {
        return $this->container['uploadedby'];
    }

    /**
     * Sets uploadedby
     *
     * @param int|null $uploadedby uploadedby
     *
     * @return self
     */
    public function setUploadedby($uploadedby)
    {
        if (is_null($uploadedby)) {
            array_push($this->openAPINullablesSetToNull, 'uploadedby');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uploadedby', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uploadedby'] = $uploadedby;

        return $this;
    }

    /**
     * Gets date_of_exam
     *
     * @return \DateTime|null
     */
    public function getDateOfExam()
    {
        return $this->container['date_of_exam'];
    }

    /**
     * Sets date_of_exam
     *
     * @param \DateTime|null $date_of_exam date_of_exam
     *
     * @return self
     */
    public function setDateOfExam($date_of_exam)
    {
        if (is_null($date_of_exam)) {
            array_push($this->openAPINullablesSetToNull, 'date_of_exam');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_of_exam', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_of_exam'] = $date_of_exam;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch batch
     *
     * @return self
     */
    public function setBatch($batch)
    {
        if (is_null($batch)) {
            array_push($this->openAPINullablesSetToNull, 'batch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets venue
     *
     * @return string|null
     */
    public function getVenue()
    {
        return $this->container['venue'];
    }

    /**
     * Sets venue
     *
     * @param string|null $venue venue
     *
     * @return self
     */
    public function setVenue($venue)
    {
        if (is_null($venue)) {
            array_push($this->openAPINullablesSetToNull, 'venue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('venue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['venue'] = $venue;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string|null $remarks remarks
     *
     * @return self
     */
    public function setRemarks($remarks)
    {
        if (is_null($remarks)) {
            array_push($this->openAPINullablesSetToNull, 'remarks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remarks', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets part1
     *
     * @return int|null
     */
    public function getPart1()
    {
        return $this->container['part1'];
    }

    /**
     * Sets part1
     *
     * @param int|null $part1 part1
     *
     * @return self
     */
    public function setPart1($part1)
    {
        if (is_null($part1)) {
            array_push($this->openAPINullablesSetToNull, 'part1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('part1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['part1'] = $part1;

        return $this;
    }

    /**
     * Gets part2
     *
     * @return int|null
     */
    public function getPart2()
    {
        return $this->container['part2'];
    }

    /**
     * Sets part2
     *
     * @param int|null $part2 part2
     *
     * @return self
     */
    public function setPart2($part2)
    {
        if (is_null($part2)) {
            array_push($this->openAPINullablesSetToNull, 'part2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('part2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['part2'] = $part2;

        return $this;
    }

    /**
     * Gets specialization_code
     *
     * @return string|null
     */
    public function getSpecializationCode()
    {
        return $this->container['specialization_code'];
    }

    /**
     * Sets specialization_code
     *
     * @param string|null $specialization_code specialization_code
     *
     * @return self
     */
    public function setSpecializationCode($specialization_code)
    {
        if (is_null($specialization_code)) {
            array_push($this->openAPINullablesSetToNull, 'specialization_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('specialization_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['specialization_code'] = $specialization_code;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return int|null
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param int|null $rank rank
     *
     * @return self
     */
    public function setRank($rank)
    {
        if (is_null($rank)) {
            throw new \InvalidArgumentException('non-nullable rank cannot be null');
        }
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets first_priority
     *
     * @return bool|null
     */
    public function getFirstPriority()
    {
        return $this->container['first_priority'];
    }

    /**
     * Sets first_priority
     *
     * @param bool|null $first_priority first_priority
     *
     * @return self
     */
    public function setFirstPriority($first_priority)
    {
        if (is_null($first_priority)) {
            throw new \InvalidArgumentException('non-nullable first_priority cannot be null');
        }
        $this->container['first_priority'] = $first_priority;

        return $this;
    }

    /**
     * Gets qualified_campuses
     *
     * @return \OpenAPI\Client\Model\QualifiedRealCampusView[]|null
     */
    public function getQualifiedCampuses()
    {
        return $this->container['qualified_campuses'];
    }

    /**
     * Sets qualified_campuses
     *
     * @param \OpenAPI\Client\Model\QualifiedRealCampusView[]|null $qualified_campuses qualified_campuses
     *
     * @return self
     */
    public function setQualifiedCampuses($qualified_campuses)
    {
        if (is_null($qualified_campuses)) {
            array_push($this->openAPINullablesSetToNull, 'qualified_campuses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('qualified_campuses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['qualified_campuses'] = $qualified_campuses;

        return $this;
    }

    /**
     * Gets priority_real_campus_id
     *
     * @return int|null
     */
    public function getPriorityRealCampusId()
    {
        return $this->container['priority_real_campus_id'];
    }

    /**
     * Sets priority_real_campus_id
     *
     * @param int|null $priority_real_campus_id priority_real_campus_id
     *
     * @return self
     */
    public function setPriorityRealCampusId($priority_real_campus_id)
    {
        if (is_null($priority_real_campus_id)) {
            array_push($this->openAPINullablesSetToNull, 'priority_real_campus_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priority_real_campus_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priority_real_campus_id'] = $priority_real_campus_id;

        return $this;
    }

    /**
     * Gets priority_major_id
     *
     * @return int|null
     */
    public function getPriorityMajorId()
    {
        return $this->container['priority_major_id'];
    }

    /**
     * Sets priority_major_id
     *
     * @param int|null $priority_major_id priority_major_id
     *
     * @return self
     */
    public function setPriorityMajorId($priority_major_id)
    {
        if (is_null($priority_major_id)) {
            array_push($this->openAPINullablesSetToNull, 'priority_major_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priority_major_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priority_major_id'] = $priority_major_id;

        return $this;
    }

    /**
     * Gets priority_major_name
     *
     * @return string|null
     */
    public function getPriorityMajorName()
    {
        return $this->container['priority_major_name'];
    }

    /**
     * Sets priority_major_name
     *
     * @param string|null $priority_major_name priority_major_name
     *
     * @return self
     */
    public function setPriorityMajorName($priority_major_name)
    {
        if (is_null($priority_major_name)) {
            array_push($this->openAPINullablesSetToNull, 'priority_major_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priority_major_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priority_major_name'] = $priority_major_name;

        return $this;
    }

    /**
     * Gets term_id
     *
     * @return int|null
     */
    public function getTermId()
    {
        return $this->container['term_id'];
    }

    /**
     * Sets term_id
     *
     * @param int|null $term_id term_id
     *
     * @return self
     */
    public function setTermId($term_id)
    {
        if (is_null($term_id)) {
            array_push($this->openAPINullablesSetToNull, 'term_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('term_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['term_id'] = $term_id;

        return $this;
    }

    /**
     * Gets priority_campus_id
     *
     * @return int|null
     */
    public function getPriorityCampusId()
    {
        return $this->container['priority_campus_id'];
    }

    /**
     * Sets priority_campus_id
     *
     * @param int|null $priority_campus_id priority_campus_id
     *
     * @return self
     */
    public function setPriorityCampusId($priority_campus_id)
    {
        if (is_null($priority_campus_id)) {
            throw new \InvalidArgumentException('non-nullable priority_campus_id cannot be null');
        }
        $this->container['priority_campus_id'] = $priority_campus_id;

        return $this;
    }

    /**
     * Gets e_signature
     *
     * @return string|null
     */
    public function getESignature()
    {
        return $this->container['e_signature'];
    }

    /**
     * Sets e_signature
     *
     * @param string|null $e_signature e_signature
     *
     * @return self
     */
    public function setESignature($e_signature)
    {
        if (is_null($e_signature)) {
            array_push($this->openAPINullablesSetToNull, 'e_signature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('e_signature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['e_signature'] = $e_signature;

        return $this;
    }

    /**
     * Gets card_photo
     *
     * @return string|null
     */
    public function getCardPhoto()
    {
        return $this->container['card_photo'];
    }

    /**
     * Sets card_photo
     *
     * @param string|null $card_photo card_photo
     *
     * @return self
     */
    public function setCardPhoto($card_photo)
    {
        if (is_null($card_photo)) {
            array_push($this->openAPINullablesSetToNull, 'card_photo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_photo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_photo'] = $card_photo;

        return $this;
    }

    /**
     * Gets pre_registration_status
     *
     * @return string|null
     */
    public function getPreRegistrationStatus()
    {
        return $this->container['pre_registration_status'];
    }

    /**
     * Sets pre_registration_status
     *
     * @param string|null $pre_registration_status pre_registration_status
     *
     * @return self
     */
    public function setPreRegistrationStatus($pre_registration_status)
    {
        if (is_null($pre_registration_status)) {
            array_push($this->openAPINullablesSetToNull, 'pre_registration_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pre_registration_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pre_registration_status'] = $pre_registration_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


