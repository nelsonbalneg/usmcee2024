<?php
/**
 * StudentVaxInfoDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StudentVaxInfoDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StudentVaxInfoDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StudentVaxInfoDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'student_no' => 'string',
        'is_vaccinated' => 'bool',
        'has_first_dose' => 'bool',
        'first_dose_date' => '\DateTime',
        'first_dose_batch_no' => 'string',
        'has_second_dose' => 'bool',
        'second_dose_date' => '\DateTime',
        'second_dose_batch_no' => 'string',
        'has_booster' => 'bool',
        'booster_date' => '\DateTime',
        'first_dose_vaccine_manufacturer' => 'string',
        'second_dose_vaccine_manufacturer' => 'string',
        'booster_vaccine_manufacturer' => 'string',
        'vaccination_site_no' => 'string',
        'booster_site_no' => 'string',
        'date_created' => '\DateTime',
        'has_philhealth' => 'bool',
        'phil_health_number' => 'string',
        'vax_card_url' => 'string',
        'phil_health_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'student_no' => null,
        'is_vaccinated' => null,
        'has_first_dose' => null,
        'first_dose_date' => 'date-time',
        'first_dose_batch_no' => null,
        'has_second_dose' => null,
        'second_dose_date' => 'date-time',
        'second_dose_batch_no' => null,
        'has_booster' => null,
        'booster_date' => 'date-time',
        'first_dose_vaccine_manufacturer' => null,
        'second_dose_vaccine_manufacturer' => null,
        'booster_vaccine_manufacturer' => null,
        'vaccination_site_no' => null,
        'booster_site_no' => null,
        'date_created' => 'date-time',
        'has_philhealth' => null,
        'phil_health_number' => null,
        'vax_card_url' => null,
        'phil_health_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'student_no' => true,
        'is_vaccinated' => false,
        'has_first_dose' => false,
        'first_dose_date' => false,
        'first_dose_batch_no' => true,
        'has_second_dose' => false,
        'second_dose_date' => false,
        'second_dose_batch_no' => true,
        'has_booster' => false,
        'booster_date' => false,
        'first_dose_vaccine_manufacturer' => true,
        'second_dose_vaccine_manufacturer' => true,
        'booster_vaccine_manufacturer' => true,
        'vaccination_site_no' => true,
        'booster_site_no' => true,
        'date_created' => false,
        'has_philhealth' => true,
        'phil_health_number' => true,
        'vax_card_url' => true,
        'phil_health_url' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'student_no' => 'studentNo',
        'is_vaccinated' => 'isVaccinated',
        'has_first_dose' => 'hasFirstDose',
        'first_dose_date' => 'firstDoseDate',
        'first_dose_batch_no' => 'firstDoseBatchNo',
        'has_second_dose' => 'hasSecondDose',
        'second_dose_date' => 'secondDoseDate',
        'second_dose_batch_no' => 'secondDoseBatchNo',
        'has_booster' => 'hasBooster',
        'booster_date' => 'boosterDate',
        'first_dose_vaccine_manufacturer' => 'firstDoseVaccineManufacturer',
        'second_dose_vaccine_manufacturer' => 'secondDoseVaccineManufacturer',
        'booster_vaccine_manufacturer' => 'boosterVaccineManufacturer',
        'vaccination_site_no' => 'vaccinationSiteNo',
        'booster_site_no' => 'boosterSiteNo',
        'date_created' => 'dateCreated',
        'has_philhealth' => 'hasPhilhealth',
        'phil_health_number' => 'philHealthNumber',
        'vax_card_url' => 'vaxCardUrl',
        'phil_health_url' => 'philHealthUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'student_no' => 'setStudentNo',
        'is_vaccinated' => 'setIsVaccinated',
        'has_first_dose' => 'setHasFirstDose',
        'first_dose_date' => 'setFirstDoseDate',
        'first_dose_batch_no' => 'setFirstDoseBatchNo',
        'has_second_dose' => 'setHasSecondDose',
        'second_dose_date' => 'setSecondDoseDate',
        'second_dose_batch_no' => 'setSecondDoseBatchNo',
        'has_booster' => 'setHasBooster',
        'booster_date' => 'setBoosterDate',
        'first_dose_vaccine_manufacturer' => 'setFirstDoseVaccineManufacturer',
        'second_dose_vaccine_manufacturer' => 'setSecondDoseVaccineManufacturer',
        'booster_vaccine_manufacturer' => 'setBoosterVaccineManufacturer',
        'vaccination_site_no' => 'setVaccinationSiteNo',
        'booster_site_no' => 'setBoosterSiteNo',
        'date_created' => 'setDateCreated',
        'has_philhealth' => 'setHasPhilhealth',
        'phil_health_number' => 'setPhilHealthNumber',
        'vax_card_url' => 'setVaxCardUrl',
        'phil_health_url' => 'setPhilHealthUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'student_no' => 'getStudentNo',
        'is_vaccinated' => 'getIsVaccinated',
        'has_first_dose' => 'getHasFirstDose',
        'first_dose_date' => 'getFirstDoseDate',
        'first_dose_batch_no' => 'getFirstDoseBatchNo',
        'has_second_dose' => 'getHasSecondDose',
        'second_dose_date' => 'getSecondDoseDate',
        'second_dose_batch_no' => 'getSecondDoseBatchNo',
        'has_booster' => 'getHasBooster',
        'booster_date' => 'getBoosterDate',
        'first_dose_vaccine_manufacturer' => 'getFirstDoseVaccineManufacturer',
        'second_dose_vaccine_manufacturer' => 'getSecondDoseVaccineManufacturer',
        'booster_vaccine_manufacturer' => 'getBoosterVaccineManufacturer',
        'vaccination_site_no' => 'getVaccinationSiteNo',
        'booster_site_no' => 'getBoosterSiteNo',
        'date_created' => 'getDateCreated',
        'has_philhealth' => 'getHasPhilhealth',
        'phil_health_number' => 'getPhilHealthNumber',
        'vax_card_url' => 'getVaxCardUrl',
        'phil_health_url' => 'getPhilHealthUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('student_no', $data ?? [], null);
        $this->setIfExists('is_vaccinated', $data ?? [], null);
        $this->setIfExists('has_first_dose', $data ?? [], null);
        $this->setIfExists('first_dose_date', $data ?? [], null);
        $this->setIfExists('first_dose_batch_no', $data ?? [], null);
        $this->setIfExists('has_second_dose', $data ?? [], null);
        $this->setIfExists('second_dose_date', $data ?? [], null);
        $this->setIfExists('second_dose_batch_no', $data ?? [], null);
        $this->setIfExists('has_booster', $data ?? [], null);
        $this->setIfExists('booster_date', $data ?? [], null);
        $this->setIfExists('first_dose_vaccine_manufacturer', $data ?? [], null);
        $this->setIfExists('second_dose_vaccine_manufacturer', $data ?? [], null);
        $this->setIfExists('booster_vaccine_manufacturer', $data ?? [], null);
        $this->setIfExists('vaccination_site_no', $data ?? [], null);
        $this->setIfExists('booster_site_no', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('has_philhealth', $data ?? [], null);
        $this->setIfExists('phil_health_number', $data ?? [], null);
        $this->setIfExists('vax_card_url', $data ?? [], null);
        $this->setIfExists('phil_health_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets student_no
     *
     * @return string|null
     */
    public function getStudentNo()
    {
        return $this->container['student_no'];
    }

    /**
     * Sets student_no
     *
     * @param string|null $student_no student_no
     *
     * @return self
     */
    public function setStudentNo($student_no)
    {
        if (is_null($student_no)) {
            array_push($this->openAPINullablesSetToNull, 'student_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student_no'] = $student_no;

        return $this;
    }

    /**
     * Gets is_vaccinated
     *
     * @return bool|null
     */
    public function getIsVaccinated()
    {
        return $this->container['is_vaccinated'];
    }

    /**
     * Sets is_vaccinated
     *
     * @param bool|null $is_vaccinated is_vaccinated
     *
     * @return self
     */
    public function setIsVaccinated($is_vaccinated)
    {
        if (is_null($is_vaccinated)) {
            throw new \InvalidArgumentException('non-nullable is_vaccinated cannot be null');
        }
        $this->container['is_vaccinated'] = $is_vaccinated;

        return $this;
    }

    /**
     * Gets has_first_dose
     *
     * @return bool|null
     */
    public function getHasFirstDose()
    {
        return $this->container['has_first_dose'];
    }

    /**
     * Sets has_first_dose
     *
     * @param bool|null $has_first_dose has_first_dose
     *
     * @return self
     */
    public function setHasFirstDose($has_first_dose)
    {
        if (is_null($has_first_dose)) {
            throw new \InvalidArgumentException('non-nullable has_first_dose cannot be null');
        }
        $this->container['has_first_dose'] = $has_first_dose;

        return $this;
    }

    /**
     * Gets first_dose_date
     *
     * @return \DateTime|null
     */
    public function getFirstDoseDate()
    {
        return $this->container['first_dose_date'];
    }

    /**
     * Sets first_dose_date
     *
     * @param \DateTime|null $first_dose_date first_dose_date
     *
     * @return self
     */
    public function setFirstDoseDate($first_dose_date)
    {
        if (is_null($first_dose_date)) {
            throw new \InvalidArgumentException('non-nullable first_dose_date cannot be null');
        }
        $this->container['first_dose_date'] = $first_dose_date;

        return $this;
    }

    /**
     * Gets first_dose_batch_no
     *
     * @return string|null
     */
    public function getFirstDoseBatchNo()
    {
        return $this->container['first_dose_batch_no'];
    }

    /**
     * Sets first_dose_batch_no
     *
     * @param string|null $first_dose_batch_no first_dose_batch_no
     *
     * @return self
     */
    public function setFirstDoseBatchNo($first_dose_batch_no)
    {
        if (is_null($first_dose_batch_no)) {
            array_push($this->openAPINullablesSetToNull, 'first_dose_batch_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_dose_batch_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_dose_batch_no'] = $first_dose_batch_no;

        return $this;
    }

    /**
     * Gets has_second_dose
     *
     * @return bool|null
     */
    public function getHasSecondDose()
    {
        return $this->container['has_second_dose'];
    }

    /**
     * Sets has_second_dose
     *
     * @param bool|null $has_second_dose has_second_dose
     *
     * @return self
     */
    public function setHasSecondDose($has_second_dose)
    {
        if (is_null($has_second_dose)) {
            throw new \InvalidArgumentException('non-nullable has_second_dose cannot be null');
        }
        $this->container['has_second_dose'] = $has_second_dose;

        return $this;
    }

    /**
     * Gets second_dose_date
     *
     * @return \DateTime|null
     */
    public function getSecondDoseDate()
    {
        return $this->container['second_dose_date'];
    }

    /**
     * Sets second_dose_date
     *
     * @param \DateTime|null $second_dose_date second_dose_date
     *
     * @return self
     */
    public function setSecondDoseDate($second_dose_date)
    {
        if (is_null($second_dose_date)) {
            throw new \InvalidArgumentException('non-nullable second_dose_date cannot be null');
        }
        $this->container['second_dose_date'] = $second_dose_date;

        return $this;
    }

    /**
     * Gets second_dose_batch_no
     *
     * @return string|null
     */
    public function getSecondDoseBatchNo()
    {
        return $this->container['second_dose_batch_no'];
    }

    /**
     * Sets second_dose_batch_no
     *
     * @param string|null $second_dose_batch_no second_dose_batch_no
     *
     * @return self
     */
    public function setSecondDoseBatchNo($second_dose_batch_no)
    {
        if (is_null($second_dose_batch_no)) {
            array_push($this->openAPINullablesSetToNull, 'second_dose_batch_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('second_dose_batch_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['second_dose_batch_no'] = $second_dose_batch_no;

        return $this;
    }

    /**
     * Gets has_booster
     *
     * @return bool|null
     */
    public function getHasBooster()
    {
        return $this->container['has_booster'];
    }

    /**
     * Sets has_booster
     *
     * @param bool|null $has_booster has_booster
     *
     * @return self
     */
    public function setHasBooster($has_booster)
    {
        if (is_null($has_booster)) {
            throw new \InvalidArgumentException('non-nullable has_booster cannot be null');
        }
        $this->container['has_booster'] = $has_booster;

        return $this;
    }

    /**
     * Gets booster_date
     *
     * @return \DateTime|null
     */
    public function getBoosterDate()
    {
        return $this->container['booster_date'];
    }

    /**
     * Sets booster_date
     *
     * @param \DateTime|null $booster_date booster_date
     *
     * @return self
     */
    public function setBoosterDate($booster_date)
    {
        if (is_null($booster_date)) {
            throw new \InvalidArgumentException('non-nullable booster_date cannot be null');
        }
        $this->container['booster_date'] = $booster_date;

        return $this;
    }

    /**
     * Gets first_dose_vaccine_manufacturer
     *
     * @return string|null
     */
    public function getFirstDoseVaccineManufacturer()
    {
        return $this->container['first_dose_vaccine_manufacturer'];
    }

    /**
     * Sets first_dose_vaccine_manufacturer
     *
     * @param string|null $first_dose_vaccine_manufacturer first_dose_vaccine_manufacturer
     *
     * @return self
     */
    public function setFirstDoseVaccineManufacturer($first_dose_vaccine_manufacturer)
    {
        if (is_null($first_dose_vaccine_manufacturer)) {
            array_push($this->openAPINullablesSetToNull, 'first_dose_vaccine_manufacturer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_dose_vaccine_manufacturer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_dose_vaccine_manufacturer'] = $first_dose_vaccine_manufacturer;

        return $this;
    }

    /**
     * Gets second_dose_vaccine_manufacturer
     *
     * @return string|null
     */
    public function getSecondDoseVaccineManufacturer()
    {
        return $this->container['second_dose_vaccine_manufacturer'];
    }

    /**
     * Sets second_dose_vaccine_manufacturer
     *
     * @param string|null $second_dose_vaccine_manufacturer second_dose_vaccine_manufacturer
     *
     * @return self
     */
    public function setSecondDoseVaccineManufacturer($second_dose_vaccine_manufacturer)
    {
        if (is_null($second_dose_vaccine_manufacturer)) {
            array_push($this->openAPINullablesSetToNull, 'second_dose_vaccine_manufacturer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('second_dose_vaccine_manufacturer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['second_dose_vaccine_manufacturer'] = $second_dose_vaccine_manufacturer;

        return $this;
    }

    /**
     * Gets booster_vaccine_manufacturer
     *
     * @return string|null
     */
    public function getBoosterVaccineManufacturer()
    {
        return $this->container['booster_vaccine_manufacturer'];
    }

    /**
     * Sets booster_vaccine_manufacturer
     *
     * @param string|null $booster_vaccine_manufacturer booster_vaccine_manufacturer
     *
     * @return self
     */
    public function setBoosterVaccineManufacturer($booster_vaccine_manufacturer)
    {
        if (is_null($booster_vaccine_manufacturer)) {
            array_push($this->openAPINullablesSetToNull, 'booster_vaccine_manufacturer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('booster_vaccine_manufacturer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['booster_vaccine_manufacturer'] = $booster_vaccine_manufacturer;

        return $this;
    }

    /**
     * Gets vaccination_site_no
     *
     * @return string|null
     */
    public function getVaccinationSiteNo()
    {
        return $this->container['vaccination_site_no'];
    }

    /**
     * Sets vaccination_site_no
     *
     * @param string|null $vaccination_site_no vaccination_site_no
     *
     * @return self
     */
    public function setVaccinationSiteNo($vaccination_site_no)
    {
        if (is_null($vaccination_site_no)) {
            array_push($this->openAPINullablesSetToNull, 'vaccination_site_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vaccination_site_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vaccination_site_no'] = $vaccination_site_no;

        return $this;
    }

    /**
     * Gets booster_site_no
     *
     * @return string|null
     */
    public function getBoosterSiteNo()
    {
        return $this->container['booster_site_no'];
    }

    /**
     * Sets booster_site_no
     *
     * @param string|null $booster_site_no booster_site_no
     *
     * @return self
     */
    public function setBoosterSiteNo($booster_site_no)
    {
        if (is_null($booster_site_no)) {
            array_push($this->openAPINullablesSetToNull, 'booster_site_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('booster_site_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['booster_site_no'] = $booster_site_no;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets has_philhealth
     *
     * @return bool|null
     */
    public function getHasPhilhealth()
    {
        return $this->container['has_philhealth'];
    }

    /**
     * Sets has_philhealth
     *
     * @param bool|null $has_philhealth has_philhealth
     *
     * @return self
     */
    public function setHasPhilhealth($has_philhealth)
    {
        if (is_null($has_philhealth)) {
            array_push($this->openAPINullablesSetToNull, 'has_philhealth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_philhealth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_philhealth'] = $has_philhealth;

        return $this;
    }

    /**
     * Gets phil_health_number
     *
     * @return string|null
     */
    public function getPhilHealthNumber()
    {
        return $this->container['phil_health_number'];
    }

    /**
     * Sets phil_health_number
     *
     * @param string|null $phil_health_number phil_health_number
     *
     * @return self
     */
    public function setPhilHealthNumber($phil_health_number)
    {
        if (is_null($phil_health_number)) {
            array_push($this->openAPINullablesSetToNull, 'phil_health_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phil_health_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phil_health_number'] = $phil_health_number;

        return $this;
    }

    /**
     * Gets vax_card_url
     *
     * @return string|null
     */
    public function getVaxCardUrl()
    {
        return $this->container['vax_card_url'];
    }

    /**
     * Sets vax_card_url
     *
     * @param string|null $vax_card_url vax_card_url
     *
     * @return self
     */
    public function setVaxCardUrl($vax_card_url)
    {
        if (is_null($vax_card_url)) {
            array_push($this->openAPINullablesSetToNull, 'vax_card_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vax_card_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vax_card_url'] = $vax_card_url;

        return $this;
    }

    /**
     * Gets phil_health_url
     *
     * @return string|null
     */
    public function getPhilHealthUrl()
    {
        return $this->container['phil_health_url'];
    }

    /**
     * Sets phil_health_url
     *
     * @param string|null $phil_health_url phil_health_url
     *
     * @return self
     */
    public function setPhilHealthUrl($phil_health_url)
    {
        if (is_null($phil_health_url)) {
            array_push($this->openAPINullablesSetToNull, 'phil_health_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phil_health_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phil_health_url'] = $phil_health_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


