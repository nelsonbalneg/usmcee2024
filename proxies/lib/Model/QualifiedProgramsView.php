<?php
/**
 * QualifiedProgramsView
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * QualifiedProgramsView Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QualifiedProgramsView implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QualifiedProgramsView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'campus_id' => 'int',
        'program_id' => 'int',
        'policy_id' => 'int',
        'real_campus' => 'string',
        'real_campus_id' => 'int',
        'program' => 'string',
        'tenant_id' => 'int',
        'major_disc_id' => 'int',
        'major' => 'string',
        'code' => 'string',
        'pending' => 'int',
        'approved' => 'int',
        'denied' => 'int',
        'usmceetp' => 'int',
        'officially_enrolled' => 'int',
        'unofficially_enrolled' => 'int',
        'program_major_limit' => 'int',
        'cee_slots' => 'int',
        'cee_in_progress' => 'int',
        'cee_slots_remaining' => 'int',
        'total' => 'int',
        'cee_confirm_clicked' => 'int',
        'cee_confirmed' => 'int',
        'ranking_slots' => 'int',
        'ranking_open_slots' => 'int',
        'ranking_open_slots_remaining' => 'int',
        'open_for_ranking' => 'bool',
        'ranking_total_applicants' => 'int',
        'ranged_cut_off' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'campus_id' => 'int32',
        'program_id' => 'int32',
        'policy_id' => 'int32',
        'real_campus' => null,
        'real_campus_id' => 'int32',
        'program' => null,
        'tenant_id' => 'int32',
        'major_disc_id' => 'int32',
        'major' => null,
        'code' => null,
        'pending' => 'int32',
        'approved' => 'int32',
        'denied' => 'int32',
        'usmceetp' => 'int32',
        'officially_enrolled' => 'int32',
        'unofficially_enrolled' => 'int32',
        'program_major_limit' => 'int32',
        'cee_slots' => 'int32',
        'cee_in_progress' => 'int32',
        'cee_slots_remaining' => 'int32',
        'total' => 'int32',
        'cee_confirm_clicked' => 'int32',
        'cee_confirmed' => 'int32',
        'ranking_slots' => 'int32',
        'ranking_open_slots' => 'int32',
        'ranking_open_slots_remaining' => 'int32',
        'open_for_ranking' => null,
        'ranking_total_applicants' => 'int32',
        'ranged_cut_off' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'campus_id' => true,
        'program_id' => true,
        'policy_id' => false,
        'real_campus' => true,
        'real_campus_id' => true,
        'program' => true,
        'tenant_id' => true,
        'major_disc_id' => true,
        'major' => true,
        'code' => true,
        'pending' => false,
        'approved' => false,
        'denied' => false,
        'usmceetp' => true,
        'officially_enrolled' => false,
        'unofficially_enrolled' => false,
        'program_major_limit' => false,
        'cee_slots' => false,
        'cee_in_progress' => false,
        'cee_slots_remaining' => false,
        'total' => false,
        'cee_confirm_clicked' => false,
        'cee_confirmed' => false,
        'ranking_slots' => true,
        'ranking_open_slots' => true,
        'ranking_open_slots_remaining' => true,
        'open_for_ranking' => true,
        'ranking_total_applicants' => true,
        'ranged_cut_off' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campus_id' => 'campusId',
        'program_id' => 'programId',
        'policy_id' => 'policyId',
        'real_campus' => 'realCampus',
        'real_campus_id' => 'realCampusId',
        'program' => 'program',
        'tenant_id' => 'tenantId',
        'major_disc_id' => 'majorDiscId',
        'major' => 'major',
        'code' => 'code',
        'pending' => 'pending',
        'approved' => 'approved',
        'denied' => 'denied',
        'usmceetp' => 'usmceetp',
        'officially_enrolled' => 'officiallyEnrolled',
        'unofficially_enrolled' => 'unofficiallyEnrolled',
        'program_major_limit' => 'programMajorLimit',
        'cee_slots' => 'ceeSlots',
        'cee_in_progress' => 'ceeInProgress',
        'cee_slots_remaining' => 'ceeSlotsRemaining',
        'total' => 'total',
        'cee_confirm_clicked' => 'ceeConfirmClicked',
        'cee_confirmed' => 'ceeConfirmed',
        'ranking_slots' => 'rankingSlots',
        'ranking_open_slots' => 'rankingOpenSlots',
        'ranking_open_slots_remaining' => 'rankingOpenSlotsRemaining',
        'open_for_ranking' => 'openForRanking',
        'ranking_total_applicants' => 'rankingTotalApplicants',
        'ranged_cut_off' => 'rangedCutOff'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campus_id' => 'setCampusId',
        'program_id' => 'setProgramId',
        'policy_id' => 'setPolicyId',
        'real_campus' => 'setRealCampus',
        'real_campus_id' => 'setRealCampusId',
        'program' => 'setProgram',
        'tenant_id' => 'setTenantId',
        'major_disc_id' => 'setMajorDiscId',
        'major' => 'setMajor',
        'code' => 'setCode',
        'pending' => 'setPending',
        'approved' => 'setApproved',
        'denied' => 'setDenied',
        'usmceetp' => 'setUsmceetp',
        'officially_enrolled' => 'setOfficiallyEnrolled',
        'unofficially_enrolled' => 'setUnofficiallyEnrolled',
        'program_major_limit' => 'setProgramMajorLimit',
        'cee_slots' => 'setCeeSlots',
        'cee_in_progress' => 'setCeeInProgress',
        'cee_slots_remaining' => 'setCeeSlotsRemaining',
        'total' => 'setTotal',
        'cee_confirm_clicked' => 'setCeeConfirmClicked',
        'cee_confirmed' => 'setCeeConfirmed',
        'ranking_slots' => 'setRankingSlots',
        'ranking_open_slots' => 'setRankingOpenSlots',
        'ranking_open_slots_remaining' => 'setRankingOpenSlotsRemaining',
        'open_for_ranking' => 'setOpenForRanking',
        'ranking_total_applicants' => 'setRankingTotalApplicants',
        'ranged_cut_off' => 'setRangedCutOff'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campus_id' => 'getCampusId',
        'program_id' => 'getProgramId',
        'policy_id' => 'getPolicyId',
        'real_campus' => 'getRealCampus',
        'real_campus_id' => 'getRealCampusId',
        'program' => 'getProgram',
        'tenant_id' => 'getTenantId',
        'major_disc_id' => 'getMajorDiscId',
        'major' => 'getMajor',
        'code' => 'getCode',
        'pending' => 'getPending',
        'approved' => 'getApproved',
        'denied' => 'getDenied',
        'usmceetp' => 'getUsmceetp',
        'officially_enrolled' => 'getOfficiallyEnrolled',
        'unofficially_enrolled' => 'getUnofficiallyEnrolled',
        'program_major_limit' => 'getProgramMajorLimit',
        'cee_slots' => 'getCeeSlots',
        'cee_in_progress' => 'getCeeInProgress',
        'cee_slots_remaining' => 'getCeeSlotsRemaining',
        'total' => 'getTotal',
        'cee_confirm_clicked' => 'getCeeConfirmClicked',
        'cee_confirmed' => 'getCeeConfirmed',
        'ranking_slots' => 'getRankingSlots',
        'ranking_open_slots' => 'getRankingOpenSlots',
        'ranking_open_slots_remaining' => 'getRankingOpenSlotsRemaining',
        'open_for_ranking' => 'getOpenForRanking',
        'ranking_total_applicants' => 'getRankingTotalApplicants',
        'ranged_cut_off' => 'getRangedCutOff'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('campus_id', $data ?? [], null);
        $this->setIfExists('program_id', $data ?? [], null);
        $this->setIfExists('policy_id', $data ?? [], null);
        $this->setIfExists('real_campus', $data ?? [], null);
        $this->setIfExists('real_campus_id', $data ?? [], null);
        $this->setIfExists('program', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('major_disc_id', $data ?? [], null);
        $this->setIfExists('major', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('pending', $data ?? [], null);
        $this->setIfExists('approved', $data ?? [], null);
        $this->setIfExists('denied', $data ?? [], null);
        $this->setIfExists('usmceetp', $data ?? [], null);
        $this->setIfExists('officially_enrolled', $data ?? [], null);
        $this->setIfExists('unofficially_enrolled', $data ?? [], null);
        $this->setIfExists('program_major_limit', $data ?? [], null);
        $this->setIfExists('cee_slots', $data ?? [], null);
        $this->setIfExists('cee_in_progress', $data ?? [], null);
        $this->setIfExists('cee_slots_remaining', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('cee_confirm_clicked', $data ?? [], null);
        $this->setIfExists('cee_confirmed', $data ?? [], null);
        $this->setIfExists('ranking_slots', $data ?? [], null);
        $this->setIfExists('ranking_open_slots', $data ?? [], null);
        $this->setIfExists('ranking_open_slots_remaining', $data ?? [], null);
        $this->setIfExists('open_for_ranking', $data ?? [], null);
        $this->setIfExists('ranking_total_applicants', $data ?? [], null);
        $this->setIfExists('ranged_cut_off', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campus_id
     *
     * @return int|null
     */
    public function getCampusId()
    {
        return $this->container['campus_id'];
    }

    /**
     * Sets campus_id
     *
     * @param int|null $campus_id campus_id
     *
     * @return self
     */
    public function setCampusId($campus_id)
    {
        if (is_null($campus_id)) {
            array_push($this->openAPINullablesSetToNull, 'campus_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('campus_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['campus_id'] = $campus_id;

        return $this;
    }

    /**
     * Gets program_id
     *
     * @return int|null
     */
    public function getProgramId()
    {
        return $this->container['program_id'];
    }

    /**
     * Sets program_id
     *
     * @param int|null $program_id program_id
     *
     * @return self
     */
    public function setProgramId($program_id)
    {
        if (is_null($program_id)) {
            array_push($this->openAPINullablesSetToNull, 'program_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('program_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['program_id'] = $program_id;

        return $this;
    }

    /**
     * Gets policy_id
     *
     * @return int|null
     */
    public function getPolicyId()
    {
        return $this->container['policy_id'];
    }

    /**
     * Sets policy_id
     *
     * @param int|null $policy_id policy_id
     *
     * @return self
     */
    public function setPolicyId($policy_id)
    {
        if (is_null($policy_id)) {
            throw new \InvalidArgumentException('non-nullable policy_id cannot be null');
        }
        $this->container['policy_id'] = $policy_id;

        return $this;
    }

    /**
     * Gets real_campus
     *
     * @return string|null
     */
    public function getRealCampus()
    {
        return $this->container['real_campus'];
    }

    /**
     * Sets real_campus
     *
     * @param string|null $real_campus real_campus
     *
     * @return self
     */
    public function setRealCampus($real_campus)
    {
        if (is_null($real_campus)) {
            array_push($this->openAPINullablesSetToNull, 'real_campus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('real_campus', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['real_campus'] = $real_campus;

        return $this;
    }

    /**
     * Gets real_campus_id
     *
     * @return int|null
     */
    public function getRealCampusId()
    {
        return $this->container['real_campus_id'];
    }

    /**
     * Sets real_campus_id
     *
     * @param int|null $real_campus_id real_campus_id
     *
     * @return self
     */
    public function setRealCampusId($real_campus_id)
    {
        if (is_null($real_campus_id)) {
            array_push($this->openAPINullablesSetToNull, 'real_campus_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('real_campus_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['real_campus_id'] = $real_campus_id;

        return $this;
    }

    /**
     * Gets program
     *
     * @return string|null
     */
    public function getProgram()
    {
        return $this->container['program'];
    }

    /**
     * Sets program
     *
     * @param string|null $program program
     *
     * @return self
     */
    public function setProgram($program)
    {
        if (is_null($program)) {
            array_push($this->openAPINullablesSetToNull, 'program');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('program', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['program'] = $program;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return int|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param int|null $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            array_push($this->openAPINullablesSetToNull, 'tenant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets major_disc_id
     *
     * @return int|null
     */
    public function getMajorDiscId()
    {
        return $this->container['major_disc_id'];
    }

    /**
     * Sets major_disc_id
     *
     * @param int|null $major_disc_id major_disc_id
     *
     * @return self
     */
    public function setMajorDiscId($major_disc_id)
    {
        if (is_null($major_disc_id)) {
            array_push($this->openAPINullablesSetToNull, 'major_disc_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('major_disc_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['major_disc_id'] = $major_disc_id;

        return $this;
    }

    /**
     * Gets major
     *
     * @return string|null
     */
    public function getMajor()
    {
        return $this->container['major'];
    }

    /**
     * Sets major
     *
     * @param string|null $major major
     *
     * @return self
     */
    public function setMajor($major)
    {
        if (is_null($major)) {
            array_push($this->openAPINullablesSetToNull, 'major');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('major', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['major'] = $major;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets pending
     *
     * @return int|null
     */
    public function getPending()
    {
        return $this->container['pending'];
    }

    /**
     * Sets pending
     *
     * @param int|null $pending pending
     *
     * @return self
     */
    public function setPending($pending)
    {
        if (is_null($pending)) {
            throw new \InvalidArgumentException('non-nullable pending cannot be null');
        }
        $this->container['pending'] = $pending;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return int|null
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param int|null $approved approved
     *
     * @return self
     */
    public function setApproved($approved)
    {
        if (is_null($approved)) {
            throw new \InvalidArgumentException('non-nullable approved cannot be null');
        }
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets denied
     *
     * @return int|null
     */
    public function getDenied()
    {
        return $this->container['denied'];
    }

    /**
     * Sets denied
     *
     * @param int|null $denied denied
     *
     * @return self
     */
    public function setDenied($denied)
    {
        if (is_null($denied)) {
            throw new \InvalidArgumentException('non-nullable denied cannot be null');
        }
        $this->container['denied'] = $denied;

        return $this;
    }

    /**
     * Gets usmceetp
     *
     * @return int|null
     */
    public function getUsmceetp()
    {
        return $this->container['usmceetp'];
    }

    /**
     * Sets usmceetp
     *
     * @param int|null $usmceetp usmceetp
     *
     * @return self
     */
    public function setUsmceetp($usmceetp)
    {
        if (is_null($usmceetp)) {
            array_push($this->openAPINullablesSetToNull, 'usmceetp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usmceetp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usmceetp'] = $usmceetp;

        return $this;
    }

    /**
     * Gets officially_enrolled
     *
     * @return int|null
     */
    public function getOfficiallyEnrolled()
    {
        return $this->container['officially_enrolled'];
    }

    /**
     * Sets officially_enrolled
     *
     * @param int|null $officially_enrolled officially_enrolled
     *
     * @return self
     */
    public function setOfficiallyEnrolled($officially_enrolled)
    {
        if (is_null($officially_enrolled)) {
            throw new \InvalidArgumentException('non-nullable officially_enrolled cannot be null');
        }
        $this->container['officially_enrolled'] = $officially_enrolled;

        return $this;
    }

    /**
     * Gets unofficially_enrolled
     *
     * @return int|null
     */
    public function getUnofficiallyEnrolled()
    {
        return $this->container['unofficially_enrolled'];
    }

    /**
     * Sets unofficially_enrolled
     *
     * @param int|null $unofficially_enrolled unofficially_enrolled
     *
     * @return self
     */
    public function setUnofficiallyEnrolled($unofficially_enrolled)
    {
        if (is_null($unofficially_enrolled)) {
            throw new \InvalidArgumentException('non-nullable unofficially_enrolled cannot be null');
        }
        $this->container['unofficially_enrolled'] = $unofficially_enrolled;

        return $this;
    }

    /**
     * Gets program_major_limit
     *
     * @return int|null
     */
    public function getProgramMajorLimit()
    {
        return $this->container['program_major_limit'];
    }

    /**
     * Sets program_major_limit
     *
     * @param int|null $program_major_limit program_major_limit
     *
     * @return self
     */
    public function setProgramMajorLimit($program_major_limit)
    {
        if (is_null($program_major_limit)) {
            throw new \InvalidArgumentException('non-nullable program_major_limit cannot be null');
        }
        $this->container['program_major_limit'] = $program_major_limit;

        return $this;
    }

    /**
     * Gets cee_slots
     *
     * @return int|null
     */
    public function getCeeSlots()
    {
        return $this->container['cee_slots'];
    }

    /**
     * Sets cee_slots
     *
     * @param int|null $cee_slots cee_slots
     *
     * @return self
     */
    public function setCeeSlots($cee_slots)
    {
        if (is_null($cee_slots)) {
            throw new \InvalidArgumentException('non-nullable cee_slots cannot be null');
        }
        $this->container['cee_slots'] = $cee_slots;

        return $this;
    }

    /**
     * Gets cee_in_progress
     *
     * @return int|null
     */
    public function getCeeInProgress()
    {
        return $this->container['cee_in_progress'];
    }

    /**
     * Sets cee_in_progress
     *
     * @param int|null $cee_in_progress cee_in_progress
     *
     * @return self
     */
    public function setCeeInProgress($cee_in_progress)
    {
        if (is_null($cee_in_progress)) {
            throw new \InvalidArgumentException('non-nullable cee_in_progress cannot be null');
        }
        $this->container['cee_in_progress'] = $cee_in_progress;

        return $this;
    }

    /**
     * Gets cee_slots_remaining
     *
     * @return int|null
     */
    public function getCeeSlotsRemaining()
    {
        return $this->container['cee_slots_remaining'];
    }

    /**
     * Sets cee_slots_remaining
     *
     * @param int|null $cee_slots_remaining cee_slots_remaining
     *
     * @return self
     */
    public function setCeeSlotsRemaining($cee_slots_remaining)
    {
        if (is_null($cee_slots_remaining)) {
            throw new \InvalidArgumentException('non-nullable cee_slots_remaining cannot be null');
        }
        $this->container['cee_slots_remaining'] = $cee_slots_remaining;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets cee_confirm_clicked
     *
     * @return int|null
     */
    public function getCeeConfirmClicked()
    {
        return $this->container['cee_confirm_clicked'];
    }

    /**
     * Sets cee_confirm_clicked
     *
     * @param int|null $cee_confirm_clicked cee_confirm_clicked
     *
     * @return self
     */
    public function setCeeConfirmClicked($cee_confirm_clicked)
    {
        if (is_null($cee_confirm_clicked)) {
            throw new \InvalidArgumentException('non-nullable cee_confirm_clicked cannot be null');
        }
        $this->container['cee_confirm_clicked'] = $cee_confirm_clicked;

        return $this;
    }

    /**
     * Gets cee_confirmed
     *
     * @return int|null
     */
    public function getCeeConfirmed()
    {
        return $this->container['cee_confirmed'];
    }

    /**
     * Sets cee_confirmed
     *
     * @param int|null $cee_confirmed cee_confirmed
     *
     * @return self
     */
    public function setCeeConfirmed($cee_confirmed)
    {
        if (is_null($cee_confirmed)) {
            throw new \InvalidArgumentException('non-nullable cee_confirmed cannot be null');
        }
        $this->container['cee_confirmed'] = $cee_confirmed;

        return $this;
    }

    /**
     * Gets ranking_slots
     *
     * @return int|null
     */
    public function getRankingSlots()
    {
        return $this->container['ranking_slots'];
    }

    /**
     * Sets ranking_slots
     *
     * @param int|null $ranking_slots ranking_slots
     *
     * @return self
     */
    public function setRankingSlots($ranking_slots)
    {
        if (is_null($ranking_slots)) {
            array_push($this->openAPINullablesSetToNull, 'ranking_slots');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ranking_slots', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ranking_slots'] = $ranking_slots;

        return $this;
    }

    /**
     * Gets ranking_open_slots
     *
     * @return int|null
     */
    public function getRankingOpenSlots()
    {
        return $this->container['ranking_open_slots'];
    }

    /**
     * Sets ranking_open_slots
     *
     * @param int|null $ranking_open_slots ranking_open_slots
     *
     * @return self
     */
    public function setRankingOpenSlots($ranking_open_slots)
    {
        if (is_null($ranking_open_slots)) {
            array_push($this->openAPINullablesSetToNull, 'ranking_open_slots');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ranking_open_slots', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ranking_open_slots'] = $ranking_open_slots;

        return $this;
    }

    /**
     * Gets ranking_open_slots_remaining
     *
     * @return int|null
     */
    public function getRankingOpenSlotsRemaining()
    {
        return $this->container['ranking_open_slots_remaining'];
    }

    /**
     * Sets ranking_open_slots_remaining
     *
     * @param int|null $ranking_open_slots_remaining ranking_open_slots_remaining
     *
     * @return self
     */
    public function setRankingOpenSlotsRemaining($ranking_open_slots_remaining)
    {
        if (is_null($ranking_open_slots_remaining)) {
            array_push($this->openAPINullablesSetToNull, 'ranking_open_slots_remaining');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ranking_open_slots_remaining', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ranking_open_slots_remaining'] = $ranking_open_slots_remaining;

        return $this;
    }

    /**
     * Gets open_for_ranking
     *
     * @return bool|null
     */
    public function getOpenForRanking()
    {
        return $this->container['open_for_ranking'];
    }

    /**
     * Sets open_for_ranking
     *
     * @param bool|null $open_for_ranking open_for_ranking
     *
     * @return self
     */
    public function setOpenForRanking($open_for_ranking)
    {
        if (is_null($open_for_ranking)) {
            array_push($this->openAPINullablesSetToNull, 'open_for_ranking');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('open_for_ranking', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['open_for_ranking'] = $open_for_ranking;

        return $this;
    }

    /**
     * Gets ranking_total_applicants
     *
     * @return int|null
     */
    public function getRankingTotalApplicants()
    {
        return $this->container['ranking_total_applicants'];
    }

    /**
     * Sets ranking_total_applicants
     *
     * @param int|null $ranking_total_applicants ranking_total_applicants
     *
     * @return self
     */
    public function setRankingTotalApplicants($ranking_total_applicants)
    {
        if (is_null($ranking_total_applicants)) {
            array_push($this->openAPINullablesSetToNull, 'ranking_total_applicants');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ranking_total_applicants', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ranking_total_applicants'] = $ranking_total_applicants;

        return $this;
    }

    /**
     * Gets ranged_cut_off
     *
     * @return bool|null
     */
    public function getRangedCutOff()
    {
        return $this->container['ranged_cut_off'];
    }

    /**
     * Sets ranged_cut_off
     *
     * @param bool|null $ranged_cut_off ranged_cut_off
     *
     * @return self
     */
    public function setRangedCutOff($ranged_cut_off)
    {
        if (is_null($ranged_cut_off)) {
            array_push($this->openAPINullablesSetToNull, 'ranged_cut_off');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ranged_cut_off', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ranged_cut_off'] = $ranged_cut_off;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


