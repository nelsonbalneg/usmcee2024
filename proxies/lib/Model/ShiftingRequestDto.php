<?php
/**
 * ShiftingRequestDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ShiftingRequestDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShiftingRequestDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShiftingRequestDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'student_no' => 'string',
        'student_name' => 'string',
        'campus_id' => 'int',
        'term_id' => 'int',
        'from_program_id' => 'int',
        'from_program' => 'string',
        'to_program_id' => 'int',
        'to_program' => 'string',
        'reason' => 'string',
        'status' => 'string',
        'guidance_from_id' => 'string',
        'from_guidance' => 'string',
        'from_guidance_approval_date' => '\DateTime',
        'guidance_to_id' => 'string',
        'guidance_to' => 'string',
        'to_guidance_approval_date' => '\DateTime',
        'from_adviser_id' => 'string',
        'from_adviser' => 'string',
        'from_adviser_approval_date' => '\DateTime',
        'to_adviser_id' => 'string',
        'to_adviser' => 'string',
        'to_adviser_approval_date' => '\DateTime',
        'from_dean_id' => 'string',
        'from_dean' => 'string',
        'from_dean_approval_date' => '\DateTime',
        'to_dean_id' => 'string',
        'to_dean' => 'string',
        'to_dean_approval_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'student_no' => null,
        'student_name' => null,
        'campus_id' => 'int32',
        'term_id' => 'int32',
        'from_program_id' => 'int32',
        'from_program' => null,
        'to_program_id' => 'int32',
        'to_program' => null,
        'reason' => null,
        'status' => null,
        'guidance_from_id' => null,
        'from_guidance' => null,
        'from_guidance_approval_date' => 'date-time',
        'guidance_to_id' => null,
        'guidance_to' => null,
        'to_guidance_approval_date' => 'date-time',
        'from_adviser_id' => null,
        'from_adviser' => null,
        'from_adviser_approval_date' => 'date-time',
        'to_adviser_id' => null,
        'to_adviser' => null,
        'to_adviser_approval_date' => 'date-time',
        'from_dean_id' => null,
        'from_dean' => null,
        'from_dean_approval_date' => 'date-time',
        'to_dean_id' => null,
        'to_dean' => null,
        'to_dean_approval_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'student_no' => true,
        'student_name' => true,
        'campus_id' => false,
        'term_id' => false,
        'from_program_id' => false,
        'from_program' => true,
        'to_program_id' => false,
        'to_program' => true,
        'reason' => true,
        'status' => true,
        'guidance_from_id' => true,
        'from_guidance' => true,
        'from_guidance_approval_date' => false,
        'guidance_to_id' => true,
        'guidance_to' => true,
        'to_guidance_approval_date' => false,
        'from_adviser_id' => true,
        'from_adviser' => true,
        'from_adviser_approval_date' => false,
        'to_adviser_id' => true,
        'to_adviser' => true,
        'to_adviser_approval_date' => false,
        'from_dean_id' => true,
        'from_dean' => true,
        'from_dean_approval_date' => false,
        'to_dean_id' => true,
        'to_dean' => true,
        'to_dean_approval_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'student_no' => 'studentNo',
        'student_name' => 'studentName',
        'campus_id' => 'campusId',
        'term_id' => 'termId',
        'from_program_id' => 'fromProgramId',
        'from_program' => 'fromProgram',
        'to_program_id' => 'toProgramId',
        'to_program' => 'toProgram',
        'reason' => 'reason',
        'status' => 'status',
        'guidance_from_id' => 'guidanceFromId',
        'from_guidance' => 'fromGuidance',
        'from_guidance_approval_date' => 'fromGuidanceApprovalDate',
        'guidance_to_id' => 'guidanceToId',
        'guidance_to' => 'guidanceTo',
        'to_guidance_approval_date' => 'toGuidanceApprovalDate',
        'from_adviser_id' => 'fromAdviserId',
        'from_adviser' => 'fromAdviser',
        'from_adviser_approval_date' => 'fromAdviserApprovalDate',
        'to_adviser_id' => 'toAdviserId',
        'to_adviser' => 'toAdviser',
        'to_adviser_approval_date' => 'toAdviserApprovalDate',
        'from_dean_id' => 'fromDeanId',
        'from_dean' => 'fromDean',
        'from_dean_approval_date' => 'fromDeanApprovalDate',
        'to_dean_id' => 'toDeanId',
        'to_dean' => 'toDean',
        'to_dean_approval_date' => 'toDeanApprovalDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'student_no' => 'setStudentNo',
        'student_name' => 'setStudentName',
        'campus_id' => 'setCampusId',
        'term_id' => 'setTermId',
        'from_program_id' => 'setFromProgramId',
        'from_program' => 'setFromProgram',
        'to_program_id' => 'setToProgramId',
        'to_program' => 'setToProgram',
        'reason' => 'setReason',
        'status' => 'setStatus',
        'guidance_from_id' => 'setGuidanceFromId',
        'from_guidance' => 'setFromGuidance',
        'from_guidance_approval_date' => 'setFromGuidanceApprovalDate',
        'guidance_to_id' => 'setGuidanceToId',
        'guidance_to' => 'setGuidanceTo',
        'to_guidance_approval_date' => 'setToGuidanceApprovalDate',
        'from_adviser_id' => 'setFromAdviserId',
        'from_adviser' => 'setFromAdviser',
        'from_adviser_approval_date' => 'setFromAdviserApprovalDate',
        'to_adviser_id' => 'setToAdviserId',
        'to_adviser' => 'setToAdviser',
        'to_adviser_approval_date' => 'setToAdviserApprovalDate',
        'from_dean_id' => 'setFromDeanId',
        'from_dean' => 'setFromDean',
        'from_dean_approval_date' => 'setFromDeanApprovalDate',
        'to_dean_id' => 'setToDeanId',
        'to_dean' => 'setToDean',
        'to_dean_approval_date' => 'setToDeanApprovalDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'student_no' => 'getStudentNo',
        'student_name' => 'getStudentName',
        'campus_id' => 'getCampusId',
        'term_id' => 'getTermId',
        'from_program_id' => 'getFromProgramId',
        'from_program' => 'getFromProgram',
        'to_program_id' => 'getToProgramId',
        'to_program' => 'getToProgram',
        'reason' => 'getReason',
        'status' => 'getStatus',
        'guidance_from_id' => 'getGuidanceFromId',
        'from_guidance' => 'getFromGuidance',
        'from_guidance_approval_date' => 'getFromGuidanceApprovalDate',
        'guidance_to_id' => 'getGuidanceToId',
        'guidance_to' => 'getGuidanceTo',
        'to_guidance_approval_date' => 'getToGuidanceApprovalDate',
        'from_adviser_id' => 'getFromAdviserId',
        'from_adviser' => 'getFromAdviser',
        'from_adviser_approval_date' => 'getFromAdviserApprovalDate',
        'to_adviser_id' => 'getToAdviserId',
        'to_adviser' => 'getToAdviser',
        'to_adviser_approval_date' => 'getToAdviserApprovalDate',
        'from_dean_id' => 'getFromDeanId',
        'from_dean' => 'getFromDean',
        'from_dean_approval_date' => 'getFromDeanApprovalDate',
        'to_dean_id' => 'getToDeanId',
        'to_dean' => 'getToDean',
        'to_dean_approval_date' => 'getToDeanApprovalDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('student_no', $data ?? [], null);
        $this->setIfExists('student_name', $data ?? [], null);
        $this->setIfExists('campus_id', $data ?? [], null);
        $this->setIfExists('term_id', $data ?? [], null);
        $this->setIfExists('from_program_id', $data ?? [], null);
        $this->setIfExists('from_program', $data ?? [], null);
        $this->setIfExists('to_program_id', $data ?? [], null);
        $this->setIfExists('to_program', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('guidance_from_id', $data ?? [], null);
        $this->setIfExists('from_guidance', $data ?? [], null);
        $this->setIfExists('from_guidance_approval_date', $data ?? [], null);
        $this->setIfExists('guidance_to_id', $data ?? [], null);
        $this->setIfExists('guidance_to', $data ?? [], null);
        $this->setIfExists('to_guidance_approval_date', $data ?? [], null);
        $this->setIfExists('from_adviser_id', $data ?? [], null);
        $this->setIfExists('from_adviser', $data ?? [], null);
        $this->setIfExists('from_adviser_approval_date', $data ?? [], null);
        $this->setIfExists('to_adviser_id', $data ?? [], null);
        $this->setIfExists('to_adviser', $data ?? [], null);
        $this->setIfExists('to_adviser_approval_date', $data ?? [], null);
        $this->setIfExists('from_dean_id', $data ?? [], null);
        $this->setIfExists('from_dean', $data ?? [], null);
        $this->setIfExists('from_dean_approval_date', $data ?? [], null);
        $this->setIfExists('to_dean_id', $data ?? [], null);
        $this->setIfExists('to_dean', $data ?? [], null);
        $this->setIfExists('to_dean_approval_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets student_no
     *
     * @return string|null
     */
    public function getStudentNo()
    {
        return $this->container['student_no'];
    }

    /**
     * Sets student_no
     *
     * @param string|null $student_no student_no
     *
     * @return self
     */
    public function setStudentNo($student_no)
    {
        if (is_null($student_no)) {
            array_push($this->openAPINullablesSetToNull, 'student_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student_no'] = $student_no;

        return $this;
    }

    /**
     * Gets student_name
     *
     * @return string|null
     */
    public function getStudentName()
    {
        return $this->container['student_name'];
    }

    /**
     * Sets student_name
     *
     * @param string|null $student_name student_name
     *
     * @return self
     */
    public function setStudentName($student_name)
    {
        if (is_null($student_name)) {
            array_push($this->openAPINullablesSetToNull, 'student_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student_name'] = $student_name;

        return $this;
    }

    /**
     * Gets campus_id
     *
     * @return int|null
     */
    public function getCampusId()
    {
        return $this->container['campus_id'];
    }

    /**
     * Sets campus_id
     *
     * @param int|null $campus_id campus_id
     *
     * @return self
     */
    public function setCampusId($campus_id)
    {
        if (is_null($campus_id)) {
            throw new \InvalidArgumentException('non-nullable campus_id cannot be null');
        }
        $this->container['campus_id'] = $campus_id;

        return $this;
    }

    /**
     * Gets term_id
     *
     * @return int|null
     */
    public function getTermId()
    {
        return $this->container['term_id'];
    }

    /**
     * Sets term_id
     *
     * @param int|null $term_id term_id
     *
     * @return self
     */
    public function setTermId($term_id)
    {
        if (is_null($term_id)) {
            throw new \InvalidArgumentException('non-nullable term_id cannot be null');
        }
        $this->container['term_id'] = $term_id;

        return $this;
    }

    /**
     * Gets from_program_id
     *
     * @return int|null
     */
    public function getFromProgramId()
    {
        return $this->container['from_program_id'];
    }

    /**
     * Sets from_program_id
     *
     * @param int|null $from_program_id from_program_id
     *
     * @return self
     */
    public function setFromProgramId($from_program_id)
    {
        if (is_null($from_program_id)) {
            throw new \InvalidArgumentException('non-nullable from_program_id cannot be null');
        }
        $this->container['from_program_id'] = $from_program_id;

        return $this;
    }

    /**
     * Gets from_program
     *
     * @return string|null
     */
    public function getFromProgram()
    {
        return $this->container['from_program'];
    }

    /**
     * Sets from_program
     *
     * @param string|null $from_program from_program
     *
     * @return self
     */
    public function setFromProgram($from_program)
    {
        if (is_null($from_program)) {
            array_push($this->openAPINullablesSetToNull, 'from_program');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from_program', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['from_program'] = $from_program;

        return $this;
    }

    /**
     * Gets to_program_id
     *
     * @return int|null
     */
    public function getToProgramId()
    {
        return $this->container['to_program_id'];
    }

    /**
     * Sets to_program_id
     *
     * @param int|null $to_program_id to_program_id
     *
     * @return self
     */
    public function setToProgramId($to_program_id)
    {
        if (is_null($to_program_id)) {
            throw new \InvalidArgumentException('non-nullable to_program_id cannot be null');
        }
        $this->container['to_program_id'] = $to_program_id;

        return $this;
    }

    /**
     * Gets to_program
     *
     * @return string|null
     */
    public function getToProgram()
    {
        return $this->container['to_program'];
    }

    /**
     * Sets to_program
     *
     * @param string|null $to_program to_program
     *
     * @return self
     */
    public function setToProgram($to_program)
    {
        if (is_null($to_program)) {
            array_push($this->openAPINullablesSetToNull, 'to_program');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_program', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to_program'] = $to_program;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            array_push($this->openAPINullablesSetToNull, 'reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets guidance_from_id
     *
     * @return string|null
     */
    public function getGuidanceFromId()
    {
        return $this->container['guidance_from_id'];
    }

    /**
     * Sets guidance_from_id
     *
     * @param string|null $guidance_from_id guidance_from_id
     *
     * @return self
     */
    public function setGuidanceFromId($guidance_from_id)
    {
        if (is_null($guidance_from_id)) {
            array_push($this->openAPINullablesSetToNull, 'guidance_from_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guidance_from_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guidance_from_id'] = $guidance_from_id;

        return $this;
    }

    /**
     * Gets from_guidance
     *
     * @return string|null
     */
    public function getFromGuidance()
    {
        return $this->container['from_guidance'];
    }

    /**
     * Sets from_guidance
     *
     * @param string|null $from_guidance from_guidance
     *
     * @return self
     */
    public function setFromGuidance($from_guidance)
    {
        if (is_null($from_guidance)) {
            array_push($this->openAPINullablesSetToNull, 'from_guidance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from_guidance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['from_guidance'] = $from_guidance;

        return $this;
    }

    /**
     * Gets from_guidance_approval_date
     *
     * @return \DateTime|null
     */
    public function getFromGuidanceApprovalDate()
    {
        return $this->container['from_guidance_approval_date'];
    }

    /**
     * Sets from_guidance_approval_date
     *
     * @param \DateTime|null $from_guidance_approval_date from_guidance_approval_date
     *
     * @return self
     */
    public function setFromGuidanceApprovalDate($from_guidance_approval_date)
    {
        if (is_null($from_guidance_approval_date)) {
            throw new \InvalidArgumentException('non-nullable from_guidance_approval_date cannot be null');
        }
        $this->container['from_guidance_approval_date'] = $from_guidance_approval_date;

        return $this;
    }

    /**
     * Gets guidance_to_id
     *
     * @return string|null
     */
    public function getGuidanceToId()
    {
        return $this->container['guidance_to_id'];
    }

    /**
     * Sets guidance_to_id
     *
     * @param string|null $guidance_to_id guidance_to_id
     *
     * @return self
     */
    public function setGuidanceToId($guidance_to_id)
    {
        if (is_null($guidance_to_id)) {
            array_push($this->openAPINullablesSetToNull, 'guidance_to_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guidance_to_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guidance_to_id'] = $guidance_to_id;

        return $this;
    }

    /**
     * Gets guidance_to
     *
     * @return string|null
     */
    public function getGuidanceTo()
    {
        return $this->container['guidance_to'];
    }

    /**
     * Sets guidance_to
     *
     * @param string|null $guidance_to guidance_to
     *
     * @return self
     */
    public function setGuidanceTo($guidance_to)
    {
        if (is_null($guidance_to)) {
            array_push($this->openAPINullablesSetToNull, 'guidance_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guidance_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guidance_to'] = $guidance_to;

        return $this;
    }

    /**
     * Gets to_guidance_approval_date
     *
     * @return \DateTime|null
     */
    public function getToGuidanceApprovalDate()
    {
        return $this->container['to_guidance_approval_date'];
    }

    /**
     * Sets to_guidance_approval_date
     *
     * @param \DateTime|null $to_guidance_approval_date to_guidance_approval_date
     *
     * @return self
     */
    public function setToGuidanceApprovalDate($to_guidance_approval_date)
    {
        if (is_null($to_guidance_approval_date)) {
            throw new \InvalidArgumentException('non-nullable to_guidance_approval_date cannot be null');
        }
        $this->container['to_guidance_approval_date'] = $to_guidance_approval_date;

        return $this;
    }

    /**
     * Gets from_adviser_id
     *
     * @return string|null
     */
    public function getFromAdviserId()
    {
        return $this->container['from_adviser_id'];
    }

    /**
     * Sets from_adviser_id
     *
     * @param string|null $from_adviser_id from_adviser_id
     *
     * @return self
     */
    public function setFromAdviserId($from_adviser_id)
    {
        if (is_null($from_adviser_id)) {
            array_push($this->openAPINullablesSetToNull, 'from_adviser_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from_adviser_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['from_adviser_id'] = $from_adviser_id;

        return $this;
    }

    /**
     * Gets from_adviser
     *
     * @return string|null
     */
    public function getFromAdviser()
    {
        return $this->container['from_adviser'];
    }

    /**
     * Sets from_adviser
     *
     * @param string|null $from_adviser from_adviser
     *
     * @return self
     */
    public function setFromAdviser($from_adviser)
    {
        if (is_null($from_adviser)) {
            array_push($this->openAPINullablesSetToNull, 'from_adviser');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from_adviser', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['from_adviser'] = $from_adviser;

        return $this;
    }

    /**
     * Gets from_adviser_approval_date
     *
     * @return \DateTime|null
     */
    public function getFromAdviserApprovalDate()
    {
        return $this->container['from_adviser_approval_date'];
    }

    /**
     * Sets from_adviser_approval_date
     *
     * @param \DateTime|null $from_adviser_approval_date from_adviser_approval_date
     *
     * @return self
     */
    public function setFromAdviserApprovalDate($from_adviser_approval_date)
    {
        if (is_null($from_adviser_approval_date)) {
            throw new \InvalidArgumentException('non-nullable from_adviser_approval_date cannot be null');
        }
        $this->container['from_adviser_approval_date'] = $from_adviser_approval_date;

        return $this;
    }

    /**
     * Gets to_adviser_id
     *
     * @return string|null
     */
    public function getToAdviserId()
    {
        return $this->container['to_adviser_id'];
    }

    /**
     * Sets to_adviser_id
     *
     * @param string|null $to_adviser_id to_adviser_id
     *
     * @return self
     */
    public function setToAdviserId($to_adviser_id)
    {
        if (is_null($to_adviser_id)) {
            array_push($this->openAPINullablesSetToNull, 'to_adviser_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_adviser_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to_adviser_id'] = $to_adviser_id;

        return $this;
    }

    /**
     * Gets to_adviser
     *
     * @return string|null
     */
    public function getToAdviser()
    {
        return $this->container['to_adviser'];
    }

    /**
     * Sets to_adviser
     *
     * @param string|null $to_adviser to_adviser
     *
     * @return self
     */
    public function setToAdviser($to_adviser)
    {
        if (is_null($to_adviser)) {
            array_push($this->openAPINullablesSetToNull, 'to_adviser');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_adviser', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to_adviser'] = $to_adviser;

        return $this;
    }

    /**
     * Gets to_adviser_approval_date
     *
     * @return \DateTime|null
     */
    public function getToAdviserApprovalDate()
    {
        return $this->container['to_adviser_approval_date'];
    }

    /**
     * Sets to_adviser_approval_date
     *
     * @param \DateTime|null $to_adviser_approval_date to_adviser_approval_date
     *
     * @return self
     */
    public function setToAdviserApprovalDate($to_adviser_approval_date)
    {
        if (is_null($to_adviser_approval_date)) {
            throw new \InvalidArgumentException('non-nullable to_adviser_approval_date cannot be null');
        }
        $this->container['to_adviser_approval_date'] = $to_adviser_approval_date;

        return $this;
    }

    /**
     * Gets from_dean_id
     *
     * @return string|null
     */
    public function getFromDeanId()
    {
        return $this->container['from_dean_id'];
    }

    /**
     * Sets from_dean_id
     *
     * @param string|null $from_dean_id from_dean_id
     *
     * @return self
     */
    public function setFromDeanId($from_dean_id)
    {
        if (is_null($from_dean_id)) {
            array_push($this->openAPINullablesSetToNull, 'from_dean_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from_dean_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['from_dean_id'] = $from_dean_id;

        return $this;
    }

    /**
     * Gets from_dean
     *
     * @return string|null
     */
    public function getFromDean()
    {
        return $this->container['from_dean'];
    }

    /**
     * Sets from_dean
     *
     * @param string|null $from_dean from_dean
     *
     * @return self
     */
    public function setFromDean($from_dean)
    {
        if (is_null($from_dean)) {
            array_push($this->openAPINullablesSetToNull, 'from_dean');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from_dean', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['from_dean'] = $from_dean;

        return $this;
    }

    /**
     * Gets from_dean_approval_date
     *
     * @return \DateTime|null
     */
    public function getFromDeanApprovalDate()
    {
        return $this->container['from_dean_approval_date'];
    }

    /**
     * Sets from_dean_approval_date
     *
     * @param \DateTime|null $from_dean_approval_date from_dean_approval_date
     *
     * @return self
     */
    public function setFromDeanApprovalDate($from_dean_approval_date)
    {
        if (is_null($from_dean_approval_date)) {
            throw new \InvalidArgumentException('non-nullable from_dean_approval_date cannot be null');
        }
        $this->container['from_dean_approval_date'] = $from_dean_approval_date;

        return $this;
    }

    /**
     * Gets to_dean_id
     *
     * @return string|null
     */
    public function getToDeanId()
    {
        return $this->container['to_dean_id'];
    }

    /**
     * Sets to_dean_id
     *
     * @param string|null $to_dean_id to_dean_id
     *
     * @return self
     */
    public function setToDeanId($to_dean_id)
    {
        if (is_null($to_dean_id)) {
            array_push($this->openAPINullablesSetToNull, 'to_dean_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_dean_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to_dean_id'] = $to_dean_id;

        return $this;
    }

    /**
     * Gets to_dean
     *
     * @return string|null
     */
    public function getToDean()
    {
        return $this->container['to_dean'];
    }

    /**
     * Sets to_dean
     *
     * @param string|null $to_dean to_dean
     *
     * @return self
     */
    public function setToDean($to_dean)
    {
        if (is_null($to_dean)) {
            array_push($this->openAPINullablesSetToNull, 'to_dean');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_dean', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to_dean'] = $to_dean;

        return $this;
    }

    /**
     * Gets to_dean_approval_date
     *
     * @return \DateTime|null
     */
    public function getToDeanApprovalDate()
    {
        return $this->container['to_dean_approval_date'];
    }

    /**
     * Sets to_dean_approval_date
     *
     * @param \DateTime|null $to_dean_approval_date to_dean_approval_date
     *
     * @return self
     */
    public function setToDeanApprovalDate($to_dean_approval_date)
    {
        if (is_null($to_dean_approval_date)) {
            throw new \InvalidArgumentException('non-nullable to_dean_approval_date cannot be null');
        }
        $this->container['to_dean_approval_date'] = $to_dean_approval_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


