<?php
/**
 * ReservationDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ReservationDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReservationDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReservationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'app_number' => 'string',
        'program_id' => 'int',
        'campus_id' => 'int',
        'real_campus_id' => 'int',
        'date_reserved' => '\DateTime',
        'term_id' => 'int',
        'major_id' => 'int',
        'college_id' => 'int',
        'policy_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'app_number' => null,
        'program_id' => 'int32',
        'campus_id' => 'int32',
        'real_campus_id' => 'int32',
        'date_reserved' => 'date-time',
        'term_id' => 'int32',
        'major_id' => 'int32',
        'college_id' => 'int32',
        'policy_id' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'app_number' => true,
        'program_id' => false,
        'campus_id' => false,
        'real_campus_id' => true,
        'date_reserved' => false,
        'term_id' => false,
        'major_id' => true,
        'college_id' => false,
        'policy_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_number' => 'appNumber',
        'program_id' => 'programId',
        'campus_id' => 'campusId',
        'real_campus_id' => 'realCampusId',
        'date_reserved' => 'dateReserved',
        'term_id' => 'termId',
        'major_id' => 'majorId',
        'college_id' => 'collegeId',
        'policy_id' => 'policyId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_number' => 'setAppNumber',
        'program_id' => 'setProgramId',
        'campus_id' => 'setCampusId',
        'real_campus_id' => 'setRealCampusId',
        'date_reserved' => 'setDateReserved',
        'term_id' => 'setTermId',
        'major_id' => 'setMajorId',
        'college_id' => 'setCollegeId',
        'policy_id' => 'setPolicyId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_number' => 'getAppNumber',
        'program_id' => 'getProgramId',
        'campus_id' => 'getCampusId',
        'real_campus_id' => 'getRealCampusId',
        'date_reserved' => 'getDateReserved',
        'term_id' => 'getTermId',
        'major_id' => 'getMajorId',
        'college_id' => 'getCollegeId',
        'policy_id' => 'getPolicyId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('app_number', $data ?? [], null);
        $this->setIfExists('program_id', $data ?? [], null);
        $this->setIfExists('campus_id', $data ?? [], null);
        $this->setIfExists('real_campus_id', $data ?? [], null);
        $this->setIfExists('date_reserved', $data ?? [], null);
        $this->setIfExists('term_id', $data ?? [], null);
        $this->setIfExists('major_id', $data ?? [], null);
        $this->setIfExists('college_id', $data ?? [], null);
        $this->setIfExists('policy_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_number
     *
     * @return string|null
     */
    public function getAppNumber()
    {
        return $this->container['app_number'];
    }

    /**
     * Sets app_number
     *
     * @param string|null $app_number app_number
     *
     * @return self
     */
    public function setAppNumber($app_number)
    {
        if (is_null($app_number)) {
            array_push($this->openAPINullablesSetToNull, 'app_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('app_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['app_number'] = $app_number;

        return $this;
    }

    /**
     * Gets program_id
     *
     * @return int|null
     */
    public function getProgramId()
    {
        return $this->container['program_id'];
    }

    /**
     * Sets program_id
     *
     * @param int|null $program_id program_id
     *
     * @return self
     */
    public function setProgramId($program_id)
    {
        if (is_null($program_id)) {
            throw new \InvalidArgumentException('non-nullable program_id cannot be null');
        }
        $this->container['program_id'] = $program_id;

        return $this;
    }

    /**
     * Gets campus_id
     *
     * @return int|null
     */
    public function getCampusId()
    {
        return $this->container['campus_id'];
    }

    /**
     * Sets campus_id
     *
     * @param int|null $campus_id campus_id
     *
     * @return self
     */
    public function setCampusId($campus_id)
    {
        if (is_null($campus_id)) {
            throw new \InvalidArgumentException('non-nullable campus_id cannot be null');
        }
        $this->container['campus_id'] = $campus_id;

        return $this;
    }

    /**
     * Gets real_campus_id
     *
     * @return int|null
     */
    public function getRealCampusId()
    {
        return $this->container['real_campus_id'];
    }

    /**
     * Sets real_campus_id
     *
     * @param int|null $real_campus_id real_campus_id
     *
     * @return self
     */
    public function setRealCampusId($real_campus_id)
    {
        if (is_null($real_campus_id)) {
            array_push($this->openAPINullablesSetToNull, 'real_campus_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('real_campus_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['real_campus_id'] = $real_campus_id;

        return $this;
    }

    /**
     * Gets date_reserved
     *
     * @return \DateTime|null
     */
    public function getDateReserved()
    {
        return $this->container['date_reserved'];
    }

    /**
     * Sets date_reserved
     *
     * @param \DateTime|null $date_reserved date_reserved
     *
     * @return self
     */
    public function setDateReserved($date_reserved)
    {
        if (is_null($date_reserved)) {
            throw new \InvalidArgumentException('non-nullable date_reserved cannot be null');
        }
        $this->container['date_reserved'] = $date_reserved;

        return $this;
    }

    /**
     * Gets term_id
     *
     * @return int|null
     */
    public function getTermId()
    {
        return $this->container['term_id'];
    }

    /**
     * Sets term_id
     *
     * @param int|null $term_id term_id
     *
     * @return self
     */
    public function setTermId($term_id)
    {
        if (is_null($term_id)) {
            throw new \InvalidArgumentException('non-nullable term_id cannot be null');
        }
        $this->container['term_id'] = $term_id;

        return $this;
    }

    /**
     * Gets major_id
     *
     * @return int|null
     */
    public function getMajorId()
    {
        return $this->container['major_id'];
    }

    /**
     * Sets major_id
     *
     * @param int|null $major_id major_id
     *
     * @return self
     */
    public function setMajorId($major_id)
    {
        if (is_null($major_id)) {
            array_push($this->openAPINullablesSetToNull, 'major_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('major_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['major_id'] = $major_id;

        return $this;
    }

    /**
     * Gets college_id
     *
     * @return int|null
     */
    public function getCollegeId()
    {
        return $this->container['college_id'];
    }

    /**
     * Sets college_id
     *
     * @param int|null $college_id college_id
     *
     * @return self
     */
    public function setCollegeId($college_id)
    {
        if (is_null($college_id)) {
            throw new \InvalidArgumentException('non-nullable college_id cannot be null');
        }
        $this->container['college_id'] = $college_id;

        return $this;
    }

    /**
     * Gets policy_id
     *
     * @return int|null
     */
    public function getPolicyId()
    {
        return $this->container['policy_id'];
    }

    /**
     * Sets policy_id
     *
     * @param int|null $policy_id policy_id
     *
     * @return self
     */
    public function setPolicyId($policy_id)
    {
        if (is_null($policy_id)) {
            throw new \InvalidArgumentException('non-nullable policy_id cannot be null');
        }
        $this->container['policy_id'] = $policy_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


