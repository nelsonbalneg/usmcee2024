<?php
/**
 * GradesDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GradesDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GradesDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GradesDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'grade_idx' => 'int',
        'schedule_id' => 'int',
        'student_no' => 'string',
        'midterm_class_standing' => 'float',
        'midterm_exam' => 'float',
        'midterm_transmuted_grade' => 'float',
        'midterm_course_grade' => 'float',
        'final_class_standing' => 'float',
        'final_exam' => 'float',
        'final_transmuted_grade' => 'float',
        'final_course_grade' => 'float',
        'midterm' => 'string',
        'final' => 'string',
        're_exam' => 'string',
        'last_modified_by' => 'string',
        'last_modified_date' => '\DateTime',
        'correction_by' => 'string',
        'correction_date' => '\DateTime',
        'reason' => 'string',
        'old_midterm' => 'string',
        'old_final' => 'string',
        'old_re_exam' => 'string',
        'campus_id' => 'int',
        'term_id' => 'int',
        'subject_id' => 'int',
        'prog_id' => 'int',
        'major_id' => 'int',
        'employee_id' => 'string',
        'year_level_id' => 'int',
        'school_id' => 'int',
        'college_id' => 'int',
        'prog_major_id' => 'int',
        'remarks' => 'string',
        'lock' => 'bool',
        'school_name' => 'string',
        'acad_program_other_school' => 'string',
        'date_posted' => '\DateTime',
        'year_term_id' => 'int',
        'sort_order' => 'int',
        'prog_class_id' => 'int',
        'received_by' => 'string',
        'received_date' => '\DateTime',
        'reg_tag_id' => 'int',
        'equivalent_subject_id' => 'int',
        'not_credited' => 'bool',
        'credited_from_other_school' => 'bool',
        'showin_transcript' => 'bool',
        'custom_grades' => 'bool',
        'final_remarks' => 'string',
        'edited_subject_title' => 'string',
        'noof_absences' => 'int',
        'equivalent_mode' => 'int',
        'prelim' => 'string',
        'thesis_title' => 'string',
        'curriculum_subject_id' => 'int',
        'curriculum_subject_index_id' => 'int',
        'posted_by' => 'string',
        'midterm_posted_by' => 'string',
        'midterm_posted_date' => '\DateTime',
        'credited_unit' => 'string',
        'validation_date' => '\DateTime',
        'remark_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'grade_idx' => 'int32',
        'schedule_id' => 'int32',
        'student_no' => null,
        'midterm_class_standing' => 'double',
        'midterm_exam' => 'double',
        'midterm_transmuted_grade' => 'double',
        'midterm_course_grade' => 'double',
        'final_class_standing' => 'double',
        'final_exam' => 'double',
        'final_transmuted_grade' => 'double',
        'final_course_grade' => 'double',
        'midterm' => null,
        'final' => null,
        're_exam' => null,
        'last_modified_by' => null,
        'last_modified_date' => 'date-time',
        'correction_by' => null,
        'correction_date' => 'date-time',
        'reason' => null,
        'old_midterm' => null,
        'old_final' => null,
        'old_re_exam' => null,
        'campus_id' => 'int32',
        'term_id' => 'int32',
        'subject_id' => 'int32',
        'prog_id' => 'int32',
        'major_id' => 'int32',
        'employee_id' => null,
        'year_level_id' => 'int32',
        'school_id' => 'int32',
        'college_id' => 'int32',
        'prog_major_id' => 'int32',
        'remarks' => null,
        'lock' => null,
        'school_name' => null,
        'acad_program_other_school' => null,
        'date_posted' => 'date-time',
        'year_term_id' => 'int32',
        'sort_order' => 'int32',
        'prog_class_id' => 'int32',
        'received_by' => null,
        'received_date' => 'date-time',
        'reg_tag_id' => 'int32',
        'equivalent_subject_id' => 'int32',
        'not_credited' => null,
        'credited_from_other_school' => null,
        'showin_transcript' => null,
        'custom_grades' => null,
        'final_remarks' => null,
        'edited_subject_title' => null,
        'noof_absences' => 'int32',
        'equivalent_mode' => 'int32',
        'prelim' => null,
        'thesis_title' => null,
        'curriculum_subject_id' => 'int32',
        'curriculum_subject_index_id' => 'int32',
        'posted_by' => null,
        'midterm_posted_by' => null,
        'midterm_posted_date' => 'date-time',
        'credited_unit' => null,
        'validation_date' => 'date-time',
        'remark_id' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'grade_idx' => false,
        'schedule_id' => false,
        'student_no' => true,
        'midterm_class_standing' => false,
        'midterm_exam' => false,
        'midterm_transmuted_grade' => false,
        'midterm_course_grade' => false,
        'final_class_standing' => false,
        'final_exam' => false,
        'final_transmuted_grade' => false,
        'final_course_grade' => false,
        'midterm' => true,
        'final' => true,
        're_exam' => true,
        'last_modified_by' => true,
        'last_modified_date' => true,
        'correction_by' => true,
        'correction_date' => true,
        'reason' => true,
        'old_midterm' => true,
        'old_final' => true,
        'old_re_exam' => true,
        'campus_id' => false,
        'term_id' => false,
        'subject_id' => false,
        'prog_id' => false,
        'major_id' => false,
        'employee_id' => true,
        'year_level_id' => false,
        'school_id' => false,
        'college_id' => false,
        'prog_major_id' => false,
        'remarks' => true,
        'lock' => false,
        'school_name' => true,
        'acad_program_other_school' => true,
        'date_posted' => true,
        'year_term_id' => false,
        'sort_order' => false,
        'prog_class_id' => false,
        'received_by' => true,
        'received_date' => true,
        'reg_tag_id' => false,
        'equivalent_subject_id' => false,
        'not_credited' => false,
        'credited_from_other_school' => false,
        'showin_transcript' => false,
        'custom_grades' => false,
        'final_remarks' => true,
        'edited_subject_title' => true,
        'noof_absences' => false,
        'equivalent_mode' => false,
        'prelim' => true,
        'thesis_title' => true,
        'curriculum_subject_id' => false,
        'curriculum_subject_index_id' => false,
        'posted_by' => true,
        'midterm_posted_by' => true,
        'midterm_posted_date' => true,
        'credited_unit' => true,
        'validation_date' => true,
        'remark_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'grade_idx' => 'gradeIDX',
        'schedule_id' => 'scheduleID',
        'student_no' => 'studentNo',
        'midterm_class_standing' => 'midtermClassStanding',
        'midterm_exam' => 'midtermExam',
        'midterm_transmuted_grade' => 'midtermTransmutedGrade',
        'midterm_course_grade' => 'midtermCourseGrade',
        'final_class_standing' => 'finalClassStanding',
        'final_exam' => 'finalExam',
        'final_transmuted_grade' => 'finalTransmutedGrade',
        'final_course_grade' => 'finalCourseGrade',
        'midterm' => 'midterm',
        'final' => 'final',
        're_exam' => 'reExam',
        'last_modified_by' => 'lastModifiedBy',
        'last_modified_date' => 'lastModifiedDate',
        'correction_by' => 'correctionBy',
        'correction_date' => 'correctionDate',
        'reason' => 'reason',
        'old_midterm' => 'oldMidterm',
        'old_final' => 'oldFinal',
        'old_re_exam' => 'oldReExam',
        'campus_id' => 'campusID',
        'term_id' => 'termID',
        'subject_id' => 'subjectID',
        'prog_id' => 'progID',
        'major_id' => 'majorID',
        'employee_id' => 'employeeID',
        'year_level_id' => 'yearLevelID',
        'school_id' => 'schoolID',
        'college_id' => 'collegeID',
        'prog_major_id' => 'progMajorID',
        'remarks' => 'remarks',
        'lock' => 'lock',
        'school_name' => 'schoolName',
        'acad_program_other_school' => 'acadProgramOtherSchool',
        'date_posted' => 'datePosted',
        'year_term_id' => 'yearTermID',
        'sort_order' => 'sortOrder',
        'prog_class_id' => 'progClassID',
        'received_by' => 'receivedBy',
        'received_date' => 'receivedDate',
        'reg_tag_id' => 'regTagID',
        'equivalent_subject_id' => 'equivalentSubjectID',
        'not_credited' => 'notCredited',
        'credited_from_other_school' => 'creditedFromOtherSchool',
        'showin_transcript' => 'showinTranscript',
        'custom_grades' => 'customGrades',
        'final_remarks' => 'finalRemarks',
        'edited_subject_title' => 'editedSubjectTitle',
        'noof_absences' => 'noofAbsences',
        'equivalent_mode' => 'equivalentMode',
        'prelim' => 'prelim',
        'thesis_title' => 'thesisTitle',
        'curriculum_subject_id' => 'curriculumSubjectID',
        'curriculum_subject_index_id' => 'curriculumSubjectIndexID',
        'posted_by' => 'postedBy',
        'midterm_posted_by' => 'midtermPostedBy',
        'midterm_posted_date' => 'midtermPostedDate',
        'credited_unit' => 'creditedUnit',
        'validation_date' => 'validationDate',
        'remark_id' => 'remarkId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'grade_idx' => 'setGradeIdx',
        'schedule_id' => 'setScheduleId',
        'student_no' => 'setStudentNo',
        'midterm_class_standing' => 'setMidtermClassStanding',
        'midterm_exam' => 'setMidtermExam',
        'midterm_transmuted_grade' => 'setMidtermTransmutedGrade',
        'midterm_course_grade' => 'setMidtermCourseGrade',
        'final_class_standing' => 'setFinalClassStanding',
        'final_exam' => 'setFinalExam',
        'final_transmuted_grade' => 'setFinalTransmutedGrade',
        'final_course_grade' => 'setFinalCourseGrade',
        'midterm' => 'setMidterm',
        'final' => 'setFinal',
        're_exam' => 'setReExam',
        'last_modified_by' => 'setLastModifiedBy',
        'last_modified_date' => 'setLastModifiedDate',
        'correction_by' => 'setCorrectionBy',
        'correction_date' => 'setCorrectionDate',
        'reason' => 'setReason',
        'old_midterm' => 'setOldMidterm',
        'old_final' => 'setOldFinal',
        'old_re_exam' => 'setOldReExam',
        'campus_id' => 'setCampusId',
        'term_id' => 'setTermId',
        'subject_id' => 'setSubjectId',
        'prog_id' => 'setProgId',
        'major_id' => 'setMajorId',
        'employee_id' => 'setEmployeeId',
        'year_level_id' => 'setYearLevelId',
        'school_id' => 'setSchoolId',
        'college_id' => 'setCollegeId',
        'prog_major_id' => 'setProgMajorId',
        'remarks' => 'setRemarks',
        'lock' => 'setLock',
        'school_name' => 'setSchoolName',
        'acad_program_other_school' => 'setAcadProgramOtherSchool',
        'date_posted' => 'setDatePosted',
        'year_term_id' => 'setYearTermId',
        'sort_order' => 'setSortOrder',
        'prog_class_id' => 'setProgClassId',
        'received_by' => 'setReceivedBy',
        'received_date' => 'setReceivedDate',
        'reg_tag_id' => 'setRegTagId',
        'equivalent_subject_id' => 'setEquivalentSubjectId',
        'not_credited' => 'setNotCredited',
        'credited_from_other_school' => 'setCreditedFromOtherSchool',
        'showin_transcript' => 'setShowinTranscript',
        'custom_grades' => 'setCustomGrades',
        'final_remarks' => 'setFinalRemarks',
        'edited_subject_title' => 'setEditedSubjectTitle',
        'noof_absences' => 'setNoofAbsences',
        'equivalent_mode' => 'setEquivalentMode',
        'prelim' => 'setPrelim',
        'thesis_title' => 'setThesisTitle',
        'curriculum_subject_id' => 'setCurriculumSubjectId',
        'curriculum_subject_index_id' => 'setCurriculumSubjectIndexId',
        'posted_by' => 'setPostedBy',
        'midterm_posted_by' => 'setMidtermPostedBy',
        'midterm_posted_date' => 'setMidtermPostedDate',
        'credited_unit' => 'setCreditedUnit',
        'validation_date' => 'setValidationDate',
        'remark_id' => 'setRemarkId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'grade_idx' => 'getGradeIdx',
        'schedule_id' => 'getScheduleId',
        'student_no' => 'getStudentNo',
        'midterm_class_standing' => 'getMidtermClassStanding',
        'midterm_exam' => 'getMidtermExam',
        'midterm_transmuted_grade' => 'getMidtermTransmutedGrade',
        'midterm_course_grade' => 'getMidtermCourseGrade',
        'final_class_standing' => 'getFinalClassStanding',
        'final_exam' => 'getFinalExam',
        'final_transmuted_grade' => 'getFinalTransmutedGrade',
        'final_course_grade' => 'getFinalCourseGrade',
        'midterm' => 'getMidterm',
        'final' => 'getFinal',
        're_exam' => 'getReExam',
        'last_modified_by' => 'getLastModifiedBy',
        'last_modified_date' => 'getLastModifiedDate',
        'correction_by' => 'getCorrectionBy',
        'correction_date' => 'getCorrectionDate',
        'reason' => 'getReason',
        'old_midterm' => 'getOldMidterm',
        'old_final' => 'getOldFinal',
        'old_re_exam' => 'getOldReExam',
        'campus_id' => 'getCampusId',
        'term_id' => 'getTermId',
        'subject_id' => 'getSubjectId',
        'prog_id' => 'getProgId',
        'major_id' => 'getMajorId',
        'employee_id' => 'getEmployeeId',
        'year_level_id' => 'getYearLevelId',
        'school_id' => 'getSchoolId',
        'college_id' => 'getCollegeId',
        'prog_major_id' => 'getProgMajorId',
        'remarks' => 'getRemarks',
        'lock' => 'getLock',
        'school_name' => 'getSchoolName',
        'acad_program_other_school' => 'getAcadProgramOtherSchool',
        'date_posted' => 'getDatePosted',
        'year_term_id' => 'getYearTermId',
        'sort_order' => 'getSortOrder',
        'prog_class_id' => 'getProgClassId',
        'received_by' => 'getReceivedBy',
        'received_date' => 'getReceivedDate',
        'reg_tag_id' => 'getRegTagId',
        'equivalent_subject_id' => 'getEquivalentSubjectId',
        'not_credited' => 'getNotCredited',
        'credited_from_other_school' => 'getCreditedFromOtherSchool',
        'showin_transcript' => 'getShowinTranscript',
        'custom_grades' => 'getCustomGrades',
        'final_remarks' => 'getFinalRemarks',
        'edited_subject_title' => 'getEditedSubjectTitle',
        'noof_absences' => 'getNoofAbsences',
        'equivalent_mode' => 'getEquivalentMode',
        'prelim' => 'getPrelim',
        'thesis_title' => 'getThesisTitle',
        'curriculum_subject_id' => 'getCurriculumSubjectId',
        'curriculum_subject_index_id' => 'getCurriculumSubjectIndexId',
        'posted_by' => 'getPostedBy',
        'midterm_posted_by' => 'getMidtermPostedBy',
        'midterm_posted_date' => 'getMidtermPostedDate',
        'credited_unit' => 'getCreditedUnit',
        'validation_date' => 'getValidationDate',
        'remark_id' => 'getRemarkId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('grade_idx', $data ?? [], null);
        $this->setIfExists('schedule_id', $data ?? [], null);
        $this->setIfExists('student_no', $data ?? [], null);
        $this->setIfExists('midterm_class_standing', $data ?? [], null);
        $this->setIfExists('midterm_exam', $data ?? [], null);
        $this->setIfExists('midterm_transmuted_grade', $data ?? [], null);
        $this->setIfExists('midterm_course_grade', $data ?? [], null);
        $this->setIfExists('final_class_standing', $data ?? [], null);
        $this->setIfExists('final_exam', $data ?? [], null);
        $this->setIfExists('final_transmuted_grade', $data ?? [], null);
        $this->setIfExists('final_course_grade', $data ?? [], null);
        $this->setIfExists('midterm', $data ?? [], null);
        $this->setIfExists('final', $data ?? [], null);
        $this->setIfExists('re_exam', $data ?? [], null);
        $this->setIfExists('last_modified_by', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('correction_by', $data ?? [], null);
        $this->setIfExists('correction_date', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('old_midterm', $data ?? [], null);
        $this->setIfExists('old_final', $data ?? [], null);
        $this->setIfExists('old_re_exam', $data ?? [], null);
        $this->setIfExists('campus_id', $data ?? [], null);
        $this->setIfExists('term_id', $data ?? [], null);
        $this->setIfExists('subject_id', $data ?? [], null);
        $this->setIfExists('prog_id', $data ?? [], null);
        $this->setIfExists('major_id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('year_level_id', $data ?? [], null);
        $this->setIfExists('school_id', $data ?? [], null);
        $this->setIfExists('college_id', $data ?? [], null);
        $this->setIfExists('prog_major_id', $data ?? [], null);
        $this->setIfExists('remarks', $data ?? [], null);
        $this->setIfExists('lock', $data ?? [], null);
        $this->setIfExists('school_name', $data ?? [], null);
        $this->setIfExists('acad_program_other_school', $data ?? [], null);
        $this->setIfExists('date_posted', $data ?? [], null);
        $this->setIfExists('year_term_id', $data ?? [], null);
        $this->setIfExists('sort_order', $data ?? [], null);
        $this->setIfExists('prog_class_id', $data ?? [], null);
        $this->setIfExists('received_by', $data ?? [], null);
        $this->setIfExists('received_date', $data ?? [], null);
        $this->setIfExists('reg_tag_id', $data ?? [], null);
        $this->setIfExists('equivalent_subject_id', $data ?? [], null);
        $this->setIfExists('not_credited', $data ?? [], null);
        $this->setIfExists('credited_from_other_school', $data ?? [], null);
        $this->setIfExists('showin_transcript', $data ?? [], null);
        $this->setIfExists('custom_grades', $data ?? [], null);
        $this->setIfExists('final_remarks', $data ?? [], null);
        $this->setIfExists('edited_subject_title', $data ?? [], null);
        $this->setIfExists('noof_absences', $data ?? [], null);
        $this->setIfExists('equivalent_mode', $data ?? [], null);
        $this->setIfExists('prelim', $data ?? [], null);
        $this->setIfExists('thesis_title', $data ?? [], null);
        $this->setIfExists('curriculum_subject_id', $data ?? [], null);
        $this->setIfExists('curriculum_subject_index_id', $data ?? [], null);
        $this->setIfExists('posted_by', $data ?? [], null);
        $this->setIfExists('midterm_posted_by', $data ?? [], null);
        $this->setIfExists('midterm_posted_date', $data ?? [], null);
        $this->setIfExists('credited_unit', $data ?? [], null);
        $this->setIfExists('validation_date', $data ?? [], null);
        $this->setIfExists('remark_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets grade_idx
     *
     * @return int|null
     */
    public function getGradeIdx()
    {
        return $this->container['grade_idx'];
    }

    /**
     * Sets grade_idx
     *
     * @param int|null $grade_idx grade_idx
     *
     * @return self
     */
    public function setGradeIdx($grade_idx)
    {
        if (is_null($grade_idx)) {
            throw new \InvalidArgumentException('non-nullable grade_idx cannot be null');
        }
        $this->container['grade_idx'] = $grade_idx;

        return $this;
    }

    /**
     * Gets schedule_id
     *
     * @return int|null
     */
    public function getScheduleId()
    {
        return $this->container['schedule_id'];
    }

    /**
     * Sets schedule_id
     *
     * @param int|null $schedule_id schedule_id
     *
     * @return self
     */
    public function setScheduleId($schedule_id)
    {
        if (is_null($schedule_id)) {
            throw new \InvalidArgumentException('non-nullable schedule_id cannot be null');
        }
        $this->container['schedule_id'] = $schedule_id;

        return $this;
    }

    /**
     * Gets student_no
     *
     * @return string|null
     */
    public function getStudentNo()
    {
        return $this->container['student_no'];
    }

    /**
     * Sets student_no
     *
     * @param string|null $student_no student_no
     *
     * @return self
     */
    public function setStudentNo($student_no)
    {
        if (is_null($student_no)) {
            array_push($this->openAPINullablesSetToNull, 'student_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student_no'] = $student_no;

        return $this;
    }

    /**
     * Gets midterm_class_standing
     *
     * @return float|null
     */
    public function getMidtermClassStanding()
    {
        return $this->container['midterm_class_standing'];
    }

    /**
     * Sets midterm_class_standing
     *
     * @param float|null $midterm_class_standing midterm_class_standing
     *
     * @return self
     */
    public function setMidtermClassStanding($midterm_class_standing)
    {
        if (is_null($midterm_class_standing)) {
            throw new \InvalidArgumentException('non-nullable midterm_class_standing cannot be null');
        }
        $this->container['midterm_class_standing'] = $midterm_class_standing;

        return $this;
    }

    /**
     * Gets midterm_exam
     *
     * @return float|null
     */
    public function getMidtermExam()
    {
        return $this->container['midterm_exam'];
    }

    /**
     * Sets midterm_exam
     *
     * @param float|null $midterm_exam midterm_exam
     *
     * @return self
     */
    public function setMidtermExam($midterm_exam)
    {
        if (is_null($midterm_exam)) {
            throw new \InvalidArgumentException('non-nullable midterm_exam cannot be null');
        }
        $this->container['midterm_exam'] = $midterm_exam;

        return $this;
    }

    /**
     * Gets midterm_transmuted_grade
     *
     * @return float|null
     */
    public function getMidtermTransmutedGrade()
    {
        return $this->container['midterm_transmuted_grade'];
    }

    /**
     * Sets midterm_transmuted_grade
     *
     * @param float|null $midterm_transmuted_grade midterm_transmuted_grade
     *
     * @return self
     */
    public function setMidtermTransmutedGrade($midterm_transmuted_grade)
    {
        if (is_null($midterm_transmuted_grade)) {
            throw new \InvalidArgumentException('non-nullable midterm_transmuted_grade cannot be null');
        }
        $this->container['midterm_transmuted_grade'] = $midterm_transmuted_grade;

        return $this;
    }

    /**
     * Gets midterm_course_grade
     *
     * @return float|null
     */
    public function getMidtermCourseGrade()
    {
        return $this->container['midterm_course_grade'];
    }

    /**
     * Sets midterm_course_grade
     *
     * @param float|null $midterm_course_grade midterm_course_grade
     *
     * @return self
     */
    public function setMidtermCourseGrade($midterm_course_grade)
    {
        if (is_null($midterm_course_grade)) {
            throw new \InvalidArgumentException('non-nullable midterm_course_grade cannot be null');
        }
        $this->container['midterm_course_grade'] = $midterm_course_grade;

        return $this;
    }

    /**
     * Gets final_class_standing
     *
     * @return float|null
     */
    public function getFinalClassStanding()
    {
        return $this->container['final_class_standing'];
    }

    /**
     * Sets final_class_standing
     *
     * @param float|null $final_class_standing final_class_standing
     *
     * @return self
     */
    public function setFinalClassStanding($final_class_standing)
    {
        if (is_null($final_class_standing)) {
            throw new \InvalidArgumentException('non-nullable final_class_standing cannot be null');
        }
        $this->container['final_class_standing'] = $final_class_standing;

        return $this;
    }

    /**
     * Gets final_exam
     *
     * @return float|null
     */
    public function getFinalExam()
    {
        return $this->container['final_exam'];
    }

    /**
     * Sets final_exam
     *
     * @param float|null $final_exam final_exam
     *
     * @return self
     */
    public function setFinalExam($final_exam)
    {
        if (is_null($final_exam)) {
            throw new \InvalidArgumentException('non-nullable final_exam cannot be null');
        }
        $this->container['final_exam'] = $final_exam;

        return $this;
    }

    /**
     * Gets final_transmuted_grade
     *
     * @return float|null
     */
    public function getFinalTransmutedGrade()
    {
        return $this->container['final_transmuted_grade'];
    }

    /**
     * Sets final_transmuted_grade
     *
     * @param float|null $final_transmuted_grade final_transmuted_grade
     *
     * @return self
     */
    public function setFinalTransmutedGrade($final_transmuted_grade)
    {
        if (is_null($final_transmuted_grade)) {
            throw new \InvalidArgumentException('non-nullable final_transmuted_grade cannot be null');
        }
        $this->container['final_transmuted_grade'] = $final_transmuted_grade;

        return $this;
    }

    /**
     * Gets final_course_grade
     *
     * @return float|null
     */
    public function getFinalCourseGrade()
    {
        return $this->container['final_course_grade'];
    }

    /**
     * Sets final_course_grade
     *
     * @param float|null $final_course_grade final_course_grade
     *
     * @return self
     */
    public function setFinalCourseGrade($final_course_grade)
    {
        if (is_null($final_course_grade)) {
            throw new \InvalidArgumentException('non-nullable final_course_grade cannot be null');
        }
        $this->container['final_course_grade'] = $final_course_grade;

        return $this;
    }

    /**
     * Gets midterm
     *
     * @return string|null
     */
    public function getMidterm()
    {
        return $this->container['midterm'];
    }

    /**
     * Sets midterm
     *
     * @param string|null $midterm midterm
     *
     * @return self
     */
    public function setMidterm($midterm)
    {
        if (is_null($midterm)) {
            array_push($this->openAPINullablesSetToNull, 'midterm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('midterm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['midterm'] = $midterm;

        return $this;
    }

    /**
     * Gets final
     *
     * @return string|null
     */
    public function getFinal()
    {
        return $this->container['final'];
    }

    /**
     * Sets final
     *
     * @param string|null $final final
     *
     * @return self
     */
    public function setFinal($final)
    {
        if (is_null($final)) {
            array_push($this->openAPINullablesSetToNull, 'final');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('final', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['final'] = $final;

        return $this;
    }

    /**
     * Gets re_exam
     *
     * @return string|null
     */
    public function getReExam()
    {
        return $this->container['re_exam'];
    }

    /**
     * Sets re_exam
     *
     * @param string|null $re_exam re_exam
     *
     * @return self
     */
    public function setReExam($re_exam)
    {
        if (is_null($re_exam)) {
            array_push($this->openAPINullablesSetToNull, 're_exam');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('re_exam', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['re_exam'] = $re_exam;

        return $this;
    }

    /**
     * Gets last_modified_by
     *
     * @return string|null
     */
    public function getLastModifiedBy()
    {
        return $this->container['last_modified_by'];
    }

    /**
     * Sets last_modified_by
     *
     * @param string|null $last_modified_by last_modified_by
     *
     * @return self
     */
    public function setLastModifiedBy($last_modified_by)
    {
        if (is_null($last_modified_by)) {
            array_push($this->openAPINullablesSetToNull, 'last_modified_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_modified_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_modified_by'] = $last_modified_by;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_modified_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_modified_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets correction_by
     *
     * @return string|null
     */
    public function getCorrectionBy()
    {
        return $this->container['correction_by'];
    }

    /**
     * Sets correction_by
     *
     * @param string|null $correction_by correction_by
     *
     * @return self
     */
    public function setCorrectionBy($correction_by)
    {
        if (is_null($correction_by)) {
            array_push($this->openAPINullablesSetToNull, 'correction_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('correction_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['correction_by'] = $correction_by;

        return $this;
    }

    /**
     * Gets correction_date
     *
     * @return \DateTime|null
     */
    public function getCorrectionDate()
    {
        return $this->container['correction_date'];
    }

    /**
     * Sets correction_date
     *
     * @param \DateTime|null $correction_date correction_date
     *
     * @return self
     */
    public function setCorrectionDate($correction_date)
    {
        if (is_null($correction_date)) {
            array_push($this->openAPINullablesSetToNull, 'correction_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('correction_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['correction_date'] = $correction_date;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            array_push($this->openAPINullablesSetToNull, 'reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets old_midterm
     *
     * @return string|null
     */
    public function getOldMidterm()
    {
        return $this->container['old_midterm'];
    }

    /**
     * Sets old_midterm
     *
     * @param string|null $old_midterm old_midterm
     *
     * @return self
     */
    public function setOldMidterm($old_midterm)
    {
        if (is_null($old_midterm)) {
            array_push($this->openAPINullablesSetToNull, 'old_midterm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('old_midterm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['old_midterm'] = $old_midterm;

        return $this;
    }

    /**
     * Gets old_final
     *
     * @return string|null
     */
    public function getOldFinal()
    {
        return $this->container['old_final'];
    }

    /**
     * Sets old_final
     *
     * @param string|null $old_final old_final
     *
     * @return self
     */
    public function setOldFinal($old_final)
    {
        if (is_null($old_final)) {
            array_push($this->openAPINullablesSetToNull, 'old_final');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('old_final', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['old_final'] = $old_final;

        return $this;
    }

    /**
     * Gets old_re_exam
     *
     * @return string|null
     */
    public function getOldReExam()
    {
        return $this->container['old_re_exam'];
    }

    /**
     * Sets old_re_exam
     *
     * @param string|null $old_re_exam old_re_exam
     *
     * @return self
     */
    public function setOldReExam($old_re_exam)
    {
        if (is_null($old_re_exam)) {
            array_push($this->openAPINullablesSetToNull, 'old_re_exam');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('old_re_exam', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['old_re_exam'] = $old_re_exam;

        return $this;
    }

    /**
     * Gets campus_id
     *
     * @return int|null
     */
    public function getCampusId()
    {
        return $this->container['campus_id'];
    }

    /**
     * Sets campus_id
     *
     * @param int|null $campus_id campus_id
     *
     * @return self
     */
    public function setCampusId($campus_id)
    {
        if (is_null($campus_id)) {
            throw new \InvalidArgumentException('non-nullable campus_id cannot be null');
        }
        $this->container['campus_id'] = $campus_id;

        return $this;
    }

    /**
     * Gets term_id
     *
     * @return int|null
     */
    public function getTermId()
    {
        return $this->container['term_id'];
    }

    /**
     * Sets term_id
     *
     * @param int|null $term_id term_id
     *
     * @return self
     */
    public function setTermId($term_id)
    {
        if (is_null($term_id)) {
            throw new \InvalidArgumentException('non-nullable term_id cannot be null');
        }
        $this->container['term_id'] = $term_id;

        return $this;
    }

    /**
     * Gets subject_id
     *
     * @return int|null
     */
    public function getSubjectId()
    {
        return $this->container['subject_id'];
    }

    /**
     * Sets subject_id
     *
     * @param int|null $subject_id subject_id
     *
     * @return self
     */
    public function setSubjectId($subject_id)
    {
        if (is_null($subject_id)) {
            throw new \InvalidArgumentException('non-nullable subject_id cannot be null');
        }
        $this->container['subject_id'] = $subject_id;

        return $this;
    }

    /**
     * Gets prog_id
     *
     * @return int|null
     */
    public function getProgId()
    {
        return $this->container['prog_id'];
    }

    /**
     * Sets prog_id
     *
     * @param int|null $prog_id prog_id
     *
     * @return self
     */
    public function setProgId($prog_id)
    {
        if (is_null($prog_id)) {
            throw new \InvalidArgumentException('non-nullable prog_id cannot be null');
        }
        $this->container['prog_id'] = $prog_id;

        return $this;
    }

    /**
     * Gets major_id
     *
     * @return int|null
     */
    public function getMajorId()
    {
        return $this->container['major_id'];
    }

    /**
     * Sets major_id
     *
     * @param int|null $major_id major_id
     *
     * @return self
     */
    public function setMajorId($major_id)
    {
        if (is_null($major_id)) {
            throw new \InvalidArgumentException('non-nullable major_id cannot be null');
        }
        $this->container['major_id'] = $major_id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string|null $employee_id employee_id
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            array_push($this->openAPINullablesSetToNull, 'employee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets year_level_id
     *
     * @return int|null
     */
    public function getYearLevelId()
    {
        return $this->container['year_level_id'];
    }

    /**
     * Sets year_level_id
     *
     * @param int|null $year_level_id year_level_id
     *
     * @return self
     */
    public function setYearLevelId($year_level_id)
    {
        if (is_null($year_level_id)) {
            throw new \InvalidArgumentException('non-nullable year_level_id cannot be null');
        }
        $this->container['year_level_id'] = $year_level_id;

        return $this;
    }

    /**
     * Gets school_id
     *
     * @return int|null
     */
    public function getSchoolId()
    {
        return $this->container['school_id'];
    }

    /**
     * Sets school_id
     *
     * @param int|null $school_id school_id
     *
     * @return self
     */
    public function setSchoolId($school_id)
    {
        if (is_null($school_id)) {
            throw new \InvalidArgumentException('non-nullable school_id cannot be null');
        }
        $this->container['school_id'] = $school_id;

        return $this;
    }

    /**
     * Gets college_id
     *
     * @return int|null
     */
    public function getCollegeId()
    {
        return $this->container['college_id'];
    }

    /**
     * Sets college_id
     *
     * @param int|null $college_id college_id
     *
     * @return self
     */
    public function setCollegeId($college_id)
    {
        if (is_null($college_id)) {
            throw new \InvalidArgumentException('non-nullable college_id cannot be null');
        }
        $this->container['college_id'] = $college_id;

        return $this;
    }

    /**
     * Gets prog_major_id
     *
     * @return int|null
     */
    public function getProgMajorId()
    {
        return $this->container['prog_major_id'];
    }

    /**
     * Sets prog_major_id
     *
     * @param int|null $prog_major_id prog_major_id
     *
     * @return self
     */
    public function setProgMajorId($prog_major_id)
    {
        if (is_null($prog_major_id)) {
            throw new \InvalidArgumentException('non-nullable prog_major_id cannot be null');
        }
        $this->container['prog_major_id'] = $prog_major_id;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string|null $remarks remarks
     *
     * @return self
     */
    public function setRemarks($remarks)
    {
        if (is_null($remarks)) {
            array_push($this->openAPINullablesSetToNull, 'remarks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remarks', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets lock
     *
     * @return bool|null
     */
    public function getLock()
    {
        return $this->container['lock'];
    }

    /**
     * Sets lock
     *
     * @param bool|null $lock lock
     *
     * @return self
     */
    public function setLock($lock)
    {
        if (is_null($lock)) {
            throw new \InvalidArgumentException('non-nullable lock cannot be null');
        }
        $this->container['lock'] = $lock;

        return $this;
    }

    /**
     * Gets school_name
     *
     * @return string|null
     */
    public function getSchoolName()
    {
        return $this->container['school_name'];
    }

    /**
     * Sets school_name
     *
     * @param string|null $school_name school_name
     *
     * @return self
     */
    public function setSchoolName($school_name)
    {
        if (is_null($school_name)) {
            array_push($this->openAPINullablesSetToNull, 'school_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['school_name'] = $school_name;

        return $this;
    }

    /**
     * Gets acad_program_other_school
     *
     * @return string|null
     */
    public function getAcadProgramOtherSchool()
    {
        return $this->container['acad_program_other_school'];
    }

    /**
     * Sets acad_program_other_school
     *
     * @param string|null $acad_program_other_school acad_program_other_school
     *
     * @return self
     */
    public function setAcadProgramOtherSchool($acad_program_other_school)
    {
        if (is_null($acad_program_other_school)) {
            array_push($this->openAPINullablesSetToNull, 'acad_program_other_school');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acad_program_other_school', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['acad_program_other_school'] = $acad_program_other_school;

        return $this;
    }

    /**
     * Gets date_posted
     *
     * @return \DateTime|null
     */
    public function getDatePosted()
    {
        return $this->container['date_posted'];
    }

    /**
     * Sets date_posted
     *
     * @param \DateTime|null $date_posted date_posted
     *
     * @return self
     */
    public function setDatePosted($date_posted)
    {
        if (is_null($date_posted)) {
            array_push($this->openAPINullablesSetToNull, 'date_posted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_posted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_posted'] = $date_posted;

        return $this;
    }

    /**
     * Gets year_term_id
     *
     * @return int|null
     */
    public function getYearTermId()
    {
        return $this->container['year_term_id'];
    }

    /**
     * Sets year_term_id
     *
     * @param int|null $year_term_id year_term_id
     *
     * @return self
     */
    public function setYearTermId($year_term_id)
    {
        if (is_null($year_term_id)) {
            throw new \InvalidArgumentException('non-nullable year_term_id cannot be null');
        }
        $this->container['year_term_id'] = $year_term_id;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int|null
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int|null $sort_order sort_order
     *
     * @return self
     */
    public function setSortOrder($sort_order)
    {
        if (is_null($sort_order)) {
            throw new \InvalidArgumentException('non-nullable sort_order cannot be null');
        }
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets prog_class_id
     *
     * @return int|null
     */
    public function getProgClassId()
    {
        return $this->container['prog_class_id'];
    }

    /**
     * Sets prog_class_id
     *
     * @param int|null $prog_class_id prog_class_id
     *
     * @return self
     */
    public function setProgClassId($prog_class_id)
    {
        if (is_null($prog_class_id)) {
            throw new \InvalidArgumentException('non-nullable prog_class_id cannot be null');
        }
        $this->container['prog_class_id'] = $prog_class_id;

        return $this;
    }

    /**
     * Gets received_by
     *
     * @return string|null
     */
    public function getReceivedBy()
    {
        return $this->container['received_by'];
    }

    /**
     * Sets received_by
     *
     * @param string|null $received_by received_by
     *
     * @return self
     */
    public function setReceivedBy($received_by)
    {
        if (is_null($received_by)) {
            array_push($this->openAPINullablesSetToNull, 'received_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('received_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['received_by'] = $received_by;

        return $this;
    }

    /**
     * Gets received_date
     *
     * @return \DateTime|null
     */
    public function getReceivedDate()
    {
        return $this->container['received_date'];
    }

    /**
     * Sets received_date
     *
     * @param \DateTime|null $received_date received_date
     *
     * @return self
     */
    public function setReceivedDate($received_date)
    {
        if (is_null($received_date)) {
            array_push($this->openAPINullablesSetToNull, 'received_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('received_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['received_date'] = $received_date;

        return $this;
    }

    /**
     * Gets reg_tag_id
     *
     * @return int|null
     */
    public function getRegTagId()
    {
        return $this->container['reg_tag_id'];
    }

    /**
     * Sets reg_tag_id
     *
     * @param int|null $reg_tag_id reg_tag_id
     *
     * @return self
     */
    public function setRegTagId($reg_tag_id)
    {
        if (is_null($reg_tag_id)) {
            throw new \InvalidArgumentException('non-nullable reg_tag_id cannot be null');
        }
        $this->container['reg_tag_id'] = $reg_tag_id;

        return $this;
    }

    /**
     * Gets equivalent_subject_id
     *
     * @return int|null
     */
    public function getEquivalentSubjectId()
    {
        return $this->container['equivalent_subject_id'];
    }

    /**
     * Sets equivalent_subject_id
     *
     * @param int|null $equivalent_subject_id equivalent_subject_id
     *
     * @return self
     */
    public function setEquivalentSubjectId($equivalent_subject_id)
    {
        if (is_null($equivalent_subject_id)) {
            throw new \InvalidArgumentException('non-nullable equivalent_subject_id cannot be null');
        }
        $this->container['equivalent_subject_id'] = $equivalent_subject_id;

        return $this;
    }

    /**
     * Gets not_credited
     *
     * @return bool|null
     */
    public function getNotCredited()
    {
        return $this->container['not_credited'];
    }

    /**
     * Sets not_credited
     *
     * @param bool|null $not_credited not_credited
     *
     * @return self
     */
    public function setNotCredited($not_credited)
    {
        if (is_null($not_credited)) {
            throw new \InvalidArgumentException('non-nullable not_credited cannot be null');
        }
        $this->container['not_credited'] = $not_credited;

        return $this;
    }

    /**
     * Gets credited_from_other_school
     *
     * @return bool|null
     */
    public function getCreditedFromOtherSchool()
    {
        return $this->container['credited_from_other_school'];
    }

    /**
     * Sets credited_from_other_school
     *
     * @param bool|null $credited_from_other_school credited_from_other_school
     *
     * @return self
     */
    public function setCreditedFromOtherSchool($credited_from_other_school)
    {
        if (is_null($credited_from_other_school)) {
            throw new \InvalidArgumentException('non-nullable credited_from_other_school cannot be null');
        }
        $this->container['credited_from_other_school'] = $credited_from_other_school;

        return $this;
    }

    /**
     * Gets showin_transcript
     *
     * @return bool|null
     */
    public function getShowinTranscript()
    {
        return $this->container['showin_transcript'];
    }

    /**
     * Sets showin_transcript
     *
     * @param bool|null $showin_transcript showin_transcript
     *
     * @return self
     */
    public function setShowinTranscript($showin_transcript)
    {
        if (is_null($showin_transcript)) {
            throw new \InvalidArgumentException('non-nullable showin_transcript cannot be null');
        }
        $this->container['showin_transcript'] = $showin_transcript;

        return $this;
    }

    /**
     * Gets custom_grades
     *
     * @return bool|null
     */
    public function getCustomGrades()
    {
        return $this->container['custom_grades'];
    }

    /**
     * Sets custom_grades
     *
     * @param bool|null $custom_grades custom_grades
     *
     * @return self
     */
    public function setCustomGrades($custom_grades)
    {
        if (is_null($custom_grades)) {
            throw new \InvalidArgumentException('non-nullable custom_grades cannot be null');
        }
        $this->container['custom_grades'] = $custom_grades;

        return $this;
    }

    /**
     * Gets final_remarks
     *
     * @return string|null
     */
    public function getFinalRemarks()
    {
        return $this->container['final_remarks'];
    }

    /**
     * Sets final_remarks
     *
     * @param string|null $final_remarks final_remarks
     *
     * @return self
     */
    public function setFinalRemarks($final_remarks)
    {
        if (is_null($final_remarks)) {
            array_push($this->openAPINullablesSetToNull, 'final_remarks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('final_remarks', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['final_remarks'] = $final_remarks;

        return $this;
    }

    /**
     * Gets edited_subject_title
     *
     * @return string|null
     */
    public function getEditedSubjectTitle()
    {
        return $this->container['edited_subject_title'];
    }

    /**
     * Sets edited_subject_title
     *
     * @param string|null $edited_subject_title edited_subject_title
     *
     * @return self
     */
    public function setEditedSubjectTitle($edited_subject_title)
    {
        if (is_null($edited_subject_title)) {
            array_push($this->openAPINullablesSetToNull, 'edited_subject_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('edited_subject_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['edited_subject_title'] = $edited_subject_title;

        return $this;
    }

    /**
     * Gets noof_absences
     *
     * @return int|null
     */
    public function getNoofAbsences()
    {
        return $this->container['noof_absences'];
    }

    /**
     * Sets noof_absences
     *
     * @param int|null $noof_absences noof_absences
     *
     * @return self
     */
    public function setNoofAbsences($noof_absences)
    {
        if (is_null($noof_absences)) {
            throw new \InvalidArgumentException('non-nullable noof_absences cannot be null');
        }
        $this->container['noof_absences'] = $noof_absences;

        return $this;
    }

    /**
     * Gets equivalent_mode
     *
     * @return int|null
     */
    public function getEquivalentMode()
    {
        return $this->container['equivalent_mode'];
    }

    /**
     * Sets equivalent_mode
     *
     * @param int|null $equivalent_mode equivalent_mode
     *
     * @return self
     */
    public function setEquivalentMode($equivalent_mode)
    {
        if (is_null($equivalent_mode)) {
            throw new \InvalidArgumentException('non-nullable equivalent_mode cannot be null');
        }
        $this->container['equivalent_mode'] = $equivalent_mode;

        return $this;
    }

    /**
     * Gets prelim
     *
     * @return string|null
     */
    public function getPrelim()
    {
        return $this->container['prelim'];
    }

    /**
     * Sets prelim
     *
     * @param string|null $prelim prelim
     *
     * @return self
     */
    public function setPrelim($prelim)
    {
        if (is_null($prelim)) {
            array_push($this->openAPINullablesSetToNull, 'prelim');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prelim', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prelim'] = $prelim;

        return $this;
    }

    /**
     * Gets thesis_title
     *
     * @return string|null
     */
    public function getThesisTitle()
    {
        return $this->container['thesis_title'];
    }

    /**
     * Sets thesis_title
     *
     * @param string|null $thesis_title thesis_title
     *
     * @return self
     */
    public function setThesisTitle($thesis_title)
    {
        if (is_null($thesis_title)) {
            array_push($this->openAPINullablesSetToNull, 'thesis_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thesis_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thesis_title'] = $thesis_title;

        return $this;
    }

    /**
     * Gets curriculum_subject_id
     *
     * @return int|null
     */
    public function getCurriculumSubjectId()
    {
        return $this->container['curriculum_subject_id'];
    }

    /**
     * Sets curriculum_subject_id
     *
     * @param int|null $curriculum_subject_id curriculum_subject_id
     *
     * @return self
     */
    public function setCurriculumSubjectId($curriculum_subject_id)
    {
        if (is_null($curriculum_subject_id)) {
            throw new \InvalidArgumentException('non-nullable curriculum_subject_id cannot be null');
        }
        $this->container['curriculum_subject_id'] = $curriculum_subject_id;

        return $this;
    }

    /**
     * Gets curriculum_subject_index_id
     *
     * @return int|null
     */
    public function getCurriculumSubjectIndexId()
    {
        return $this->container['curriculum_subject_index_id'];
    }

    /**
     * Sets curriculum_subject_index_id
     *
     * @param int|null $curriculum_subject_index_id curriculum_subject_index_id
     *
     * @return self
     */
    public function setCurriculumSubjectIndexId($curriculum_subject_index_id)
    {
        if (is_null($curriculum_subject_index_id)) {
            throw new \InvalidArgumentException('non-nullable curriculum_subject_index_id cannot be null');
        }
        $this->container['curriculum_subject_index_id'] = $curriculum_subject_index_id;

        return $this;
    }

    /**
     * Gets posted_by
     *
     * @return string|null
     */
    public function getPostedBy()
    {
        return $this->container['posted_by'];
    }

    /**
     * Sets posted_by
     *
     * @param string|null $posted_by posted_by
     *
     * @return self
     */
    public function setPostedBy($posted_by)
    {
        if (is_null($posted_by)) {
            array_push($this->openAPINullablesSetToNull, 'posted_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('posted_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['posted_by'] = $posted_by;

        return $this;
    }

    /**
     * Gets midterm_posted_by
     *
     * @return string|null
     */
    public function getMidtermPostedBy()
    {
        return $this->container['midterm_posted_by'];
    }

    /**
     * Sets midterm_posted_by
     *
     * @param string|null $midterm_posted_by midterm_posted_by
     *
     * @return self
     */
    public function setMidtermPostedBy($midterm_posted_by)
    {
        if (is_null($midterm_posted_by)) {
            array_push($this->openAPINullablesSetToNull, 'midterm_posted_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('midterm_posted_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['midterm_posted_by'] = $midterm_posted_by;

        return $this;
    }

    /**
     * Gets midterm_posted_date
     *
     * @return \DateTime|null
     */
    public function getMidtermPostedDate()
    {
        return $this->container['midterm_posted_date'];
    }

    /**
     * Sets midterm_posted_date
     *
     * @param \DateTime|null $midterm_posted_date midterm_posted_date
     *
     * @return self
     */
    public function setMidtermPostedDate($midterm_posted_date)
    {
        if (is_null($midterm_posted_date)) {
            array_push($this->openAPINullablesSetToNull, 'midterm_posted_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('midterm_posted_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['midterm_posted_date'] = $midterm_posted_date;

        return $this;
    }

    /**
     * Gets credited_unit
     *
     * @return string|null
     */
    public function getCreditedUnit()
    {
        return $this->container['credited_unit'];
    }

    /**
     * Sets credited_unit
     *
     * @param string|null $credited_unit credited_unit
     *
     * @return self
     */
    public function setCreditedUnit($credited_unit)
    {
        if (is_null($credited_unit)) {
            array_push($this->openAPINullablesSetToNull, 'credited_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credited_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['credited_unit'] = $credited_unit;

        return $this;
    }

    /**
     * Gets validation_date
     *
     * @return \DateTime|null
     */
    public function getValidationDate()
    {
        return $this->container['validation_date'];
    }

    /**
     * Sets validation_date
     *
     * @param \DateTime|null $validation_date validation_date
     *
     * @return self
     */
    public function setValidationDate($validation_date)
    {
        if (is_null($validation_date)) {
            array_push($this->openAPINullablesSetToNull, 'validation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validation_date'] = $validation_date;

        return $this;
    }

    /**
     * Gets remark_id
     *
     * @return int|null
     */
    public function getRemarkId()
    {
        return $this->container['remark_id'];
    }

    /**
     * Sets remark_id
     *
     * @param int|null $remark_id remark_id
     *
     * @return self
     */
    public function setRemarkId($remark_id)
    {
        if (is_null($remark_id)) {
            throw new \InvalidArgumentException('non-nullable remark_id cannot be null');
        }
        $this->container['remark_id'] = $remark_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


