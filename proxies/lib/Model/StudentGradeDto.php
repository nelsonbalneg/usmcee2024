<?php
/**
 * StudentGradeDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StudentGradeDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StudentGradeDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StudentGradeDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'grade_idx' => 'int',
        'schedule_id' => 'int',
        'campus_id' => 'int',
        'remark_id' => 'int',
        'subject_id' => 'int',
        'prog_class_id' => 'int',
        'student_no' => 'string',
        'midterm' => 'string',
        'final' => 'string',
        're_exam' => 'string',
        'final_remarks' => 'string',
        'remarks' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'grade_idx' => 'int32',
        'schedule_id' => 'int32',
        'campus_id' => 'int32',
        'remark_id' => 'int32',
        'subject_id' => 'int32',
        'prog_class_id' => 'int32',
        'student_no' => null,
        'midterm' => null,
        'final' => null,
        're_exam' => null,
        'final_remarks' => null,
        'remarks' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'grade_idx' => false,
        'schedule_id' => false,
        'campus_id' => false,
        'remark_id' => false,
        'subject_id' => false,
        'prog_class_id' => false,
        'student_no' => true,
        'midterm' => true,
        'final' => true,
        're_exam' => true,
        'final_remarks' => true,
        'remarks' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'grade_idx' => 'gradeIDX',
        'schedule_id' => 'scheduleID',
        'campus_id' => 'campusID',
        'remark_id' => 'remarkId',
        'subject_id' => 'subjectID',
        'prog_class_id' => 'progClassID',
        'student_no' => 'studentNo',
        'midterm' => 'midterm',
        'final' => 'final',
        're_exam' => 'reExam',
        'final_remarks' => 'finalRemarks',
        'remarks' => 'remarks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'grade_idx' => 'setGradeIdx',
        'schedule_id' => 'setScheduleId',
        'campus_id' => 'setCampusId',
        'remark_id' => 'setRemarkId',
        'subject_id' => 'setSubjectId',
        'prog_class_id' => 'setProgClassId',
        'student_no' => 'setStudentNo',
        'midterm' => 'setMidterm',
        'final' => 'setFinal',
        're_exam' => 'setReExam',
        'final_remarks' => 'setFinalRemarks',
        'remarks' => 'setRemarks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'grade_idx' => 'getGradeIdx',
        'schedule_id' => 'getScheduleId',
        'campus_id' => 'getCampusId',
        'remark_id' => 'getRemarkId',
        'subject_id' => 'getSubjectId',
        'prog_class_id' => 'getProgClassId',
        'student_no' => 'getStudentNo',
        'midterm' => 'getMidterm',
        'final' => 'getFinal',
        're_exam' => 'getReExam',
        'final_remarks' => 'getFinalRemarks',
        'remarks' => 'getRemarks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('grade_idx', $data ?? [], null);
        $this->setIfExists('schedule_id', $data ?? [], null);
        $this->setIfExists('campus_id', $data ?? [], null);
        $this->setIfExists('remark_id', $data ?? [], null);
        $this->setIfExists('subject_id', $data ?? [], null);
        $this->setIfExists('prog_class_id', $data ?? [], null);
        $this->setIfExists('student_no', $data ?? [], null);
        $this->setIfExists('midterm', $data ?? [], null);
        $this->setIfExists('final', $data ?? [], null);
        $this->setIfExists('re_exam', $data ?? [], null);
        $this->setIfExists('final_remarks', $data ?? [], null);
        $this->setIfExists('remarks', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets grade_idx
     *
     * @return int|null
     */
    public function getGradeIdx()
    {
        return $this->container['grade_idx'];
    }

    /**
     * Sets grade_idx
     *
     * @param int|null $grade_idx grade_idx
     *
     * @return self
     */
    public function setGradeIdx($grade_idx)
    {
        if (is_null($grade_idx)) {
            throw new \InvalidArgumentException('non-nullable grade_idx cannot be null');
        }
        $this->container['grade_idx'] = $grade_idx;

        return $this;
    }

    /**
     * Gets schedule_id
     *
     * @return int|null
     */
    public function getScheduleId()
    {
        return $this->container['schedule_id'];
    }

    /**
     * Sets schedule_id
     *
     * @param int|null $schedule_id schedule_id
     *
     * @return self
     */
    public function setScheduleId($schedule_id)
    {
        if (is_null($schedule_id)) {
            throw new \InvalidArgumentException('non-nullable schedule_id cannot be null');
        }
        $this->container['schedule_id'] = $schedule_id;

        return $this;
    }

    /**
     * Gets campus_id
     *
     * @return int|null
     */
    public function getCampusId()
    {
        return $this->container['campus_id'];
    }

    /**
     * Sets campus_id
     *
     * @param int|null $campus_id campus_id
     *
     * @return self
     */
    public function setCampusId($campus_id)
    {
        if (is_null($campus_id)) {
            throw new \InvalidArgumentException('non-nullable campus_id cannot be null');
        }
        $this->container['campus_id'] = $campus_id;

        return $this;
    }

    /**
     * Gets remark_id
     *
     * @return int|null
     */
    public function getRemarkId()
    {
        return $this->container['remark_id'];
    }

    /**
     * Sets remark_id
     *
     * @param int|null $remark_id remark_id
     *
     * @return self
     */
    public function setRemarkId($remark_id)
    {
        if (is_null($remark_id)) {
            throw new \InvalidArgumentException('non-nullable remark_id cannot be null');
        }
        $this->container['remark_id'] = $remark_id;

        return $this;
    }

    /**
     * Gets subject_id
     *
     * @return int|null
     */
    public function getSubjectId()
    {
        return $this->container['subject_id'];
    }

    /**
     * Sets subject_id
     *
     * @param int|null $subject_id subject_id
     *
     * @return self
     */
    public function setSubjectId($subject_id)
    {
        if (is_null($subject_id)) {
            throw new \InvalidArgumentException('non-nullable subject_id cannot be null');
        }
        $this->container['subject_id'] = $subject_id;

        return $this;
    }

    /**
     * Gets prog_class_id
     *
     * @return int|null
     */
    public function getProgClassId()
    {
        return $this->container['prog_class_id'];
    }

    /**
     * Sets prog_class_id
     *
     * @param int|null $prog_class_id prog_class_id
     *
     * @return self
     */
    public function setProgClassId($prog_class_id)
    {
        if (is_null($prog_class_id)) {
            throw new \InvalidArgumentException('non-nullable prog_class_id cannot be null');
        }
        $this->container['prog_class_id'] = $prog_class_id;

        return $this;
    }

    /**
     * Gets student_no
     *
     * @return string|null
     */
    public function getStudentNo()
    {
        return $this->container['student_no'];
    }

    /**
     * Sets student_no
     *
     * @param string|null $student_no student_no
     *
     * @return self
     */
    public function setStudentNo($student_no)
    {
        if (is_null($student_no)) {
            array_push($this->openAPINullablesSetToNull, 'student_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student_no'] = $student_no;

        return $this;
    }

    /**
     * Gets midterm
     *
     * @return string|null
     */
    public function getMidterm()
    {
        return $this->container['midterm'];
    }

    /**
     * Sets midterm
     *
     * @param string|null $midterm midterm
     *
     * @return self
     */
    public function setMidterm($midterm)
    {
        if (is_null($midterm)) {
            array_push($this->openAPINullablesSetToNull, 'midterm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('midterm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['midterm'] = $midterm;

        return $this;
    }

    /**
     * Gets final
     *
     * @return string|null
     */
    public function getFinal()
    {
        return $this->container['final'];
    }

    /**
     * Sets final
     *
     * @param string|null $final final
     *
     * @return self
     */
    public function setFinal($final)
    {
        if (is_null($final)) {
            array_push($this->openAPINullablesSetToNull, 'final');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('final', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['final'] = $final;

        return $this;
    }

    /**
     * Gets re_exam
     *
     * @return string|null
     */
    public function getReExam()
    {
        return $this->container['re_exam'];
    }

    /**
     * Sets re_exam
     *
     * @param string|null $re_exam re_exam
     *
     * @return self
     */
    public function setReExam($re_exam)
    {
        if (is_null($re_exam)) {
            array_push($this->openAPINullablesSetToNull, 're_exam');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('re_exam', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['re_exam'] = $re_exam;

        return $this;
    }

    /**
     * Gets final_remarks
     *
     * @return string|null
     */
    public function getFinalRemarks()
    {
        return $this->container['final_remarks'];
    }

    /**
     * Sets final_remarks
     *
     * @param string|null $final_remarks final_remarks
     *
     * @return self
     */
    public function setFinalRemarks($final_remarks)
    {
        if (is_null($final_remarks)) {
            array_push($this->openAPINullablesSetToNull, 'final_remarks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('final_remarks', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['final_remarks'] = $final_remarks;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string|null $remarks remarks
     *
     * @return self
     */
    public function setRemarks($remarks)
    {
        if (is_null($remarks)) {
            array_push($this->openAPINullablesSetToNull, 'remarks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remarks', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['remarks'] = $remarks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


