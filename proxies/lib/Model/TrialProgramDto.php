<?php
/**
 * TrialProgramDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TrialProgramDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TrialProgramDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TrialProgramDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'student_no' => 'string',
        'student_name' => 'string',
        'campus_id' => 'int',
        'campus_name' => 'string',
        'program_id' => 'int',
        'program_name' => 'string',
        'college_id' => 'int',
        'college_name' => 'string',
        'department_id' => 'int',
        'department' => 'string',
        'term_id' => 'int',
        'term' => 'string',
        'date_created' => '\DateTime',
        'submitted' => 'bool',
        'date_submitted' => '\DateTime',
        'policy_id' => 'int',
        'major_id' => 'int',
        'major_name' => 'string',
        'real_campus_id' => 'int',
        'transaction_type' => 'string',
        'status' => 'string',
        'curriculum_id' => 'int',
        'curriculum' => 'string',
        'year_level_id' => 'int',
        'year_level' => 'string',
        'max_load_unit' => 'int',
        'table_of_fee_id' => 'int',
        'to_f_template_code' => 'string',
        'scho_provider_id' => 'int',
        'scho_provider' => 'string',
        'scho_provider_type_id' => 'int',
        'scho_provider_type' => 'string',
        'grant_template_id' => 'int',
        'grant_template' => 'string',
        'class_section_id' => 'int',
        'class_section_name' => 'string',
        'is_residency_only' => 'bool',
        'academic_scholarship' => 'string',
        'advising_officer_id' => 'string',
        'validating_officer_id' => 'string',
        'reg_date' => '\DateTime',
        'details' => '\OpenAPI\Client\Model\TrialProgramDetailDto[]',
        'nstp_program_type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'student_no' => null,
        'student_name' => null,
        'campus_id' => 'int32',
        'campus_name' => null,
        'program_id' => 'int32',
        'program_name' => null,
        'college_id' => 'int32',
        'college_name' => null,
        'department_id' => 'int32',
        'department' => null,
        'term_id' => 'int32',
        'term' => null,
        'date_created' => 'date-time',
        'submitted' => null,
        'date_submitted' => 'date-time',
        'policy_id' => 'int32',
        'major_id' => 'int32',
        'major_name' => null,
        'real_campus_id' => 'int32',
        'transaction_type' => null,
        'status' => null,
        'curriculum_id' => 'int32',
        'curriculum' => null,
        'year_level_id' => 'int32',
        'year_level' => null,
        'max_load_unit' => 'int32',
        'table_of_fee_id' => 'int32',
        'to_f_template_code' => null,
        'scho_provider_id' => 'int32',
        'scho_provider' => null,
        'scho_provider_type_id' => 'int32',
        'scho_provider_type' => null,
        'grant_template_id' => 'int32',
        'grant_template' => null,
        'class_section_id' => 'int32',
        'class_section_name' => null,
        'is_residency_only' => null,
        'academic_scholarship' => null,
        'advising_officer_id' => null,
        'validating_officer_id' => null,
        'reg_date' => 'date-time',
        'details' => null,
        'nstp_program_type' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'student_no' => true,
        'student_name' => true,
        'campus_id' => false,
        'campus_name' => true,
        'program_id' => false,
        'program_name' => true,
        'college_id' => false,
        'college_name' => true,
        'department_id' => false,
        'department' => true,
        'term_id' => false,
        'term' => true,
        'date_created' => false,
        'submitted' => false,
        'date_submitted' => true,
        'policy_id' => false,
        'major_id' => false,
        'major_name' => true,
        'real_campus_id' => false,
        'transaction_type' => true,
        'status' => true,
        'curriculum_id' => true,
        'curriculum' => true,
        'year_level_id' => true,
        'year_level' => true,
        'max_load_unit' => true,
        'table_of_fee_id' => true,
        'to_f_template_code' => true,
        'scho_provider_id' => true,
        'scho_provider' => true,
        'scho_provider_type_id' => true,
        'scho_provider_type' => true,
        'grant_template_id' => false,
        'grant_template' => true,
        'class_section_id' => false,
        'class_section_name' => true,
        'is_residency_only' => true,
        'academic_scholarship' => true,
        'advising_officer_id' => true,
        'validating_officer_id' => true,
        'reg_date' => false,
        'details' => true,
        'nstp_program_type' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'student_no' => 'studentNo',
        'student_name' => 'studentName',
        'campus_id' => 'campusId',
        'campus_name' => 'campusName',
        'program_id' => 'programId',
        'program_name' => 'programName',
        'college_id' => 'collegeId',
        'college_name' => 'collegeName',
        'department_id' => 'departmentId',
        'department' => 'department',
        'term_id' => 'termId',
        'term' => 'term',
        'date_created' => 'dateCreated',
        'submitted' => 'submitted',
        'date_submitted' => 'dateSubmitted',
        'policy_id' => 'policyId',
        'major_id' => 'majorId',
        'major_name' => 'majorName',
        'real_campus_id' => 'realCampusId',
        'transaction_type' => 'transactionType',
        'status' => 'status',
        'curriculum_id' => 'curriculumId',
        'curriculum' => 'curriculum',
        'year_level_id' => 'yearLevelId',
        'year_level' => 'yearLevel',
        'max_load_unit' => 'maxLoadUnit',
        'table_of_fee_id' => 'tableOfFeeId',
        'to_f_template_code' => 'toFTemplateCode',
        'scho_provider_id' => 'schoProviderId',
        'scho_provider' => 'schoProvider',
        'scho_provider_type_id' => 'schoProviderTypeId',
        'scho_provider_type' => 'schoProviderType',
        'grant_template_id' => 'grantTemplateId',
        'grant_template' => 'grantTemplate',
        'class_section_id' => 'classSectionId',
        'class_section_name' => 'classSectionName',
        'is_residency_only' => 'isResidencyOnly',
        'academic_scholarship' => 'academicScholarship',
        'advising_officer_id' => 'advisingOfficerId',
        'validating_officer_id' => 'validatingOfficerId',
        'reg_date' => 'regDate',
        'details' => 'details',
        'nstp_program_type' => 'nstpProgramType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'student_no' => 'setStudentNo',
        'student_name' => 'setStudentName',
        'campus_id' => 'setCampusId',
        'campus_name' => 'setCampusName',
        'program_id' => 'setProgramId',
        'program_name' => 'setProgramName',
        'college_id' => 'setCollegeId',
        'college_name' => 'setCollegeName',
        'department_id' => 'setDepartmentId',
        'department' => 'setDepartment',
        'term_id' => 'setTermId',
        'term' => 'setTerm',
        'date_created' => 'setDateCreated',
        'submitted' => 'setSubmitted',
        'date_submitted' => 'setDateSubmitted',
        'policy_id' => 'setPolicyId',
        'major_id' => 'setMajorId',
        'major_name' => 'setMajorName',
        'real_campus_id' => 'setRealCampusId',
        'transaction_type' => 'setTransactionType',
        'status' => 'setStatus',
        'curriculum_id' => 'setCurriculumId',
        'curriculum' => 'setCurriculum',
        'year_level_id' => 'setYearLevelId',
        'year_level' => 'setYearLevel',
        'max_load_unit' => 'setMaxLoadUnit',
        'table_of_fee_id' => 'setTableOfFeeId',
        'to_f_template_code' => 'setToFTemplateCode',
        'scho_provider_id' => 'setSchoProviderId',
        'scho_provider' => 'setSchoProvider',
        'scho_provider_type_id' => 'setSchoProviderTypeId',
        'scho_provider_type' => 'setSchoProviderType',
        'grant_template_id' => 'setGrantTemplateId',
        'grant_template' => 'setGrantTemplate',
        'class_section_id' => 'setClassSectionId',
        'class_section_name' => 'setClassSectionName',
        'is_residency_only' => 'setIsResidencyOnly',
        'academic_scholarship' => 'setAcademicScholarship',
        'advising_officer_id' => 'setAdvisingOfficerId',
        'validating_officer_id' => 'setValidatingOfficerId',
        'reg_date' => 'setRegDate',
        'details' => 'setDetails',
        'nstp_program_type' => 'setNstpProgramType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'student_no' => 'getStudentNo',
        'student_name' => 'getStudentName',
        'campus_id' => 'getCampusId',
        'campus_name' => 'getCampusName',
        'program_id' => 'getProgramId',
        'program_name' => 'getProgramName',
        'college_id' => 'getCollegeId',
        'college_name' => 'getCollegeName',
        'department_id' => 'getDepartmentId',
        'department' => 'getDepartment',
        'term_id' => 'getTermId',
        'term' => 'getTerm',
        'date_created' => 'getDateCreated',
        'submitted' => 'getSubmitted',
        'date_submitted' => 'getDateSubmitted',
        'policy_id' => 'getPolicyId',
        'major_id' => 'getMajorId',
        'major_name' => 'getMajorName',
        'real_campus_id' => 'getRealCampusId',
        'transaction_type' => 'getTransactionType',
        'status' => 'getStatus',
        'curriculum_id' => 'getCurriculumId',
        'curriculum' => 'getCurriculum',
        'year_level_id' => 'getYearLevelId',
        'year_level' => 'getYearLevel',
        'max_load_unit' => 'getMaxLoadUnit',
        'table_of_fee_id' => 'getTableOfFeeId',
        'to_f_template_code' => 'getToFTemplateCode',
        'scho_provider_id' => 'getSchoProviderId',
        'scho_provider' => 'getSchoProvider',
        'scho_provider_type_id' => 'getSchoProviderTypeId',
        'scho_provider_type' => 'getSchoProviderType',
        'grant_template_id' => 'getGrantTemplateId',
        'grant_template' => 'getGrantTemplate',
        'class_section_id' => 'getClassSectionId',
        'class_section_name' => 'getClassSectionName',
        'is_residency_only' => 'getIsResidencyOnly',
        'academic_scholarship' => 'getAcademicScholarship',
        'advising_officer_id' => 'getAdvisingOfficerId',
        'validating_officer_id' => 'getValidatingOfficerId',
        'reg_date' => 'getRegDate',
        'details' => 'getDetails',
        'nstp_program_type' => 'getNstpProgramType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('student_no', $data ?? [], null);
        $this->setIfExists('student_name', $data ?? [], null);
        $this->setIfExists('campus_id', $data ?? [], null);
        $this->setIfExists('campus_name', $data ?? [], null);
        $this->setIfExists('program_id', $data ?? [], null);
        $this->setIfExists('program_name', $data ?? [], null);
        $this->setIfExists('college_id', $data ?? [], null);
        $this->setIfExists('college_name', $data ?? [], null);
        $this->setIfExists('department_id', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('term_id', $data ?? [], null);
        $this->setIfExists('term', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('submitted', $data ?? [], null);
        $this->setIfExists('date_submitted', $data ?? [], null);
        $this->setIfExists('policy_id', $data ?? [], null);
        $this->setIfExists('major_id', $data ?? [], null);
        $this->setIfExists('major_name', $data ?? [], null);
        $this->setIfExists('real_campus_id', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('curriculum_id', $data ?? [], null);
        $this->setIfExists('curriculum', $data ?? [], null);
        $this->setIfExists('year_level_id', $data ?? [], null);
        $this->setIfExists('year_level', $data ?? [], null);
        $this->setIfExists('max_load_unit', $data ?? [], null);
        $this->setIfExists('table_of_fee_id', $data ?? [], null);
        $this->setIfExists('to_f_template_code', $data ?? [], null);
        $this->setIfExists('scho_provider_id', $data ?? [], null);
        $this->setIfExists('scho_provider', $data ?? [], null);
        $this->setIfExists('scho_provider_type_id', $data ?? [], null);
        $this->setIfExists('scho_provider_type', $data ?? [], null);
        $this->setIfExists('grant_template_id', $data ?? [], null);
        $this->setIfExists('grant_template', $data ?? [], null);
        $this->setIfExists('class_section_id', $data ?? [], null);
        $this->setIfExists('class_section_name', $data ?? [], null);
        $this->setIfExists('is_residency_only', $data ?? [], null);
        $this->setIfExists('academic_scholarship', $data ?? [], null);
        $this->setIfExists('advising_officer_id', $data ?? [], null);
        $this->setIfExists('validating_officer_id', $data ?? [], null);
        $this->setIfExists('reg_date', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('nstp_program_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets student_no
     *
     * @return string|null
     */
    public function getStudentNo()
    {
        return $this->container['student_no'];
    }

    /**
     * Sets student_no
     *
     * @param string|null $student_no student_no
     *
     * @return self
     */
    public function setStudentNo($student_no)
    {
        if (is_null($student_no)) {
            array_push($this->openAPINullablesSetToNull, 'student_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student_no'] = $student_no;

        return $this;
    }

    /**
     * Gets student_name
     *
     * @return string|null
     */
    public function getStudentName()
    {
        return $this->container['student_name'];
    }

    /**
     * Sets student_name
     *
     * @param string|null $student_name student_name
     *
     * @return self
     */
    public function setStudentName($student_name)
    {
        if (is_null($student_name)) {
            array_push($this->openAPINullablesSetToNull, 'student_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student_name'] = $student_name;

        return $this;
    }

    /**
     * Gets campus_id
     *
     * @return int|null
     */
    public function getCampusId()
    {
        return $this->container['campus_id'];
    }

    /**
     * Sets campus_id
     *
     * @param int|null $campus_id campus_id
     *
     * @return self
     */
    public function setCampusId($campus_id)
    {
        if (is_null($campus_id)) {
            throw new \InvalidArgumentException('non-nullable campus_id cannot be null');
        }
        $this->container['campus_id'] = $campus_id;

        return $this;
    }

    /**
     * Gets campus_name
     *
     * @return string|null
     */
    public function getCampusName()
    {
        return $this->container['campus_name'];
    }

    /**
     * Sets campus_name
     *
     * @param string|null $campus_name campus_name
     *
     * @return self
     */
    public function setCampusName($campus_name)
    {
        if (is_null($campus_name)) {
            array_push($this->openAPINullablesSetToNull, 'campus_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('campus_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['campus_name'] = $campus_name;

        return $this;
    }

    /**
     * Gets program_id
     *
     * @return int|null
     */
    public function getProgramId()
    {
        return $this->container['program_id'];
    }

    /**
     * Sets program_id
     *
     * @param int|null $program_id program_id
     *
     * @return self
     */
    public function setProgramId($program_id)
    {
        if (is_null($program_id)) {
            throw new \InvalidArgumentException('non-nullable program_id cannot be null');
        }
        $this->container['program_id'] = $program_id;

        return $this;
    }

    /**
     * Gets program_name
     *
     * @return string|null
     */
    public function getProgramName()
    {
        return $this->container['program_name'];
    }

    /**
     * Sets program_name
     *
     * @param string|null $program_name program_name
     *
     * @return self
     */
    public function setProgramName($program_name)
    {
        if (is_null($program_name)) {
            array_push($this->openAPINullablesSetToNull, 'program_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('program_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['program_name'] = $program_name;

        return $this;
    }

    /**
     * Gets college_id
     *
     * @return int|null
     */
    public function getCollegeId()
    {
        return $this->container['college_id'];
    }

    /**
     * Sets college_id
     *
     * @param int|null $college_id college_id
     *
     * @return self
     */
    public function setCollegeId($college_id)
    {
        if (is_null($college_id)) {
            throw new \InvalidArgumentException('non-nullable college_id cannot be null');
        }
        $this->container['college_id'] = $college_id;

        return $this;
    }

    /**
     * Gets college_name
     *
     * @return string|null
     */
    public function getCollegeName()
    {
        return $this->container['college_name'];
    }

    /**
     * Sets college_name
     *
     * @param string|null $college_name college_name
     *
     * @return self
     */
    public function setCollegeName($college_name)
    {
        if (is_null($college_name)) {
            array_push($this->openAPINullablesSetToNull, 'college_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('college_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['college_name'] = $college_name;

        return $this;
    }

    /**
     * Gets department_id
     *
     * @return int|null
     */
    public function getDepartmentId()
    {
        return $this->container['department_id'];
    }

    /**
     * Sets department_id
     *
     * @param int|null $department_id department_id
     *
     * @return self
     */
    public function setDepartmentId($department_id)
    {
        if (is_null($department_id)) {
            throw new \InvalidArgumentException('non-nullable department_id cannot be null');
        }
        $this->container['department_id'] = $department_id;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department department
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets term_id
     *
     * @return int|null
     */
    public function getTermId()
    {
        return $this->container['term_id'];
    }

    /**
     * Sets term_id
     *
     * @param int|null $term_id term_id
     *
     * @return self
     */
    public function setTermId($term_id)
    {
        if (is_null($term_id)) {
            throw new \InvalidArgumentException('non-nullable term_id cannot be null');
        }
        $this->container['term_id'] = $term_id;

        return $this;
    }

    /**
     * Gets term
     *
     * @return string|null
     */
    public function getTerm()
    {
        return $this->container['term'];
    }

    /**
     * Sets term
     *
     * @param string|null $term term
     *
     * @return self
     */
    public function setTerm($term)
    {
        if (is_null($term)) {
            array_push($this->openAPINullablesSetToNull, 'term');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('term', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['term'] = $term;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets submitted
     *
     * @return bool|null
     */
    public function getSubmitted()
    {
        return $this->container['submitted'];
    }

    /**
     * Sets submitted
     *
     * @param bool|null $submitted submitted
     *
     * @return self
     */
    public function setSubmitted($submitted)
    {
        if (is_null($submitted)) {
            throw new \InvalidArgumentException('non-nullable submitted cannot be null');
        }
        $this->container['submitted'] = $submitted;

        return $this;
    }

    /**
     * Gets date_submitted
     *
     * @return \DateTime|null
     */
    public function getDateSubmitted()
    {
        return $this->container['date_submitted'];
    }

    /**
     * Sets date_submitted
     *
     * @param \DateTime|null $date_submitted date_submitted
     *
     * @return self
     */
    public function setDateSubmitted($date_submitted)
    {
        if (is_null($date_submitted)) {
            array_push($this->openAPINullablesSetToNull, 'date_submitted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_submitted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_submitted'] = $date_submitted;

        return $this;
    }

    /**
     * Gets policy_id
     *
     * @return int|null
     */
    public function getPolicyId()
    {
        return $this->container['policy_id'];
    }

    /**
     * Sets policy_id
     *
     * @param int|null $policy_id policy_id
     *
     * @return self
     */
    public function setPolicyId($policy_id)
    {
        if (is_null($policy_id)) {
            throw new \InvalidArgumentException('non-nullable policy_id cannot be null');
        }
        $this->container['policy_id'] = $policy_id;

        return $this;
    }

    /**
     * Gets major_id
     *
     * @return int|null
     */
    public function getMajorId()
    {
        return $this->container['major_id'];
    }

    /**
     * Sets major_id
     *
     * @param int|null $major_id major_id
     *
     * @return self
     */
    public function setMajorId($major_id)
    {
        if (is_null($major_id)) {
            throw new \InvalidArgumentException('non-nullable major_id cannot be null');
        }
        $this->container['major_id'] = $major_id;

        return $this;
    }

    /**
     * Gets major_name
     *
     * @return string|null
     */
    public function getMajorName()
    {
        return $this->container['major_name'];
    }

    /**
     * Sets major_name
     *
     * @param string|null $major_name major_name
     *
     * @return self
     */
    public function setMajorName($major_name)
    {
        if (is_null($major_name)) {
            array_push($this->openAPINullablesSetToNull, 'major_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('major_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['major_name'] = $major_name;

        return $this;
    }

    /**
     * Gets real_campus_id
     *
     * @return int|null
     */
    public function getRealCampusId()
    {
        return $this->container['real_campus_id'];
    }

    /**
     * Sets real_campus_id
     *
     * @param int|null $real_campus_id real_campus_id
     *
     * @return self
     */
    public function setRealCampusId($real_campus_id)
    {
        if (is_null($real_campus_id)) {
            throw new \InvalidArgumentException('non-nullable real_campus_id cannot be null');
        }
        $this->container['real_campus_id'] = $real_campus_id;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type transaction_type
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        if (is_null($transaction_type)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets curriculum_id
     *
     * @return int|null
     */
    public function getCurriculumId()
    {
        return $this->container['curriculum_id'];
    }

    /**
     * Sets curriculum_id
     *
     * @param int|null $curriculum_id curriculum_id
     *
     * @return self
     */
    public function setCurriculumId($curriculum_id)
    {
        if (is_null($curriculum_id)) {
            array_push($this->openAPINullablesSetToNull, 'curriculum_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('curriculum_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['curriculum_id'] = $curriculum_id;

        return $this;
    }

    /**
     * Gets curriculum
     *
     * @return string|null
     */
    public function getCurriculum()
    {
        return $this->container['curriculum'];
    }

    /**
     * Sets curriculum
     *
     * @param string|null $curriculum curriculum
     *
     * @return self
     */
    public function setCurriculum($curriculum)
    {
        if (is_null($curriculum)) {
            array_push($this->openAPINullablesSetToNull, 'curriculum');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('curriculum', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['curriculum'] = $curriculum;

        return $this;
    }

    /**
     * Gets year_level_id
     *
     * @return int|null
     */
    public function getYearLevelId()
    {
        return $this->container['year_level_id'];
    }

    /**
     * Sets year_level_id
     *
     * @param int|null $year_level_id year_level_id
     *
     * @return self
     */
    public function setYearLevelId($year_level_id)
    {
        if (is_null($year_level_id)) {
            array_push($this->openAPINullablesSetToNull, 'year_level_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('year_level_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['year_level_id'] = $year_level_id;

        return $this;
    }

    /**
     * Gets year_level
     *
     * @return string|null
     */
    public function getYearLevel()
    {
        return $this->container['year_level'];
    }

    /**
     * Sets year_level
     *
     * @param string|null $year_level year_level
     *
     * @return self
     */
    public function setYearLevel($year_level)
    {
        if (is_null($year_level)) {
            array_push($this->openAPINullablesSetToNull, 'year_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('year_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['year_level'] = $year_level;

        return $this;
    }

    /**
     * Gets max_load_unit
     *
     * @return int|null
     */
    public function getMaxLoadUnit()
    {
        return $this->container['max_load_unit'];
    }

    /**
     * Sets max_load_unit
     *
     * @param int|null $max_load_unit max_load_unit
     *
     * @return self
     */
    public function setMaxLoadUnit($max_load_unit)
    {
        if (is_null($max_load_unit)) {
            array_push($this->openAPINullablesSetToNull, 'max_load_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_load_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_load_unit'] = $max_load_unit;

        return $this;
    }

    /**
     * Gets table_of_fee_id
     *
     * @return int|null
     */
    public function getTableOfFeeId()
    {
        return $this->container['table_of_fee_id'];
    }

    /**
     * Sets table_of_fee_id
     *
     * @param int|null $table_of_fee_id table_of_fee_id
     *
     * @return self
     */
    public function setTableOfFeeId($table_of_fee_id)
    {
        if (is_null($table_of_fee_id)) {
            array_push($this->openAPINullablesSetToNull, 'table_of_fee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('table_of_fee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['table_of_fee_id'] = $table_of_fee_id;

        return $this;
    }

    /**
     * Gets to_f_template_code
     *
     * @return string|null
     */
    public function getToFTemplateCode()
    {
        return $this->container['to_f_template_code'];
    }

    /**
     * Sets to_f_template_code
     *
     * @param string|null $to_f_template_code to_f_template_code
     *
     * @return self
     */
    public function setToFTemplateCode($to_f_template_code)
    {
        if (is_null($to_f_template_code)) {
            array_push($this->openAPINullablesSetToNull, 'to_f_template_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_f_template_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to_f_template_code'] = $to_f_template_code;

        return $this;
    }

    /**
     * Gets scho_provider_id
     *
     * @return int|null
     */
    public function getSchoProviderId()
    {
        return $this->container['scho_provider_id'];
    }

    /**
     * Sets scho_provider_id
     *
     * @param int|null $scho_provider_id scho_provider_id
     *
     * @return self
     */
    public function setSchoProviderId($scho_provider_id)
    {
        if (is_null($scho_provider_id)) {
            array_push($this->openAPINullablesSetToNull, 'scho_provider_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scho_provider_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scho_provider_id'] = $scho_provider_id;

        return $this;
    }

    /**
     * Gets scho_provider
     *
     * @return string|null
     */
    public function getSchoProvider()
    {
        return $this->container['scho_provider'];
    }

    /**
     * Sets scho_provider
     *
     * @param string|null $scho_provider scho_provider
     *
     * @return self
     */
    public function setSchoProvider($scho_provider)
    {
        if (is_null($scho_provider)) {
            array_push($this->openAPINullablesSetToNull, 'scho_provider');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scho_provider', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scho_provider'] = $scho_provider;

        return $this;
    }

    /**
     * Gets scho_provider_type_id
     *
     * @return int|null
     */
    public function getSchoProviderTypeId()
    {
        return $this->container['scho_provider_type_id'];
    }

    /**
     * Sets scho_provider_type_id
     *
     * @param int|null $scho_provider_type_id scho_provider_type_id
     *
     * @return self
     */
    public function setSchoProviderTypeId($scho_provider_type_id)
    {
        if (is_null($scho_provider_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'scho_provider_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scho_provider_type_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scho_provider_type_id'] = $scho_provider_type_id;

        return $this;
    }

    /**
     * Gets scho_provider_type
     *
     * @return string|null
     */
    public function getSchoProviderType()
    {
        return $this->container['scho_provider_type'];
    }

    /**
     * Sets scho_provider_type
     *
     * @param string|null $scho_provider_type scho_provider_type
     *
     * @return self
     */
    public function setSchoProviderType($scho_provider_type)
    {
        if (is_null($scho_provider_type)) {
            array_push($this->openAPINullablesSetToNull, 'scho_provider_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scho_provider_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scho_provider_type'] = $scho_provider_type;

        return $this;
    }

    /**
     * Gets grant_template_id
     *
     * @return int|null
     */
    public function getGrantTemplateId()
    {
        return $this->container['grant_template_id'];
    }

    /**
     * Sets grant_template_id
     *
     * @param int|null $grant_template_id grant_template_id
     *
     * @return self
     */
    public function setGrantTemplateId($grant_template_id)
    {
        if (is_null($grant_template_id)) {
            throw new \InvalidArgumentException('non-nullable grant_template_id cannot be null');
        }
        $this->container['grant_template_id'] = $grant_template_id;

        return $this;
    }

    /**
     * Gets grant_template
     *
     * @return string|null
     */
    public function getGrantTemplate()
    {
        return $this->container['grant_template'];
    }

    /**
     * Sets grant_template
     *
     * @param string|null $grant_template grant_template
     *
     * @return self
     */
    public function setGrantTemplate($grant_template)
    {
        if (is_null($grant_template)) {
            array_push($this->openAPINullablesSetToNull, 'grant_template');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grant_template', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grant_template'] = $grant_template;

        return $this;
    }

    /**
     * Gets class_section_id
     *
     * @return int|null
     */
    public function getClassSectionId()
    {
        return $this->container['class_section_id'];
    }

    /**
     * Sets class_section_id
     *
     * @param int|null $class_section_id class_section_id
     *
     * @return self
     */
    public function setClassSectionId($class_section_id)
    {
        if (is_null($class_section_id)) {
            throw new \InvalidArgumentException('non-nullable class_section_id cannot be null');
        }
        $this->container['class_section_id'] = $class_section_id;

        return $this;
    }

    /**
     * Gets class_section_name
     *
     * @return string|null
     */
    public function getClassSectionName()
    {
        return $this->container['class_section_name'];
    }

    /**
     * Sets class_section_name
     *
     * @param string|null $class_section_name class_section_name
     *
     * @return self
     */
    public function setClassSectionName($class_section_name)
    {
        if (is_null($class_section_name)) {
            array_push($this->openAPINullablesSetToNull, 'class_section_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('class_section_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['class_section_name'] = $class_section_name;

        return $this;
    }

    /**
     * Gets is_residency_only
     *
     * @return bool|null
     */
    public function getIsResidencyOnly()
    {
        return $this->container['is_residency_only'];
    }

    /**
     * Sets is_residency_only
     *
     * @param bool|null $is_residency_only is_residency_only
     *
     * @return self
     */
    public function setIsResidencyOnly($is_residency_only)
    {
        if (is_null($is_residency_only)) {
            array_push($this->openAPINullablesSetToNull, 'is_residency_only');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_residency_only', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_residency_only'] = $is_residency_only;

        return $this;
    }

    /**
     * Gets academic_scholarship
     *
     * @return string|null
     */
    public function getAcademicScholarship()
    {
        return $this->container['academic_scholarship'];
    }

    /**
     * Sets academic_scholarship
     *
     * @param string|null $academic_scholarship academic_scholarship
     *
     * @return self
     */
    public function setAcademicScholarship($academic_scholarship)
    {
        if (is_null($academic_scholarship)) {
            array_push($this->openAPINullablesSetToNull, 'academic_scholarship');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('academic_scholarship', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['academic_scholarship'] = $academic_scholarship;

        return $this;
    }

    /**
     * Gets advising_officer_id
     *
     * @return string|null
     */
    public function getAdvisingOfficerId()
    {
        return $this->container['advising_officer_id'];
    }

    /**
     * Sets advising_officer_id
     *
     * @param string|null $advising_officer_id advising_officer_id
     *
     * @return self
     */
    public function setAdvisingOfficerId($advising_officer_id)
    {
        if (is_null($advising_officer_id)) {
            array_push($this->openAPINullablesSetToNull, 'advising_officer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('advising_officer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['advising_officer_id'] = $advising_officer_id;

        return $this;
    }

    /**
     * Gets validating_officer_id
     *
     * @return string|null
     */
    public function getValidatingOfficerId()
    {
        return $this->container['validating_officer_id'];
    }

    /**
     * Sets validating_officer_id
     *
     * @param string|null $validating_officer_id validating_officer_id
     *
     * @return self
     */
    public function setValidatingOfficerId($validating_officer_id)
    {
        if (is_null($validating_officer_id)) {
            array_push($this->openAPINullablesSetToNull, 'validating_officer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validating_officer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validating_officer_id'] = $validating_officer_id;

        return $this;
    }

    /**
     * Gets reg_date
     *
     * @return \DateTime|null
     */
    public function getRegDate()
    {
        return $this->container['reg_date'];
    }

    /**
     * Sets reg_date
     *
     * @param \DateTime|null $reg_date reg_date
     *
     * @return self
     */
    public function setRegDate($reg_date)
    {
        if (is_null($reg_date)) {
            throw new \InvalidArgumentException('non-nullable reg_date cannot be null');
        }
        $this->container['reg_date'] = $reg_date;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \OpenAPI\Client\Model\TrialProgramDetailDto[]|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \OpenAPI\Client\Model\TrialProgramDetailDto[]|null $details details
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            array_push($this->openAPINullablesSetToNull, 'details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets nstp_program_type
     *
     * @return int|null
     */
    public function getNstpProgramType()
    {
        return $this->container['nstp_program_type'];
    }

    /**
     * Sets nstp_program_type
     *
     * @param int|null $nstp_program_type nstp_program_type
     *
     * @return self
     */
    public function setNstpProgramType($nstp_program_type)
    {
        if (is_null($nstp_program_type)) {
            array_push($this->openAPINullablesSetToNull, 'nstp_program_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nstp_program_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nstp_program_type'] = $nstp_program_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


