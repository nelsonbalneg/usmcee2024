<?php
/**
 * TrialProgramDetailDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TrialProgramDetailDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TrialProgramDetailDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TrialProgramDetailDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'trial_program_id' => 'int',
        'subject_id' => 'int',
        'subject_name' => 'string',
        'schedule_id' => 'int',
        'class_section_id' => 'int',
        'section_name' => 'string',
        'room_id' => 'int',
        'room_name' => 'string',
        'sched1' => 'string',
        'sched2' => 'string',
        'sched3' => 'string',
        'sched4' => 'string',
        'sched5' => 'string',
        'room1' => 'string',
        'room2' => 'string',
        'room3' => 'string',
        'room4' => 'string',
        'room5' => 'string',
        'date_created' => '\DateTime',
        'class_limit' => 'int',
        'current_class_size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'trial_program_id' => 'int32',
        'subject_id' => 'int32',
        'subject_name' => null,
        'schedule_id' => 'int32',
        'class_section_id' => 'int32',
        'section_name' => null,
        'room_id' => 'int32',
        'room_name' => null,
        'sched1' => null,
        'sched2' => null,
        'sched3' => null,
        'sched4' => null,
        'sched5' => null,
        'room1' => null,
        'room2' => null,
        'room3' => null,
        'room4' => null,
        'room5' => null,
        'date_created' => 'date-time',
        'class_limit' => 'int32',
        'current_class_size' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'trial_program_id' => false,
        'subject_id' => false,
        'subject_name' => true,
        'schedule_id' => false,
        'class_section_id' => true,
        'section_name' => true,
        'room_id' => true,
        'room_name' => true,
        'sched1' => true,
        'sched2' => true,
        'sched3' => true,
        'sched4' => true,
        'sched5' => true,
        'room1' => true,
        'room2' => true,
        'room3' => true,
        'room4' => true,
        'room5' => true,
        'date_created' => false,
        'class_limit' => false,
        'current_class_size' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'trial_program_id' => 'trialProgramId',
        'subject_id' => 'subjectId',
        'subject_name' => 'subjectName',
        'schedule_id' => 'scheduleId',
        'class_section_id' => 'classSectionId',
        'section_name' => 'sectionName',
        'room_id' => 'roomId',
        'room_name' => 'roomName',
        'sched1' => 'sched1',
        'sched2' => 'sched2',
        'sched3' => 'sched3',
        'sched4' => 'sched4',
        'sched5' => 'sched5',
        'room1' => 'room1',
        'room2' => 'room2',
        'room3' => 'room3',
        'room4' => 'room4',
        'room5' => 'room5',
        'date_created' => 'dateCreated',
        'class_limit' => 'classLimit',
        'current_class_size' => 'currentClassSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'trial_program_id' => 'setTrialProgramId',
        'subject_id' => 'setSubjectId',
        'subject_name' => 'setSubjectName',
        'schedule_id' => 'setScheduleId',
        'class_section_id' => 'setClassSectionId',
        'section_name' => 'setSectionName',
        'room_id' => 'setRoomId',
        'room_name' => 'setRoomName',
        'sched1' => 'setSched1',
        'sched2' => 'setSched2',
        'sched3' => 'setSched3',
        'sched4' => 'setSched4',
        'sched5' => 'setSched5',
        'room1' => 'setRoom1',
        'room2' => 'setRoom2',
        'room3' => 'setRoom3',
        'room4' => 'setRoom4',
        'room5' => 'setRoom5',
        'date_created' => 'setDateCreated',
        'class_limit' => 'setClassLimit',
        'current_class_size' => 'setCurrentClassSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'trial_program_id' => 'getTrialProgramId',
        'subject_id' => 'getSubjectId',
        'subject_name' => 'getSubjectName',
        'schedule_id' => 'getScheduleId',
        'class_section_id' => 'getClassSectionId',
        'section_name' => 'getSectionName',
        'room_id' => 'getRoomId',
        'room_name' => 'getRoomName',
        'sched1' => 'getSched1',
        'sched2' => 'getSched2',
        'sched3' => 'getSched3',
        'sched4' => 'getSched4',
        'sched5' => 'getSched5',
        'room1' => 'getRoom1',
        'room2' => 'getRoom2',
        'room3' => 'getRoom3',
        'room4' => 'getRoom4',
        'room5' => 'getRoom5',
        'date_created' => 'getDateCreated',
        'class_limit' => 'getClassLimit',
        'current_class_size' => 'getCurrentClassSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('trial_program_id', $data ?? [], null);
        $this->setIfExists('subject_id', $data ?? [], null);
        $this->setIfExists('subject_name', $data ?? [], null);
        $this->setIfExists('schedule_id', $data ?? [], null);
        $this->setIfExists('class_section_id', $data ?? [], null);
        $this->setIfExists('section_name', $data ?? [], null);
        $this->setIfExists('room_id', $data ?? [], null);
        $this->setIfExists('room_name', $data ?? [], null);
        $this->setIfExists('sched1', $data ?? [], null);
        $this->setIfExists('sched2', $data ?? [], null);
        $this->setIfExists('sched3', $data ?? [], null);
        $this->setIfExists('sched4', $data ?? [], null);
        $this->setIfExists('sched5', $data ?? [], null);
        $this->setIfExists('room1', $data ?? [], null);
        $this->setIfExists('room2', $data ?? [], null);
        $this->setIfExists('room3', $data ?? [], null);
        $this->setIfExists('room4', $data ?? [], null);
        $this->setIfExists('room5', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('class_limit', $data ?? [], null);
        $this->setIfExists('current_class_size', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets trial_program_id
     *
     * @return int|null
     */
    public function getTrialProgramId()
    {
        return $this->container['trial_program_id'];
    }

    /**
     * Sets trial_program_id
     *
     * @param int|null $trial_program_id trial_program_id
     *
     * @return self
     */
    public function setTrialProgramId($trial_program_id)
    {
        if (is_null($trial_program_id)) {
            throw new \InvalidArgumentException('non-nullable trial_program_id cannot be null');
        }
        $this->container['trial_program_id'] = $trial_program_id;

        return $this;
    }

    /**
     * Gets subject_id
     *
     * @return int|null
     */
    public function getSubjectId()
    {
        return $this->container['subject_id'];
    }

    /**
     * Sets subject_id
     *
     * @param int|null $subject_id subject_id
     *
     * @return self
     */
    public function setSubjectId($subject_id)
    {
        if (is_null($subject_id)) {
            throw new \InvalidArgumentException('non-nullable subject_id cannot be null');
        }
        $this->container['subject_id'] = $subject_id;

        return $this;
    }

    /**
     * Gets subject_name
     *
     * @return string|null
     */
    public function getSubjectName()
    {
        return $this->container['subject_name'];
    }

    /**
     * Sets subject_name
     *
     * @param string|null $subject_name subject_name
     *
     * @return self
     */
    public function setSubjectName($subject_name)
    {
        if (is_null($subject_name)) {
            array_push($this->openAPINullablesSetToNull, 'subject_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subject_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subject_name'] = $subject_name;

        return $this;
    }

    /**
     * Gets schedule_id
     *
     * @return int|null
     */
    public function getScheduleId()
    {
        return $this->container['schedule_id'];
    }

    /**
     * Sets schedule_id
     *
     * @param int|null $schedule_id schedule_id
     *
     * @return self
     */
    public function setScheduleId($schedule_id)
    {
        if (is_null($schedule_id)) {
            throw new \InvalidArgumentException('non-nullable schedule_id cannot be null');
        }
        $this->container['schedule_id'] = $schedule_id;

        return $this;
    }

    /**
     * Gets class_section_id
     *
     * @return int|null
     */
    public function getClassSectionId()
    {
        return $this->container['class_section_id'];
    }

    /**
     * Sets class_section_id
     *
     * @param int|null $class_section_id class_section_id
     *
     * @return self
     */
    public function setClassSectionId($class_section_id)
    {
        if (is_null($class_section_id)) {
            array_push($this->openAPINullablesSetToNull, 'class_section_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('class_section_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['class_section_id'] = $class_section_id;

        return $this;
    }

    /**
     * Gets section_name
     *
     * @return string|null
     */
    public function getSectionName()
    {
        return $this->container['section_name'];
    }

    /**
     * Sets section_name
     *
     * @param string|null $section_name section_name
     *
     * @return self
     */
    public function setSectionName($section_name)
    {
        if (is_null($section_name)) {
            array_push($this->openAPINullablesSetToNull, 'section_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('section_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['section_name'] = $section_name;

        return $this;
    }

    /**
     * Gets room_id
     *
     * @return int|null
     */
    public function getRoomId()
    {
        return $this->container['room_id'];
    }

    /**
     * Sets room_id
     *
     * @param int|null $room_id room_id
     *
     * @return self
     */
    public function setRoomId($room_id)
    {
        if (is_null($room_id)) {
            array_push($this->openAPINullablesSetToNull, 'room_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room_id'] = $room_id;

        return $this;
    }

    /**
     * Gets room_name
     *
     * @return string|null
     */
    public function getRoomName()
    {
        return $this->container['room_name'];
    }

    /**
     * Sets room_name
     *
     * @param string|null $room_name room_name
     *
     * @return self
     */
    public function setRoomName($room_name)
    {
        if (is_null($room_name)) {
            array_push($this->openAPINullablesSetToNull, 'room_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room_name'] = $room_name;

        return $this;
    }

    /**
     * Gets sched1
     *
     * @return string|null
     */
    public function getSched1()
    {
        return $this->container['sched1'];
    }

    /**
     * Sets sched1
     *
     * @param string|null $sched1 sched1
     *
     * @return self
     */
    public function setSched1($sched1)
    {
        if (is_null($sched1)) {
            array_push($this->openAPINullablesSetToNull, 'sched1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sched1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sched1'] = $sched1;

        return $this;
    }

    /**
     * Gets sched2
     *
     * @return string|null
     */
    public function getSched2()
    {
        return $this->container['sched2'];
    }

    /**
     * Sets sched2
     *
     * @param string|null $sched2 sched2
     *
     * @return self
     */
    public function setSched2($sched2)
    {
        if (is_null($sched2)) {
            array_push($this->openAPINullablesSetToNull, 'sched2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sched2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sched2'] = $sched2;

        return $this;
    }

    /**
     * Gets sched3
     *
     * @return string|null
     */
    public function getSched3()
    {
        return $this->container['sched3'];
    }

    /**
     * Sets sched3
     *
     * @param string|null $sched3 sched3
     *
     * @return self
     */
    public function setSched3($sched3)
    {
        if (is_null($sched3)) {
            array_push($this->openAPINullablesSetToNull, 'sched3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sched3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sched3'] = $sched3;

        return $this;
    }

    /**
     * Gets sched4
     *
     * @return string|null
     */
    public function getSched4()
    {
        return $this->container['sched4'];
    }

    /**
     * Sets sched4
     *
     * @param string|null $sched4 sched4
     *
     * @return self
     */
    public function setSched4($sched4)
    {
        if (is_null($sched4)) {
            array_push($this->openAPINullablesSetToNull, 'sched4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sched4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sched4'] = $sched4;

        return $this;
    }

    /**
     * Gets sched5
     *
     * @return string|null
     */
    public function getSched5()
    {
        return $this->container['sched5'];
    }

    /**
     * Sets sched5
     *
     * @param string|null $sched5 sched5
     *
     * @return self
     */
    public function setSched5($sched5)
    {
        if (is_null($sched5)) {
            array_push($this->openAPINullablesSetToNull, 'sched5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sched5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sched5'] = $sched5;

        return $this;
    }

    /**
     * Gets room1
     *
     * @return string|null
     */
    public function getRoom1()
    {
        return $this->container['room1'];
    }

    /**
     * Sets room1
     *
     * @param string|null $room1 room1
     *
     * @return self
     */
    public function setRoom1($room1)
    {
        if (is_null($room1)) {
            array_push($this->openAPINullablesSetToNull, 'room1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room1'] = $room1;

        return $this;
    }

    /**
     * Gets room2
     *
     * @return string|null
     */
    public function getRoom2()
    {
        return $this->container['room2'];
    }

    /**
     * Sets room2
     *
     * @param string|null $room2 room2
     *
     * @return self
     */
    public function setRoom2($room2)
    {
        if (is_null($room2)) {
            array_push($this->openAPINullablesSetToNull, 'room2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room2'] = $room2;

        return $this;
    }

    /**
     * Gets room3
     *
     * @return string|null
     */
    public function getRoom3()
    {
        return $this->container['room3'];
    }

    /**
     * Sets room3
     *
     * @param string|null $room3 room3
     *
     * @return self
     */
    public function setRoom3($room3)
    {
        if (is_null($room3)) {
            array_push($this->openAPINullablesSetToNull, 'room3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room3'] = $room3;

        return $this;
    }

    /**
     * Gets room4
     *
     * @return string|null
     */
    public function getRoom4()
    {
        return $this->container['room4'];
    }

    /**
     * Sets room4
     *
     * @param string|null $room4 room4
     *
     * @return self
     */
    public function setRoom4($room4)
    {
        if (is_null($room4)) {
            array_push($this->openAPINullablesSetToNull, 'room4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room4'] = $room4;

        return $this;
    }

    /**
     * Gets room5
     *
     * @return string|null
     */
    public function getRoom5()
    {
        return $this->container['room5'];
    }

    /**
     * Sets room5
     *
     * @param string|null $room5 room5
     *
     * @return self
     */
    public function setRoom5($room5)
    {
        if (is_null($room5)) {
            array_push($this->openAPINullablesSetToNull, 'room5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room5'] = $room5;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets class_limit
     *
     * @return int|null
     */
    public function getClassLimit()
    {
        return $this->container['class_limit'];
    }

    /**
     * Sets class_limit
     *
     * @param int|null $class_limit class_limit
     *
     * @return self
     */
    public function setClassLimit($class_limit)
    {
        if (is_null($class_limit)) {
            throw new \InvalidArgumentException('non-nullable class_limit cannot be null');
        }
        $this->container['class_limit'] = $class_limit;

        return $this;
    }

    /**
     * Gets current_class_size
     *
     * @return int|null
     */
    public function getCurrentClassSize()
    {
        return $this->container['current_class_size'];
    }

    /**
     * Sets current_class_size
     *
     * @param int|null $current_class_size current_class_size
     *
     * @return self
     */
    public function setCurrentClassSize($current_class_size)
    {
        if (is_null($current_class_size)) {
            throw new \InvalidArgumentException('non-nullable current_class_size cannot be null');
        }
        $this->container['current_class_size'] = $current_class_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


