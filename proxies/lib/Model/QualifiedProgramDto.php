<?php
/**
 * QualifiedProgramDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * QualifiedProgramDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QualifiedProgramDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QualifiedProgramDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'policy_id' => 'int',
        'campus_id' => 'int',
        'program_code' => 'string',
        'program_name' => 'string',
        'tenant_id' => 'int',
        'priority' => 'string',
        'program_limit' => 'int',
        'program_admitted' => 'int',
        'major_limit' => 'int',
        'major_admitted' => 'int',
        'program_slot_remaining' => 'int',
        'major_slot_remaining' => 'int',
        'pending_count' => 'int',
        'reserved_count' => 'int',
        'approved_count' => 'int',
        'denied_count' => 'int',
        'total_count' => 'int',
        'major_name' => 'string',
        'major_id' => 'int',
        'term_id' => 'int',
        'real_campus_id' => 'int',
        'real_campus' => 'string',
        'confirm_clicked_count' => 'int',
        'confirm_count' => 'int',
        'ranking_slots' => 'int',
        'ranking_open_slots' => 'int',
        'open_for_ranking' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'policy_id' => 'int32',
        'campus_id' => 'int32',
        'program_code' => null,
        'program_name' => null,
        'tenant_id' => 'int32',
        'priority' => null,
        'program_limit' => 'int32',
        'program_admitted' => 'int32',
        'major_limit' => 'int32',
        'major_admitted' => 'int32',
        'program_slot_remaining' => 'int32',
        'major_slot_remaining' => 'int32',
        'pending_count' => 'int32',
        'reserved_count' => 'int32',
        'approved_count' => 'int32',
        'denied_count' => 'int32',
        'total_count' => 'int32',
        'major_name' => null,
        'major_id' => 'int32',
        'term_id' => 'int32',
        'real_campus_id' => 'int32',
        'real_campus' => null,
        'confirm_clicked_count' => 'int32',
        'confirm_count' => 'int32',
        'ranking_slots' => 'int32',
        'ranking_open_slots' => 'int32',
        'open_for_ranking' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'policy_id' => false,
        'campus_id' => false,
        'program_code' => true,
        'program_name' => true,
        'tenant_id' => false,
        'priority' => true,
        'program_limit' => true,
        'program_admitted' => true,
        'major_limit' => true,
        'major_admitted' => true,
        'program_slot_remaining' => true,
        'major_slot_remaining' => true,
        'pending_count' => false,
        'reserved_count' => false,
        'approved_count' => false,
        'denied_count' => false,
        'total_count' => false,
        'major_name' => true,
        'major_id' => true,
        'term_id' => true,
        'real_campus_id' => true,
        'real_campus' => true,
        'confirm_clicked_count' => false,
        'confirm_count' => false,
        'ranking_slots' => true,
        'ranking_open_slots' => true,
        'open_for_ranking' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'policy_id' => 'policyId',
        'campus_id' => 'campusId',
        'program_code' => 'programCode',
        'program_name' => 'programName',
        'tenant_id' => 'tenantId',
        'priority' => 'priority',
        'program_limit' => 'programLimit',
        'program_admitted' => 'programAdmitted',
        'major_limit' => 'majorLimit',
        'major_admitted' => 'majorAdmitted',
        'program_slot_remaining' => 'programSlotRemaining',
        'major_slot_remaining' => 'majorSlotRemaining',
        'pending_count' => 'pendingCount',
        'reserved_count' => 'reservedCount',
        'approved_count' => 'approvedCount',
        'denied_count' => 'deniedCount',
        'total_count' => 'totalCount',
        'major_name' => 'majorName',
        'major_id' => 'majorId',
        'term_id' => 'termId',
        'real_campus_id' => 'realCampusId',
        'real_campus' => 'realCampus',
        'confirm_clicked_count' => 'confirmClickedCount',
        'confirm_count' => 'confirmCount',
        'ranking_slots' => 'rankingSlots',
        'ranking_open_slots' => 'rankingOpenSlots',
        'open_for_ranking' => 'openForRanking'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'policy_id' => 'setPolicyId',
        'campus_id' => 'setCampusId',
        'program_code' => 'setProgramCode',
        'program_name' => 'setProgramName',
        'tenant_id' => 'setTenantId',
        'priority' => 'setPriority',
        'program_limit' => 'setProgramLimit',
        'program_admitted' => 'setProgramAdmitted',
        'major_limit' => 'setMajorLimit',
        'major_admitted' => 'setMajorAdmitted',
        'program_slot_remaining' => 'setProgramSlotRemaining',
        'major_slot_remaining' => 'setMajorSlotRemaining',
        'pending_count' => 'setPendingCount',
        'reserved_count' => 'setReservedCount',
        'approved_count' => 'setApprovedCount',
        'denied_count' => 'setDeniedCount',
        'total_count' => 'setTotalCount',
        'major_name' => 'setMajorName',
        'major_id' => 'setMajorId',
        'term_id' => 'setTermId',
        'real_campus_id' => 'setRealCampusId',
        'real_campus' => 'setRealCampus',
        'confirm_clicked_count' => 'setConfirmClickedCount',
        'confirm_count' => 'setConfirmCount',
        'ranking_slots' => 'setRankingSlots',
        'ranking_open_slots' => 'setRankingOpenSlots',
        'open_for_ranking' => 'setOpenForRanking'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'policy_id' => 'getPolicyId',
        'campus_id' => 'getCampusId',
        'program_code' => 'getProgramCode',
        'program_name' => 'getProgramName',
        'tenant_id' => 'getTenantId',
        'priority' => 'getPriority',
        'program_limit' => 'getProgramLimit',
        'program_admitted' => 'getProgramAdmitted',
        'major_limit' => 'getMajorLimit',
        'major_admitted' => 'getMajorAdmitted',
        'program_slot_remaining' => 'getProgramSlotRemaining',
        'major_slot_remaining' => 'getMajorSlotRemaining',
        'pending_count' => 'getPendingCount',
        'reserved_count' => 'getReservedCount',
        'approved_count' => 'getApprovedCount',
        'denied_count' => 'getDeniedCount',
        'total_count' => 'getTotalCount',
        'major_name' => 'getMajorName',
        'major_id' => 'getMajorId',
        'term_id' => 'getTermId',
        'real_campus_id' => 'getRealCampusId',
        'real_campus' => 'getRealCampus',
        'confirm_clicked_count' => 'getConfirmClickedCount',
        'confirm_count' => 'getConfirmCount',
        'ranking_slots' => 'getRankingSlots',
        'ranking_open_slots' => 'getRankingOpenSlots',
        'open_for_ranking' => 'getOpenForRanking'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('policy_id', $data ?? [], null);
        $this->setIfExists('campus_id', $data ?? [], null);
        $this->setIfExists('program_code', $data ?? [], null);
        $this->setIfExists('program_name', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('program_limit', $data ?? [], null);
        $this->setIfExists('program_admitted', $data ?? [], null);
        $this->setIfExists('major_limit', $data ?? [], null);
        $this->setIfExists('major_admitted', $data ?? [], null);
        $this->setIfExists('program_slot_remaining', $data ?? [], null);
        $this->setIfExists('major_slot_remaining', $data ?? [], null);
        $this->setIfExists('pending_count', $data ?? [], null);
        $this->setIfExists('reserved_count', $data ?? [], null);
        $this->setIfExists('approved_count', $data ?? [], null);
        $this->setIfExists('denied_count', $data ?? [], null);
        $this->setIfExists('total_count', $data ?? [], null);
        $this->setIfExists('major_name', $data ?? [], null);
        $this->setIfExists('major_id', $data ?? [], null);
        $this->setIfExists('term_id', $data ?? [], null);
        $this->setIfExists('real_campus_id', $data ?? [], null);
        $this->setIfExists('real_campus', $data ?? [], null);
        $this->setIfExists('confirm_clicked_count', $data ?? [], null);
        $this->setIfExists('confirm_count', $data ?? [], null);
        $this->setIfExists('ranking_slots', $data ?? [], null);
        $this->setIfExists('ranking_open_slots', $data ?? [], null);
        $this->setIfExists('open_for_ranking', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets policy_id
     *
     * @return int|null
     */
    public function getPolicyId()
    {
        return $this->container['policy_id'];
    }

    /**
     * Sets policy_id
     *
     * @param int|null $policy_id policy_id
     *
     * @return self
     */
    public function setPolicyId($policy_id)
    {
        if (is_null($policy_id)) {
            throw new \InvalidArgumentException('non-nullable policy_id cannot be null');
        }
        $this->container['policy_id'] = $policy_id;

        return $this;
    }

    /**
     * Gets campus_id
     *
     * @return int|null
     */
    public function getCampusId()
    {
        return $this->container['campus_id'];
    }

    /**
     * Sets campus_id
     *
     * @param int|null $campus_id campus_id
     *
     * @return self
     */
    public function setCampusId($campus_id)
    {
        if (is_null($campus_id)) {
            throw new \InvalidArgumentException('non-nullable campus_id cannot be null');
        }
        $this->container['campus_id'] = $campus_id;

        return $this;
    }

    /**
     * Gets program_code
     *
     * @return string|null
     */
    public function getProgramCode()
    {
        return $this->container['program_code'];
    }

    /**
     * Sets program_code
     *
     * @param string|null $program_code program_code
     *
     * @return self
     */
    public function setProgramCode($program_code)
    {
        if (is_null($program_code)) {
            array_push($this->openAPINullablesSetToNull, 'program_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('program_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['program_code'] = $program_code;

        return $this;
    }

    /**
     * Gets program_name
     *
     * @return string|null
     */
    public function getProgramName()
    {
        return $this->container['program_name'];
    }

    /**
     * Sets program_name
     *
     * @param string|null $program_name program_name
     *
     * @return self
     */
    public function setProgramName($program_name)
    {
        if (is_null($program_name)) {
            array_push($this->openAPINullablesSetToNull, 'program_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('program_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['program_name'] = $program_name;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return int|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param int|null $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            throw new \InvalidArgumentException('non-nullable tenant_id cannot be null');
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string|null $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        if (is_null($priority)) {
            array_push($this->openAPINullablesSetToNull, 'priority');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priority', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets program_limit
     *
     * @return int|null
     */
    public function getProgramLimit()
    {
        return $this->container['program_limit'];
    }

    /**
     * Sets program_limit
     *
     * @param int|null $program_limit program_limit
     *
     * @return self
     */
    public function setProgramLimit($program_limit)
    {
        if (is_null($program_limit)) {
            array_push($this->openAPINullablesSetToNull, 'program_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('program_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['program_limit'] = $program_limit;

        return $this;
    }

    /**
     * Gets program_admitted
     *
     * @return int|null
     */
    public function getProgramAdmitted()
    {
        return $this->container['program_admitted'];
    }

    /**
     * Sets program_admitted
     *
     * @param int|null $program_admitted program_admitted
     *
     * @return self
     */
    public function setProgramAdmitted($program_admitted)
    {
        if (is_null($program_admitted)) {
            array_push($this->openAPINullablesSetToNull, 'program_admitted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('program_admitted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['program_admitted'] = $program_admitted;

        return $this;
    }

    /**
     * Gets major_limit
     *
     * @return int|null
     */
    public function getMajorLimit()
    {
        return $this->container['major_limit'];
    }

    /**
     * Sets major_limit
     *
     * @param int|null $major_limit major_limit
     *
     * @return self
     */
    public function setMajorLimit($major_limit)
    {
        if (is_null($major_limit)) {
            array_push($this->openAPINullablesSetToNull, 'major_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('major_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['major_limit'] = $major_limit;

        return $this;
    }

    /**
     * Gets major_admitted
     *
     * @return int|null
     */
    public function getMajorAdmitted()
    {
        return $this->container['major_admitted'];
    }

    /**
     * Sets major_admitted
     *
     * @param int|null $major_admitted major_admitted
     *
     * @return self
     */
    public function setMajorAdmitted($major_admitted)
    {
        if (is_null($major_admitted)) {
            array_push($this->openAPINullablesSetToNull, 'major_admitted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('major_admitted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['major_admitted'] = $major_admitted;

        return $this;
    }

    /**
     * Gets program_slot_remaining
     *
     * @return int|null
     */
    public function getProgramSlotRemaining()
    {
        return $this->container['program_slot_remaining'];
    }

    /**
     * Sets program_slot_remaining
     *
     * @param int|null $program_slot_remaining program_slot_remaining
     *
     * @return self
     */
    public function setProgramSlotRemaining($program_slot_remaining)
    {
        if (is_null($program_slot_remaining)) {
            array_push($this->openAPINullablesSetToNull, 'program_slot_remaining');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('program_slot_remaining', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['program_slot_remaining'] = $program_slot_remaining;

        return $this;
    }

    /**
     * Gets major_slot_remaining
     *
     * @return int|null
     */
    public function getMajorSlotRemaining()
    {
        return $this->container['major_slot_remaining'];
    }

    /**
     * Sets major_slot_remaining
     *
     * @param int|null $major_slot_remaining major_slot_remaining
     *
     * @return self
     */
    public function setMajorSlotRemaining($major_slot_remaining)
    {
        if (is_null($major_slot_remaining)) {
            array_push($this->openAPINullablesSetToNull, 'major_slot_remaining');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('major_slot_remaining', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['major_slot_remaining'] = $major_slot_remaining;

        return $this;
    }

    /**
     * Gets pending_count
     *
     * @return int|null
     */
    public function getPendingCount()
    {
        return $this->container['pending_count'];
    }

    /**
     * Sets pending_count
     *
     * @param int|null $pending_count pending_count
     *
     * @return self
     */
    public function setPendingCount($pending_count)
    {
        if (is_null($pending_count)) {
            throw new \InvalidArgumentException('non-nullable pending_count cannot be null');
        }
        $this->container['pending_count'] = $pending_count;

        return $this;
    }

    /**
     * Gets reserved_count
     *
     * @return int|null
     */
    public function getReservedCount()
    {
        return $this->container['reserved_count'];
    }

    /**
     * Sets reserved_count
     *
     * @param int|null $reserved_count reserved_count
     *
     * @return self
     */
    public function setReservedCount($reserved_count)
    {
        if (is_null($reserved_count)) {
            throw new \InvalidArgumentException('non-nullable reserved_count cannot be null');
        }
        $this->container['reserved_count'] = $reserved_count;

        return $this;
    }

    /**
     * Gets approved_count
     *
     * @return int|null
     */
    public function getApprovedCount()
    {
        return $this->container['approved_count'];
    }

    /**
     * Sets approved_count
     *
     * @param int|null $approved_count approved_count
     *
     * @return self
     */
    public function setApprovedCount($approved_count)
    {
        if (is_null($approved_count)) {
            throw new \InvalidArgumentException('non-nullable approved_count cannot be null');
        }
        $this->container['approved_count'] = $approved_count;

        return $this;
    }

    /**
     * Gets denied_count
     *
     * @return int|null
     */
    public function getDeniedCount()
    {
        return $this->container['denied_count'];
    }

    /**
     * Sets denied_count
     *
     * @param int|null $denied_count denied_count
     *
     * @return self
     */
    public function setDeniedCount($denied_count)
    {
        if (is_null($denied_count)) {
            throw new \InvalidArgumentException('non-nullable denied_count cannot be null');
        }
        $this->container['denied_count'] = $denied_count;

        return $this;
    }

    /**
     * Gets total_count
     *
     * @return int|null
     */
    public function getTotalCount()
    {
        return $this->container['total_count'];
    }

    /**
     * Sets total_count
     *
     * @param int|null $total_count total_count
     *
     * @return self
     */
    public function setTotalCount($total_count)
    {
        if (is_null($total_count)) {
            throw new \InvalidArgumentException('non-nullable total_count cannot be null');
        }
        $this->container['total_count'] = $total_count;

        return $this;
    }

    /**
     * Gets major_name
     *
     * @return string|null
     */
    public function getMajorName()
    {
        return $this->container['major_name'];
    }

    /**
     * Sets major_name
     *
     * @param string|null $major_name major_name
     *
     * @return self
     */
    public function setMajorName($major_name)
    {
        if (is_null($major_name)) {
            array_push($this->openAPINullablesSetToNull, 'major_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('major_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['major_name'] = $major_name;

        return $this;
    }

    /**
     * Gets major_id
     *
     * @return int|null
     */
    public function getMajorId()
    {
        return $this->container['major_id'];
    }

    /**
     * Sets major_id
     *
     * @param int|null $major_id major_id
     *
     * @return self
     */
    public function setMajorId($major_id)
    {
        if (is_null($major_id)) {
            array_push($this->openAPINullablesSetToNull, 'major_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('major_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['major_id'] = $major_id;

        return $this;
    }

    /**
     * Gets term_id
     *
     * @return int|null
     */
    public function getTermId()
    {
        return $this->container['term_id'];
    }

    /**
     * Sets term_id
     *
     * @param int|null $term_id term_id
     *
     * @return self
     */
    public function setTermId($term_id)
    {
        if (is_null($term_id)) {
            array_push($this->openAPINullablesSetToNull, 'term_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('term_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['term_id'] = $term_id;

        return $this;
    }

    /**
     * Gets real_campus_id
     *
     * @return int|null
     */
    public function getRealCampusId()
    {
        return $this->container['real_campus_id'];
    }

    /**
     * Sets real_campus_id
     *
     * @param int|null $real_campus_id real_campus_id
     *
     * @return self
     */
    public function setRealCampusId($real_campus_id)
    {
        if (is_null($real_campus_id)) {
            array_push($this->openAPINullablesSetToNull, 'real_campus_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('real_campus_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['real_campus_id'] = $real_campus_id;

        return $this;
    }

    /**
     * Gets real_campus
     *
     * @return string|null
     */
    public function getRealCampus()
    {
        return $this->container['real_campus'];
    }

    /**
     * Sets real_campus
     *
     * @param string|null $real_campus real_campus
     *
     * @return self
     */
    public function setRealCampus($real_campus)
    {
        if (is_null($real_campus)) {
            array_push($this->openAPINullablesSetToNull, 'real_campus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('real_campus', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['real_campus'] = $real_campus;

        return $this;
    }

    /**
     * Gets confirm_clicked_count
     *
     * @return int|null
     */
    public function getConfirmClickedCount()
    {
        return $this->container['confirm_clicked_count'];
    }

    /**
     * Sets confirm_clicked_count
     *
     * @param int|null $confirm_clicked_count confirm_clicked_count
     *
     * @return self
     */
    public function setConfirmClickedCount($confirm_clicked_count)
    {
        if (is_null($confirm_clicked_count)) {
            throw new \InvalidArgumentException('non-nullable confirm_clicked_count cannot be null');
        }
        $this->container['confirm_clicked_count'] = $confirm_clicked_count;

        return $this;
    }

    /**
     * Gets confirm_count
     *
     * @return int|null
     */
    public function getConfirmCount()
    {
        return $this->container['confirm_count'];
    }

    /**
     * Sets confirm_count
     *
     * @param int|null $confirm_count confirm_count
     *
     * @return self
     */
    public function setConfirmCount($confirm_count)
    {
        if (is_null($confirm_count)) {
            throw new \InvalidArgumentException('non-nullable confirm_count cannot be null');
        }
        $this->container['confirm_count'] = $confirm_count;

        return $this;
    }

    /**
     * Gets ranking_slots
     *
     * @return int|null
     */
    public function getRankingSlots()
    {
        return $this->container['ranking_slots'];
    }

    /**
     * Sets ranking_slots
     *
     * @param int|null $ranking_slots ranking_slots
     *
     * @return self
     */
    public function setRankingSlots($ranking_slots)
    {
        if (is_null($ranking_slots)) {
            array_push($this->openAPINullablesSetToNull, 'ranking_slots');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ranking_slots', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ranking_slots'] = $ranking_slots;

        return $this;
    }

    /**
     * Gets ranking_open_slots
     *
     * @return int|null
     */
    public function getRankingOpenSlots()
    {
        return $this->container['ranking_open_slots'];
    }

    /**
     * Sets ranking_open_slots
     *
     * @param int|null $ranking_open_slots ranking_open_slots
     *
     * @return self
     */
    public function setRankingOpenSlots($ranking_open_slots)
    {
        if (is_null($ranking_open_slots)) {
            array_push($this->openAPINullablesSetToNull, 'ranking_open_slots');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ranking_open_slots', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ranking_open_slots'] = $ranking_open_slots;

        return $this;
    }

    /**
     * Gets open_for_ranking
     *
     * @return bool|null
     */
    public function getOpenForRanking()
    {
        return $this->container['open_for_ranking'];
    }

    /**
     * Sets open_for_ranking
     *
     * @param bool|null $open_for_ranking open_for_ranking
     *
     * @return self
     */
    public function setOpenForRanking($open_for_ranking)
    {
        if (is_null($open_for_ranking)) {
            array_push($this->openAPINullablesSetToNull, 'open_for_ranking');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('open_for_ranking', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['open_for_ranking'] = $open_for_ranking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


