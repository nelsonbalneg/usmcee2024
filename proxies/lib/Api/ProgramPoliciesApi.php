<?php
/**
 * ProgramPoliciesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ProgramPoliciesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProgramPoliciesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesExistsGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesFilterGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesFilterbyceeandcampusGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesGpafilterGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesIdAddonePost' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesIdAddslotsSlotsToAddPost' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesIdLessonePost' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesListStatusGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesListStatusPermunicipalityGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesListallGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet' => [
            'application/json',
        ],
        'apiV2ProgramPoliciesPolicyIdRequirehepabtestPut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2ProgramPoliciesPolicyIdSetcutoffscorePut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2ProgramPoliciesPolicyIdSetstatusPut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2ProgramPoliciesPost' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2ProgramPoliciesPut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2ProgramPoliciesRemainingslotsGet' => [
            'application/json',
        ],
        'getPolicy' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet
     *
     * Filter by college and term
     *
     * @param  int $college_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet($college_id, $term_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet'][0])
    {
        $this->apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGetWithHttpInfo($college_id, $term_id, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGetWithHttpInfo
     *
     * Filter by college and term
     *
     * @param  int $college_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGetWithHttpInfo($college_id, $term_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGetRequest($college_id, $term_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGetAsync
     *
     * Filter by college and term
     *
     * @param  int $college_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGetAsync($college_id, $term_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet'][0])
    {
        return $this->apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGetAsyncWithHttpInfo($college_id, $term_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGetAsyncWithHttpInfo
     *
     * Filter by college and term
     *
     * @param  int $college_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGetAsyncWithHttpInfo($college_id, $term_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGetRequest($college_id, $term_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet'
     *
     * @param  int $college_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGetRequest($college_id, $term_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet'][0])
    {

        // verify the required parameter 'college_id' is set
        if ($college_id === null || (is_array($college_id) && count($college_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $college_id when calling apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet'
            );
        }

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2ProgramPoliciesCollegeCollegeIdTermTermIdGet'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/college/{collegeId}/term/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($college_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collegeId' . '}',
                ObjectSerializer::toPathValue($college_id),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet
     *
     * Counts the total slots per program
     *
     * @param  int $term_id  (required)
     * @param  int $college_id  (required)
     * @param  int $campus_id  (required)
     * @param  int $program_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet($term_id, $college_id, $campus_id, $program_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'][0])
    {
        $this->apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGetWithHttpInfo($term_id, $college_id, $campus_id, $program_id, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGetWithHttpInfo
     *
     * Counts the total slots per program
     *
     * @param  int $term_id  (required)
     * @param  int $college_id  (required)
     * @param  int $campus_id  (required)
     * @param  int $program_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGetWithHttpInfo($term_id, $college_id, $campus_id, $program_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGetRequest($term_id, $college_id, $campus_id, $program_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGetAsync
     *
     * Counts the total slots per program
     *
     * @param  int $term_id  (required)
     * @param  int $college_id  (required)
     * @param  int $campus_id  (required)
     * @param  int $program_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGetAsync($term_id, $college_id, $campus_id, $program_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'][0])
    {
        return $this->apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGetAsyncWithHttpInfo($term_id, $college_id, $campus_id, $program_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGetAsyncWithHttpInfo
     *
     * Counts the total slots per program
     *
     * @param  int $term_id  (required)
     * @param  int $college_id  (required)
     * @param  int $campus_id  (required)
     * @param  int $program_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGetAsyncWithHttpInfo($term_id, $college_id, $campus_id, $program_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGetRequest($term_id, $college_id, $campus_id, $program_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'
     *
     * @param  int $term_id  (required)
     * @param  int $college_id  (required)
     * @param  int $campus_id  (required)
     * @param  int $program_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGetRequest($term_id, $college_id, $campus_id, $program_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'][0])
    {

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'
            );
        }

        // verify the required parameter 'college_id' is set
        if ($college_id === null || (is_array($college_id) && count($college_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $college_id when calling apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'
            );
        }

        // verify the required parameter 'campus_id' is set
        if ($campus_id === null || (is_array($campus_id) && count($campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campus_id when calling apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'
            );
        }

        // verify the required parameter 'program_id' is set
        if ($program_id === null || (is_array($program_id) && count($program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $program_id when calling apiV2ProgramPoliciesCounterbycollegeCollegeIdCampusCampusIdTermTermIdProgramProgramIdGet'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/counterbycollege/{collegeId}/campus/{campusId}/term/{termId}/program/{programId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }
        // path params
        if ($college_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collegeId' . '}',
                ObjectSerializer::toPathValue($college_id),
                $resourcePath
            );
        }
        // path params
        if ($campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campusId' . '}',
                ObjectSerializer::toPathValue($campus_id),
                $resourcePath
            );
        }
        // path params
        if ($program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'programId' . '}',
                ObjectSerializer::toPathValue($program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesExistsGet
     *
     * Check if a policy already exists
     *
     * @param  int $term_id term_id (optional)
     * @param  int $campus_id campus_id (optional)
     * @param  int $prog_id prog_id (optional)
     * @param  int $major_disc_id major_disc_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesExistsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesExistsGet($term_id = null, $campus_id = null, $prog_id = null, $major_disc_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesExistsGet'][0])
    {
        $this->apiV2ProgramPoliciesExistsGetWithHttpInfo($term_id, $campus_id, $prog_id, $major_disc_id, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesExistsGetWithHttpInfo
     *
     * Check if a policy already exists
     *
     * @param  int $term_id (optional)
     * @param  int $campus_id (optional)
     * @param  int $prog_id (optional)
     * @param  int $major_disc_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesExistsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesExistsGetWithHttpInfo($term_id = null, $campus_id = null, $prog_id = null, $major_disc_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesExistsGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesExistsGetRequest($term_id, $campus_id, $prog_id, $major_disc_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesExistsGetAsync
     *
     * Check if a policy already exists
     *
     * @param  int $term_id (optional)
     * @param  int $campus_id (optional)
     * @param  int $prog_id (optional)
     * @param  int $major_disc_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesExistsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesExistsGetAsync($term_id = null, $campus_id = null, $prog_id = null, $major_disc_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesExistsGet'][0])
    {
        return $this->apiV2ProgramPoliciesExistsGetAsyncWithHttpInfo($term_id, $campus_id, $prog_id, $major_disc_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesExistsGetAsyncWithHttpInfo
     *
     * Check if a policy already exists
     *
     * @param  int $term_id (optional)
     * @param  int $campus_id (optional)
     * @param  int $prog_id (optional)
     * @param  int $major_disc_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesExistsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesExistsGetAsyncWithHttpInfo($term_id = null, $campus_id = null, $prog_id = null, $major_disc_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesExistsGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesExistsGetRequest($term_id, $campus_id, $prog_id, $major_disc_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesExistsGet'
     *
     * @param  int $term_id (optional)
     * @param  int $campus_id (optional)
     * @param  int $prog_id (optional)
     * @param  int $major_disc_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesExistsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesExistsGetRequest($term_id = null, $campus_id = null, $prog_id = null, $major_disc_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesExistsGet'][0])
    {






        $resourcePath = '/api/v2/ProgramPolicies/exists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $term_id,
            'TermId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campus_id,
            'CampusId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prog_id,
            'ProgId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $major_disc_id,
            'MajorDiscId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesFilterGet
     *
     * Filter policies based on cee score, gpa, type, progid, or campusname
     *
     * @param  int $cee_score cee_score (optional)
     * @param  float $gpa gpa (optional)
     * @param  string $type type (optional)
     * @param  int $prog_id prog_id (optional)
     * @param  string $campus_name campus_name (optional)
     * @param  string $specialization_code specialization_code (optional)
     * @param  int $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesFilterGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesFilterGet($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesFilterGet'][0])
    {
        $this->apiV2ProgramPoliciesFilterGetWithHttpInfo($cee_score, $gpa, $type, $prog_id, $campus_name, $specialization_code, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesFilterGetWithHttpInfo
     *
     * Filter policies based on cee score, gpa, type, progid, or campusname
     *
     * @param  int $cee_score (optional)
     * @param  float $gpa (optional)
     * @param  string $type (optional)
     * @param  int $prog_id (optional)
     * @param  string $campus_name (optional)
     * @param  string $specialization_code (optional)
     * @param  int $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesFilterGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesFilterGetWithHttpInfo($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesFilterGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesFilterGetRequest($cee_score, $gpa, $type, $prog_id, $campus_name, $specialization_code, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesFilterGetAsync
     *
     * Filter policies based on cee score, gpa, type, progid, or campusname
     *
     * @param  int $cee_score (optional)
     * @param  float $gpa (optional)
     * @param  string $type (optional)
     * @param  int $prog_id (optional)
     * @param  string $campus_name (optional)
     * @param  string $specialization_code (optional)
     * @param  int $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesFilterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesFilterGetAsync($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesFilterGet'][0])
    {
        return $this->apiV2ProgramPoliciesFilterGetAsyncWithHttpInfo($cee_score, $gpa, $type, $prog_id, $campus_name, $specialization_code, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesFilterGetAsyncWithHttpInfo
     *
     * Filter policies based on cee score, gpa, type, progid, or campusname
     *
     * @param  int $cee_score (optional)
     * @param  float $gpa (optional)
     * @param  string $type (optional)
     * @param  int $prog_id (optional)
     * @param  string $campus_name (optional)
     * @param  string $specialization_code (optional)
     * @param  int $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesFilterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesFilterGetAsyncWithHttpInfo($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesFilterGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesFilterGetRequest($cee_score, $gpa, $type, $prog_id, $campus_name, $specialization_code, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesFilterGet'
     *
     * @param  int $cee_score (optional)
     * @param  float $gpa (optional)
     * @param  string $type (optional)
     * @param  int $prog_id (optional)
     * @param  string $campus_name (optional)
     * @param  string $specialization_code (optional)
     * @param  int $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesFilterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesFilterGetRequest($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesFilterGet'][0])
    {









        $resourcePath = '/api/v2/ProgramPolicies/filter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cee_score,
            'CeeScore', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gpa,
            'Gpa', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'Type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prog_id,
            'ProgId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campus_name,
            'CampusName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $specialization_code,
            'SpecializationCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'TenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesFilterbyceeandcampusGet
     *
     * @param  int $cee_score cee_score (optional)
     * @param  float $gpa gpa (optional)
     * @param  string $type type (optional)
     * @param  int $prog_id prog_id (optional)
     * @param  string $campus_name campus_name (optional)
     * @param  string $specialization_code specialization_code (optional)
     * @param  int $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesFilterbyceeandcampusGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesFilterbyceeandcampusGet($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesFilterbyceeandcampusGet'][0])
    {
        $this->apiV2ProgramPoliciesFilterbyceeandcampusGetWithHttpInfo($cee_score, $gpa, $type, $prog_id, $campus_name, $specialization_code, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesFilterbyceeandcampusGetWithHttpInfo
     *
     * @param  int $cee_score (optional)
     * @param  float $gpa (optional)
     * @param  string $type (optional)
     * @param  int $prog_id (optional)
     * @param  string $campus_name (optional)
     * @param  string $specialization_code (optional)
     * @param  int $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesFilterbyceeandcampusGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesFilterbyceeandcampusGetWithHttpInfo($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesFilterbyceeandcampusGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesFilterbyceeandcampusGetRequest($cee_score, $gpa, $type, $prog_id, $campus_name, $specialization_code, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesFilterbyceeandcampusGetAsync
     *
     * @param  int $cee_score (optional)
     * @param  float $gpa (optional)
     * @param  string $type (optional)
     * @param  int $prog_id (optional)
     * @param  string $campus_name (optional)
     * @param  string $specialization_code (optional)
     * @param  int $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesFilterbyceeandcampusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesFilterbyceeandcampusGetAsync($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesFilterbyceeandcampusGet'][0])
    {
        return $this->apiV2ProgramPoliciesFilterbyceeandcampusGetAsyncWithHttpInfo($cee_score, $gpa, $type, $prog_id, $campus_name, $specialization_code, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesFilterbyceeandcampusGetAsyncWithHttpInfo
     *
     * @param  int $cee_score (optional)
     * @param  float $gpa (optional)
     * @param  string $type (optional)
     * @param  int $prog_id (optional)
     * @param  string $campus_name (optional)
     * @param  string $specialization_code (optional)
     * @param  int $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesFilterbyceeandcampusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesFilterbyceeandcampusGetAsyncWithHttpInfo($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesFilterbyceeandcampusGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesFilterbyceeandcampusGetRequest($cee_score, $gpa, $type, $prog_id, $campus_name, $specialization_code, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesFilterbyceeandcampusGet'
     *
     * @param  int $cee_score (optional)
     * @param  float $gpa (optional)
     * @param  string $type (optional)
     * @param  int $prog_id (optional)
     * @param  string $campus_name (optional)
     * @param  string $specialization_code (optional)
     * @param  int $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesFilterbyceeandcampusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesFilterbyceeandcampusGetRequest($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesFilterbyceeandcampusGet'][0])
    {









        $resourcePath = '/api/v2/ProgramPolicies/filterbyceeandcampus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cee_score,
            'CeeScore', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gpa,
            'Gpa', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'Type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prog_id,
            'ProgId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campus_name,
            'CampusName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $specialization_code,
            'SpecializationCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'TenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesGpafilterGet
     *
     * Filter by gpa
     *
     * @param  int $cee_score cee_score (optional)
     * @param  float $gpa gpa (optional)
     * @param  string $type type (optional)
     * @param  int $prog_id prog_id (optional)
     * @param  string $campus_name campus_name (optional)
     * @param  string $specialization_code specialization_code (optional)
     * @param  int $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesGpafilterGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesGpafilterGet($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesGpafilterGet'][0])
    {
        $this->apiV2ProgramPoliciesGpafilterGetWithHttpInfo($cee_score, $gpa, $type, $prog_id, $campus_name, $specialization_code, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesGpafilterGetWithHttpInfo
     *
     * Filter by gpa
     *
     * @param  int $cee_score (optional)
     * @param  float $gpa (optional)
     * @param  string $type (optional)
     * @param  int $prog_id (optional)
     * @param  string $campus_name (optional)
     * @param  string $specialization_code (optional)
     * @param  int $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesGpafilterGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesGpafilterGetWithHttpInfo($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesGpafilterGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesGpafilterGetRequest($cee_score, $gpa, $type, $prog_id, $campus_name, $specialization_code, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesGpafilterGetAsync
     *
     * Filter by gpa
     *
     * @param  int $cee_score (optional)
     * @param  float $gpa (optional)
     * @param  string $type (optional)
     * @param  int $prog_id (optional)
     * @param  string $campus_name (optional)
     * @param  string $specialization_code (optional)
     * @param  int $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesGpafilterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesGpafilterGetAsync($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesGpafilterGet'][0])
    {
        return $this->apiV2ProgramPoliciesGpafilterGetAsyncWithHttpInfo($cee_score, $gpa, $type, $prog_id, $campus_name, $specialization_code, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesGpafilterGetAsyncWithHttpInfo
     *
     * Filter by gpa
     *
     * @param  int $cee_score (optional)
     * @param  float $gpa (optional)
     * @param  string $type (optional)
     * @param  int $prog_id (optional)
     * @param  string $campus_name (optional)
     * @param  string $specialization_code (optional)
     * @param  int $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesGpafilterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesGpafilterGetAsyncWithHttpInfo($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesGpafilterGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesGpafilterGetRequest($cee_score, $gpa, $type, $prog_id, $campus_name, $specialization_code, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesGpafilterGet'
     *
     * @param  int $cee_score (optional)
     * @param  float $gpa (optional)
     * @param  string $type (optional)
     * @param  int $prog_id (optional)
     * @param  string $campus_name (optional)
     * @param  string $specialization_code (optional)
     * @param  int $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesGpafilterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesGpafilterGetRequest($cee_score = null, $gpa = null, $type = null, $prog_id = null, $campus_name = null, $specialization_code = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesGpafilterGet'][0])
    {









        $resourcePath = '/api/v2/ProgramPolicies/gpafilter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cee_score,
            'CeeScore', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gpa,
            'Gpa', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'Type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prog_id,
            'ProgId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campus_name,
            'CampusName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $specialization_code,
            'SpecializationCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'TenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesIdAddonePost
     *
     * Adds 1 admission to the admitted slot
     *
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddonePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesIdAddonePost($id, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddonePost'][0])
    {
        $this->apiV2ProgramPoliciesIdAddonePostWithHttpInfo($id, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesIdAddonePostWithHttpInfo
     *
     * Adds 1 admission to the admitted slot
     *
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddonePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesIdAddonePostWithHttpInfo($id, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddonePost'][0])
    {
        $request = $this->apiV2ProgramPoliciesIdAddonePostRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesIdAddonePostAsync
     *
     * Adds 1 admission to the admitted slot
     *
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddonePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesIdAddonePostAsync($id, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddonePost'][0])
    {
        return $this->apiV2ProgramPoliciesIdAddonePostAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesIdAddonePostAsyncWithHttpInfo
     *
     * Adds 1 admission to the admitted slot
     *
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddonePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesIdAddonePostAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddonePost'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesIdAddonePostRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesIdAddonePost'
     *
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddonePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesIdAddonePostRequest($id, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddonePost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2ProgramPoliciesIdAddonePost'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/{id}/addone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost
     *
     * Add number of slots for pending limit
     *
     * @param  int $id  (required)
     * @param  int $slots_to_add  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost($id, $slots_to_add, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost'][0])
    {
        $this->apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPostWithHttpInfo($id, $slots_to_add, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPostWithHttpInfo
     *
     * Add number of slots for pending limit
     *
     * @param  int $id  (required)
     * @param  int $slots_to_add  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPostWithHttpInfo($id, $slots_to_add, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost'][0])
    {
        $request = $this->apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPostRequest($id, $slots_to_add, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPostAsync
     *
     * Add number of slots for pending limit
     *
     * @param  int $id  (required)
     * @param  int $slots_to_add  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPostAsync($id, $slots_to_add, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost'][0])
    {
        return $this->apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPostAsyncWithHttpInfo($id, $slots_to_add, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPostAsyncWithHttpInfo
     *
     * Add number of slots for pending limit
     *
     * @param  int $id  (required)
     * @param  int $slots_to_add  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPostAsyncWithHttpInfo($id, $slots_to_add, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPostRequest($id, $slots_to_add, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost'
     *
     * @param  int $id  (required)
     * @param  int $slots_to_add  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPostRequest($id, $slots_to_add, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost'
            );
        }

        // verify the required parameter 'slots_to_add' is set
        if ($slots_to_add === null || (is_array($slots_to_add) && count($slots_to_add) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slots_to_add when calling apiV2ProgramPoliciesIdAddpendingslotsSlotsToAddPost'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/{id}/addpendingslots/{slotsToAdd}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($slots_to_add !== null) {
            $resourcePath = str_replace(
                '{' . 'slotsToAdd' . '}',
                ObjectSerializer::toPathValue($slots_to_add),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesIdAddslotsSlotsToAddPost
     *
     * Add 1 to slot limits
     *
     * @param  int $id  (required)
     * @param  int $slots_to_add  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddslotsSlotsToAddPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesIdAddslotsSlotsToAddPost($id, $slots_to_add, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddslotsSlotsToAddPost'][0])
    {
        $this->apiV2ProgramPoliciesIdAddslotsSlotsToAddPostWithHttpInfo($id, $slots_to_add, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesIdAddslotsSlotsToAddPostWithHttpInfo
     *
     * Add 1 to slot limits
     *
     * @param  int $id  (required)
     * @param  int $slots_to_add  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddslotsSlotsToAddPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesIdAddslotsSlotsToAddPostWithHttpInfo($id, $slots_to_add, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddslotsSlotsToAddPost'][0])
    {
        $request = $this->apiV2ProgramPoliciesIdAddslotsSlotsToAddPostRequest($id, $slots_to_add, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesIdAddslotsSlotsToAddPostAsync
     *
     * Add 1 to slot limits
     *
     * @param  int $id  (required)
     * @param  int $slots_to_add  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddslotsSlotsToAddPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesIdAddslotsSlotsToAddPostAsync($id, $slots_to_add, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddslotsSlotsToAddPost'][0])
    {
        return $this->apiV2ProgramPoliciesIdAddslotsSlotsToAddPostAsyncWithHttpInfo($id, $slots_to_add, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesIdAddslotsSlotsToAddPostAsyncWithHttpInfo
     *
     * Add 1 to slot limits
     *
     * @param  int $id  (required)
     * @param  int $slots_to_add  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddslotsSlotsToAddPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesIdAddslotsSlotsToAddPostAsyncWithHttpInfo($id, $slots_to_add, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddslotsSlotsToAddPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesIdAddslotsSlotsToAddPostRequest($id, $slots_to_add, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesIdAddslotsSlotsToAddPost'
     *
     * @param  int $id  (required)
     * @param  int $slots_to_add  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdAddslotsSlotsToAddPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesIdAddslotsSlotsToAddPostRequest($id, $slots_to_add, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdAddslotsSlotsToAddPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2ProgramPoliciesIdAddslotsSlotsToAddPost'
            );
        }

        // verify the required parameter 'slots_to_add' is set
        if ($slots_to_add === null || (is_array($slots_to_add) && count($slots_to_add) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slots_to_add when calling apiV2ProgramPoliciesIdAddslotsSlotsToAddPost'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/{id}/addslots/{slotsToAdd}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($slots_to_add !== null) {
            $resourcePath = str_replace(
                '{' . 'slotsToAdd' . '}',
                ObjectSerializer::toPathValue($slots_to_add),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesIdLessonePost
     *
     * Subtracts 1 to admission count
     *
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdLessonePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesIdLessonePost($id, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdLessonePost'][0])
    {
        $this->apiV2ProgramPoliciesIdLessonePostWithHttpInfo($id, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesIdLessonePostWithHttpInfo
     *
     * Subtracts 1 to admission count
     *
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdLessonePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesIdLessonePostWithHttpInfo($id, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdLessonePost'][0])
    {
        $request = $this->apiV2ProgramPoliciesIdLessonePostRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesIdLessonePostAsync
     *
     * Subtracts 1 to admission count
     *
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdLessonePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesIdLessonePostAsync($id, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdLessonePost'][0])
    {
        return $this->apiV2ProgramPoliciesIdLessonePostAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesIdLessonePostAsyncWithHttpInfo
     *
     * Subtracts 1 to admission count
     *
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdLessonePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesIdLessonePostAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdLessonePost'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesIdLessonePostRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesIdLessonePost'
     *
     * @param  int $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdLessonePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesIdLessonePostRequest($id, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdLessonePost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2ProgramPoliciesIdLessonePost'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/{id}/lessone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost
     *
     * subtract pending limits
     *
     * @param  int $id  (required)
     * @param  int $slots_to_subtract  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost($id, $slots_to_subtract, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost'][0])
    {
        $this->apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPostWithHttpInfo($id, $slots_to_subtract, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPostWithHttpInfo
     *
     * subtract pending limits
     *
     * @param  int $id  (required)
     * @param  int $slots_to_subtract  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPostWithHttpInfo($id, $slots_to_subtract, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost'][0])
    {
        $request = $this->apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPostRequest($id, $slots_to_subtract, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPostAsync
     *
     * subtract pending limits
     *
     * @param  int $id  (required)
     * @param  int $slots_to_subtract  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPostAsync($id, $slots_to_subtract, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost'][0])
    {
        return $this->apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPostAsyncWithHttpInfo($id, $slots_to_subtract, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPostAsyncWithHttpInfo
     *
     * subtract pending limits
     *
     * @param  int $id  (required)
     * @param  int $slots_to_subtract  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPostAsyncWithHttpInfo($id, $slots_to_subtract, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPostRequest($id, $slots_to_subtract, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost'
     *
     * @param  int $id  (required)
     * @param  int $slots_to_subtract  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPostRequest($id, $slots_to_subtract, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost'
            );
        }

        // verify the required parameter 'slots_to_subtract' is set
        if ($slots_to_subtract === null || (is_array($slots_to_subtract) && count($slots_to_subtract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slots_to_subtract when calling apiV2ProgramPoliciesIdSubtractpendingslotsSlotsToSubtractPost'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/{id}/subtractpendingslots/{slotsToSubtract}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($slots_to_subtract !== null) {
            $resourcePath = str_replace(
                '{' . 'slotsToSubtract' . '}',
                ObjectSerializer::toPathValue($slots_to_subtract),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost
     *
     * Subtract 1 to slot limits
     *
     * @param  int $id  (required)
     * @param  int $slots_to_subtract  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost($id, $slots_to_subtract, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost'][0])
    {
        $this->apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPostWithHttpInfo($id, $slots_to_subtract, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPostWithHttpInfo
     *
     * Subtract 1 to slot limits
     *
     * @param  int $id  (required)
     * @param  int $slots_to_subtract  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPostWithHttpInfo($id, $slots_to_subtract, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost'][0])
    {
        $request = $this->apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPostRequest($id, $slots_to_subtract, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPostAsync
     *
     * Subtract 1 to slot limits
     *
     * @param  int $id  (required)
     * @param  int $slots_to_subtract  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPostAsync($id, $slots_to_subtract, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost'][0])
    {
        return $this->apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPostAsyncWithHttpInfo($id, $slots_to_subtract, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPostAsyncWithHttpInfo
     *
     * Subtract 1 to slot limits
     *
     * @param  int $id  (required)
     * @param  int $slots_to_subtract  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPostAsyncWithHttpInfo($id, $slots_to_subtract, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPostRequest($id, $slots_to_subtract, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost'
     *
     * @param  int $id  (required)
     * @param  int $slots_to_subtract  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPostRequest($id, $slots_to_subtract, string $contentType = self::contentTypes['apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost'
            );
        }

        // verify the required parameter 'slots_to_subtract' is set
        if ($slots_to_subtract === null || (is_array($slots_to_subtract) && count($slots_to_subtract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slots_to_subtract when calling apiV2ProgramPoliciesIdSubtractslotsSlotsToSubtractPost'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/{id}/subtractslots/{slotsToSubtract}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($slots_to_subtract !== null) {
            $resourcePath = str_replace(
                '{' . 'slotsToSubtract' . '}',
                ObjectSerializer::toPathValue($slots_to_subtract),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet
     *
     * Get Bachelor programs
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet'][0])
    {
        $this->apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGetWithHttpInfo($term_id, $campus_id, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGetWithHttpInfo
     *
     * Get Bachelor programs
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGetWithHttpInfo($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGetRequest($term_id, $campus_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGetAsync
     *
     * Get Bachelor programs
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGetAsync($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet'][0])
    {
        return $this->apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGetAsyncWithHttpInfo($term_id, $campus_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGetAsyncWithHttpInfo
     *
     * Get Bachelor programs
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGetAsyncWithHttpInfo($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGetRequest($term_id, $campus_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet'
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGetRequest($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet'][0])
    {

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet'
            );
        }

        // verify the required parameter 'campus_id' is set
        if ($campus_id === null || (is_array($campus_id) && count($campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campus_id when calling apiV2ProgramPoliciesListBsTermTermIdCampusCampusIdGet'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/list-bs/term/{termId}/campus/{campusId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }
        // path params
        if ($campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campusId' . '}',
                ObjectSerializer::toPathValue($campus_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet
     *
     * Get policies for grad school
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet'][0])
    {
        $this->apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGetWithHttpInfo($term_id, $campus_id, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGetWithHttpInfo
     *
     * Get policies for grad school
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGetWithHttpInfo($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGetRequest($term_id, $campus_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGetAsync
     *
     * Get policies for grad school
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGetAsync($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet'][0])
    {
        return $this->apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGetAsyncWithHttpInfo($term_id, $campus_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGetAsyncWithHttpInfo
     *
     * Get policies for grad school
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGetAsyncWithHttpInfo($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGetRequest($term_id, $campus_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet'
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGetRequest($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet'][0])
    {

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet'
            );
        }

        // verify the required parameter 'campus_id' is set
        if ($campus_id === null || (is_array($campus_id) && count($campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campus_id when calling apiV2ProgramPoliciesListGsTermTermIdCampusCampusIdGet'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/list-gs/term/{termId}/campus/{campusId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }
        // path params
        if ($campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campusId' . '}',
                ObjectSerializer::toPathValue($campus_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesListStatusGet
     *
     * Total count of applicant status
     *
     * @param  int $main_campus_term_id  (optional)
     * @param  int $kcc_term_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListStatusGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesListStatusGet($main_campus_term_id = null, $kcc_term_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesListStatusGet'][0])
    {
        $this->apiV2ProgramPoliciesListStatusGetWithHttpInfo($main_campus_term_id, $kcc_term_id, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesListStatusGetWithHttpInfo
     *
     * Total count of applicant status
     *
     * @param  int $main_campus_term_id  (optional)
     * @param  int $kcc_term_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListStatusGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesListStatusGetWithHttpInfo($main_campus_term_id = null, $kcc_term_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesListStatusGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesListStatusGetRequest($main_campus_term_id, $kcc_term_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesListStatusGetAsync
     *
     * Total count of applicant status
     *
     * @param  int $main_campus_term_id  (optional)
     * @param  int $kcc_term_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListStatusGetAsync($main_campus_term_id = null, $kcc_term_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesListStatusGet'][0])
    {
        return $this->apiV2ProgramPoliciesListStatusGetAsyncWithHttpInfo($main_campus_term_id, $kcc_term_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesListStatusGetAsyncWithHttpInfo
     *
     * Total count of applicant status
     *
     * @param  int $main_campus_term_id  (optional)
     * @param  int $kcc_term_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListStatusGetAsyncWithHttpInfo($main_campus_term_id = null, $kcc_term_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesListStatusGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesListStatusGetRequest($main_campus_term_id, $kcc_term_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesListStatusGet'
     *
     * @param  int $main_campus_term_id  (optional)
     * @param  int $kcc_term_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesListStatusGetRequest($main_campus_term_id = null, $kcc_term_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesListStatusGet'][0])
    {




        $resourcePath = '/api/v2/ProgramPolicies/list/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $main_campus_term_id,
            'mainCampusTermId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kcc_term_id,
            'kccTermId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesListStatusPermunicipalityGet
     *
     * Total count per municipality
     *
     * @param  string $municipality_code  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListStatusPermunicipalityGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesListStatusPermunicipalityGet($municipality_code = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesListStatusPermunicipalityGet'][0])
    {
        $this->apiV2ProgramPoliciesListStatusPermunicipalityGetWithHttpInfo($municipality_code, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesListStatusPermunicipalityGetWithHttpInfo
     *
     * Total count per municipality
     *
     * @param  string $municipality_code  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListStatusPermunicipalityGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesListStatusPermunicipalityGetWithHttpInfo($municipality_code = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesListStatusPermunicipalityGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesListStatusPermunicipalityGetRequest($municipality_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesListStatusPermunicipalityGetAsync
     *
     * Total count per municipality
     *
     * @param  string $municipality_code  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListStatusPermunicipalityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListStatusPermunicipalityGetAsync($municipality_code = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesListStatusPermunicipalityGet'][0])
    {
        return $this->apiV2ProgramPoliciesListStatusPermunicipalityGetAsyncWithHttpInfo($municipality_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesListStatusPermunicipalityGetAsyncWithHttpInfo
     *
     * Total count per municipality
     *
     * @param  string $municipality_code  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListStatusPermunicipalityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListStatusPermunicipalityGetAsyncWithHttpInfo($municipality_code = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesListStatusPermunicipalityGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesListStatusPermunicipalityGetRequest($municipality_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesListStatusPermunicipalityGet'
     *
     * @param  string $municipality_code  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListStatusPermunicipalityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesListStatusPermunicipalityGetRequest($municipality_code = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesListStatusPermunicipalityGet'][0])
    {



        $resourcePath = '/api/v2/ProgramPolicies/list/status/permunicipality';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $municipality_code,
            'municipalityCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet
     *
     * Filter on first Priority
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet($term_id, $campus_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet'][0])
    {
        $this->apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGetWithHttpInfo($term_id, $campus_id, $cee_score, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGetWithHttpInfo
     *
     * Filter on first Priority
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGetWithHttpInfo($term_id, $campus_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGetRequest($term_id, $campus_id, $cee_score, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGetAsync
     *
     * Filter on first Priority
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGetAsync($term_id, $campus_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet'][0])
    {
        return $this->apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGetAsyncWithHttpInfo($term_id, $campus_id, $cee_score, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGetAsyncWithHttpInfo
     *
     * Filter on first Priority
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGetAsyncWithHttpInfo($term_id, $campus_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGetRequest($term_id, $campus_id, $cee_score, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet'
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGetRequest($term_id, $campus_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet'][0])
    {

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet'
            );
        }

        // verify the required parameter 'campus_id' is set
        if ($campus_id === null || (is_array($campus_id) && count($campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campus_id when calling apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet'
            );
        }

        // verify the required parameter 'cee_score' is set
        if ($cee_score === null || (is_array($cee_score) && count($cee_score) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cee_score when calling apiV2ProgramPoliciesListTermTermIdCampusCampusIdCeeCeeScoreGet'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/list/term/{termId}/campus/{campusId}/cee/{ceeScore}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }
        // path params
        if ($campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campusId' . '}',
                ObjectSerializer::toPathValue($campus_id),
                $resourcePath
            );
        }
        // path params
        if ($cee_score !== null) {
            $resourcePath = str_replace(
                '{' . 'ceeScore' . '}',
                ObjectSerializer::toPathValue($cee_score),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet
     *
     * Filter by term and campus with totals
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet'][0])
    {
        $this->apiV2ProgramPoliciesListTermTermIdCampusCampusIdGetWithHttpInfo($term_id, $campus_id, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdCampusCampusIdGetWithHttpInfo
     *
     * Filter by term and campus with totals
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesListTermTermIdCampusCampusIdGetWithHttpInfo($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesListTermTermIdCampusCampusIdGetRequest($term_id, $campus_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdCampusCampusIdGetAsync
     *
     * Filter by term and campus with totals
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListTermTermIdCampusCampusIdGetAsync($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet'][0])
    {
        return $this->apiV2ProgramPoliciesListTermTermIdCampusCampusIdGetAsyncWithHttpInfo($term_id, $campus_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdCampusCampusIdGetAsyncWithHttpInfo
     *
     * Filter by term and campus with totals
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListTermTermIdCampusCampusIdGetAsyncWithHttpInfo($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesListTermTermIdCampusCampusIdGetRequest($term_id, $campus_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet'
     *
     * @param  int $term_id  (required)
     * @param  int $campus_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesListTermTermIdCampusCampusIdGetRequest($term_id, $campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet'][0])
    {

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet'
            );
        }

        // verify the required parameter 'campus_id' is set
        if ($campus_id === null || (is_array($campus_id) && count($campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campus_id when calling apiV2ProgramPoliciesListTermTermIdCampusCampusIdGet'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/list/term/{termId}/campus/{campusId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }
        // path params
        if ($campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campusId' . '}',
                ObjectSerializer::toPathValue($campus_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet
     *
     * Filter on real campus id
     *
     * @param  int $term_id  (required)
     * @param  int $real_campus_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet($term_id, $real_campus_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet'][0])
    {
        $this->apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGetWithHttpInfo($term_id, $real_campus_id, $cee_score, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGetWithHttpInfo
     *
     * Filter on real campus id
     *
     * @param  int $term_id  (required)
     * @param  int $real_campus_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGetWithHttpInfo($term_id, $real_campus_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGetRequest($term_id, $real_campus_id, $cee_score, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGetAsync
     *
     * Filter on real campus id
     *
     * @param  int $term_id  (required)
     * @param  int $real_campus_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGetAsync($term_id, $real_campus_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet'][0])
    {
        return $this->apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGetAsyncWithHttpInfo($term_id, $real_campus_id, $cee_score, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGetAsyncWithHttpInfo
     *
     * Filter on real campus id
     *
     * @param  int $term_id  (required)
     * @param  int $real_campus_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGetAsyncWithHttpInfo($term_id, $real_campus_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGetRequest($term_id, $real_campus_id, $cee_score, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet'
     *
     * @param  int $term_id  (required)
     * @param  int $real_campus_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGetRequest($term_id, $real_campus_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet'][0])
    {

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet'
            );
        }

        // verify the required parameter 'real_campus_id' is set
        if ($real_campus_id === null || (is_array($real_campus_id) && count($real_campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_campus_id when calling apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet'
            );
        }

        // verify the required parameter 'cee_score' is set
        if ($cee_score === null || (is_array($cee_score) && count($cee_score) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cee_score when calling apiV2ProgramPoliciesListTermTermIdRealCampusRealCampusIdCeeCeeScoreGet'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/list/term/{termId}/real-campus/{realCampusId}/cee/{ceeScore}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }
        // path params
        if ($real_campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'realCampusId' . '}',
                ObjectSerializer::toPathValue($real_campus_id),
                $resourcePath
            );
        }
        // path params
        if ($cee_score !== null) {
            $resourcePath = str_replace(
                '{' . 'ceeScore' . '}',
                ObjectSerializer::toPathValue($cee_score),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet
     *
     * Filter by term and real campus with totals
     *
     * @param  int $term_id  (required)
     * @param  int $real_campus_id real_campus_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet($term_id, $real_campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet'][0])
    {
        $this->apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGetWithHttpInfo($term_id, $real_campus_id, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGetWithHttpInfo
     *
     * Filter by term and real campus with totals
     *
     * @param  int $term_id  (required)
     * @param  int $real_campus_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGetWithHttpInfo($term_id, $real_campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGetRequest($term_id, $real_campus_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGetAsync
     *
     * Filter by term and real campus with totals
     *
     * @param  int $term_id  (required)
     * @param  int $real_campus_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGetAsync($term_id, $real_campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet'][0])
    {
        return $this->apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGetAsyncWithHttpInfo($term_id, $real_campus_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGetAsyncWithHttpInfo
     *
     * Filter by term and real campus with totals
     *
     * @param  int $term_id  (required)
     * @param  int $real_campus_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGetAsyncWithHttpInfo($term_id, $real_campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGetRequest($term_id, $real_campus_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet'
     *
     * @param  int $term_id  (required)
     * @param  int $real_campus_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGetRequest($term_id, $real_campus_id, string $contentType = self::contentTypes['apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet'][0])
    {

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet'
            );
        }

        // verify the required parameter 'real_campus_id' is set
        if ($real_campus_id === null || (is_array($real_campus_id) && count($real_campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_campus_id when calling apiV2ProgramPoliciesListTermTermIdRealcampusRealCampusIdGet'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/list/term/{termId}/realcampus/{realCampusId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }
        // path params
        if ($real_campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'realCampusId' . '}',
                ObjectSerializer::toPathValue($real_campus_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesListallGet
     *
     * List of all policies
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListallGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesListallGet(string $contentType = self::contentTypes['apiV2ProgramPoliciesListallGet'][0])
    {
        $this->apiV2ProgramPoliciesListallGetWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesListallGetWithHttpInfo
     *
     * List of all policies
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListallGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesListallGetWithHttpInfo(string $contentType = self::contentTypes['apiV2ProgramPoliciesListallGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesListallGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesListallGetAsync
     *
     * List of all policies
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListallGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListallGetAsync(string $contentType = self::contentTypes['apiV2ProgramPoliciesListallGet'][0])
    {
        return $this->apiV2ProgramPoliciesListallGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesListallGetAsyncWithHttpInfo
     *
     * List of all policies
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListallGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListallGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2ProgramPoliciesListallGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesListallGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesListallGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListallGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesListallGetRequest(string $contentType = self::contentTypes['apiV2ProgramPoliciesListallGet'][0])
    {


        $resourcePath = '/api/v2/ProgramPolicies/listall';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet
     *
     * List of policies by term and cee score
     *
     * @param  int $term_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet($term_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet'][0])
    {
        $this->apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGetWithHttpInfo($term_id, $cee_score, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGetWithHttpInfo
     *
     * List of policies by term and cee score
     *
     * @param  int $term_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGetWithHttpInfo($term_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGetRequest($term_id, $cee_score, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGetAsync
     *
     * List of policies by term and cee score
     *
     * @param  int $term_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGetAsync($term_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet'][0])
    {
        return $this->apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGetAsyncWithHttpInfo($term_id, $cee_score, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGetAsyncWithHttpInfo
     *
     * List of policies by term and cee score
     *
     * @param  int $term_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGetAsyncWithHttpInfo($term_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGetRequest($term_id, $cee_score, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet'
     *
     * @param  int $term_id  (required)
     * @param  int $cee_score  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGetRequest($term_id, $cee_score, string $contentType = self::contentTypes['apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet'][0])
    {

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet'
            );
        }

        // verify the required parameter 'cee_score' is set
        if ($cee_score === null || (is_array($cee_score) && count($cee_score) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cee_score when calling apiV2ProgramPoliciesListbytermandceeTermIdCeeScoreGet'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/listbytermandcee/{termId}/{ceeScore}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }
        // path params
        if ($cee_score !== null) {
            $resourcePath = str_replace(
                '{' . 'ceeScore' . '}',
                ObjectSerializer::toPathValue($cee_score),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesPolicyIdRequirehepabtestPut
     *
     * Switch for requiring hepa b test
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerRequireHepaTestDto $policy_controller_require_hepa_test_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdRequirehepabtestPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesPolicyIdRequirehepabtestPut($policy_id, $policy_controller_require_hepa_test_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdRequirehepabtestPut'][0])
    {
        $this->apiV2ProgramPoliciesPolicyIdRequirehepabtestPutWithHttpInfo($policy_id, $policy_controller_require_hepa_test_dto, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesPolicyIdRequirehepabtestPutWithHttpInfo
     *
     * Switch for requiring hepa b test
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerRequireHepaTestDto $policy_controller_require_hepa_test_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdRequirehepabtestPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesPolicyIdRequirehepabtestPutWithHttpInfo($policy_id, $policy_controller_require_hepa_test_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdRequirehepabtestPut'][0])
    {
        $request = $this->apiV2ProgramPoliciesPolicyIdRequirehepabtestPutRequest($policy_id, $policy_controller_require_hepa_test_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesPolicyIdRequirehepabtestPutAsync
     *
     * Switch for requiring hepa b test
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerRequireHepaTestDto $policy_controller_require_hepa_test_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdRequirehepabtestPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesPolicyIdRequirehepabtestPutAsync($policy_id, $policy_controller_require_hepa_test_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdRequirehepabtestPut'][0])
    {
        return $this->apiV2ProgramPoliciesPolicyIdRequirehepabtestPutAsyncWithHttpInfo($policy_id, $policy_controller_require_hepa_test_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesPolicyIdRequirehepabtestPutAsyncWithHttpInfo
     *
     * Switch for requiring hepa b test
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerRequireHepaTestDto $policy_controller_require_hepa_test_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdRequirehepabtestPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesPolicyIdRequirehepabtestPutAsyncWithHttpInfo($policy_id, $policy_controller_require_hepa_test_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdRequirehepabtestPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesPolicyIdRequirehepabtestPutRequest($policy_id, $policy_controller_require_hepa_test_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesPolicyIdRequirehepabtestPut'
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerRequireHepaTestDto $policy_controller_require_hepa_test_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdRequirehepabtestPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesPolicyIdRequirehepabtestPutRequest($policy_id, $policy_controller_require_hepa_test_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdRequirehepabtestPut'][0])
    {

        // verify the required parameter 'policy_id' is set
        if ($policy_id === null || (is_array($policy_id) && count($policy_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $policy_id when calling apiV2ProgramPoliciesPolicyIdRequirehepabtestPut'
            );
        }



        $resourcePath = '/api/v2/ProgramPolicies/{policyId}/requirehepabtest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($policy_id !== null) {
            $resourcePath = str_replace(
                '{' . 'policyId' . '}',
                ObjectSerializer::toPathValue($policy_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($policy_controller_require_hepa_test_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($policy_controller_require_hepa_test_dto));
            } else {
                $httpBody = $policy_controller_require_hepa_test_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesPolicyIdSetcutoffscorePut
     *
     * Update cutoff score
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerSetCutOffScoreDto $policy_controller_set_cut_off_score_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdSetcutoffscorePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesPolicyIdSetcutoffscorePut($policy_id, $policy_controller_set_cut_off_score_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdSetcutoffscorePut'][0])
    {
        $this->apiV2ProgramPoliciesPolicyIdSetcutoffscorePutWithHttpInfo($policy_id, $policy_controller_set_cut_off_score_dto, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesPolicyIdSetcutoffscorePutWithHttpInfo
     *
     * Update cutoff score
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerSetCutOffScoreDto $policy_controller_set_cut_off_score_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdSetcutoffscorePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesPolicyIdSetcutoffscorePutWithHttpInfo($policy_id, $policy_controller_set_cut_off_score_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdSetcutoffscorePut'][0])
    {
        $request = $this->apiV2ProgramPoliciesPolicyIdSetcutoffscorePutRequest($policy_id, $policy_controller_set_cut_off_score_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesPolicyIdSetcutoffscorePutAsync
     *
     * Update cutoff score
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerSetCutOffScoreDto $policy_controller_set_cut_off_score_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdSetcutoffscorePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesPolicyIdSetcutoffscorePutAsync($policy_id, $policy_controller_set_cut_off_score_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdSetcutoffscorePut'][0])
    {
        return $this->apiV2ProgramPoliciesPolicyIdSetcutoffscorePutAsyncWithHttpInfo($policy_id, $policy_controller_set_cut_off_score_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesPolicyIdSetcutoffscorePutAsyncWithHttpInfo
     *
     * Update cutoff score
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerSetCutOffScoreDto $policy_controller_set_cut_off_score_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdSetcutoffscorePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesPolicyIdSetcutoffscorePutAsyncWithHttpInfo($policy_id, $policy_controller_set_cut_off_score_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdSetcutoffscorePut'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesPolicyIdSetcutoffscorePutRequest($policy_id, $policy_controller_set_cut_off_score_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesPolicyIdSetcutoffscorePut'
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerSetCutOffScoreDto $policy_controller_set_cut_off_score_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdSetcutoffscorePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesPolicyIdSetcutoffscorePutRequest($policy_id, $policy_controller_set_cut_off_score_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdSetcutoffscorePut'][0])
    {

        // verify the required parameter 'policy_id' is set
        if ($policy_id === null || (is_array($policy_id) && count($policy_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $policy_id when calling apiV2ProgramPoliciesPolicyIdSetcutoffscorePut'
            );
        }



        $resourcePath = '/api/v2/ProgramPolicies/{policyId}/setcutoffscore';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($policy_id !== null) {
            $resourcePath = str_replace(
                '{' . 'policyId' . '}',
                ObjectSerializer::toPathValue($policy_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($policy_controller_set_cut_off_score_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($policy_controller_set_cut_off_score_dto));
            } else {
                $httpBody = $policy_controller_set_cut_off_score_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesPolicyIdSetstatusPut
     *
     * Update policy status
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerSetStatusDto $policy_controller_set_status_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdSetstatusPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesPolicyIdSetstatusPut($policy_id, $policy_controller_set_status_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdSetstatusPut'][0])
    {
        $this->apiV2ProgramPoliciesPolicyIdSetstatusPutWithHttpInfo($policy_id, $policy_controller_set_status_dto, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesPolicyIdSetstatusPutWithHttpInfo
     *
     * Update policy status
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerSetStatusDto $policy_controller_set_status_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdSetstatusPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesPolicyIdSetstatusPutWithHttpInfo($policy_id, $policy_controller_set_status_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdSetstatusPut'][0])
    {
        $request = $this->apiV2ProgramPoliciesPolicyIdSetstatusPutRequest($policy_id, $policy_controller_set_status_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesPolicyIdSetstatusPutAsync
     *
     * Update policy status
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerSetStatusDto $policy_controller_set_status_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdSetstatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesPolicyIdSetstatusPutAsync($policy_id, $policy_controller_set_status_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdSetstatusPut'][0])
    {
        return $this->apiV2ProgramPoliciesPolicyIdSetstatusPutAsyncWithHttpInfo($policy_id, $policy_controller_set_status_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesPolicyIdSetstatusPutAsyncWithHttpInfo
     *
     * Update policy status
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerSetStatusDto $policy_controller_set_status_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdSetstatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesPolicyIdSetstatusPutAsyncWithHttpInfo($policy_id, $policy_controller_set_status_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdSetstatusPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesPolicyIdSetstatusPutRequest($policy_id, $policy_controller_set_status_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesPolicyIdSetstatusPut'
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\PolicyControllerSetStatusDto $policy_controller_set_status_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPolicyIdSetstatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesPolicyIdSetstatusPutRequest($policy_id, $policy_controller_set_status_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPolicyIdSetstatusPut'][0])
    {

        // verify the required parameter 'policy_id' is set
        if ($policy_id === null || (is_array($policy_id) && count($policy_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $policy_id when calling apiV2ProgramPoliciesPolicyIdSetstatusPut'
            );
        }



        $resourcePath = '/api/v2/ProgramPolicies/{policyId}/setstatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($policy_id !== null) {
            $resourcePath = str_replace(
                '{' . 'policyId' . '}',
                ObjectSerializer::toPathValue($policy_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($policy_controller_set_status_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($policy_controller_set_status_dto));
            } else {
                $httpBody = $policy_controller_set_status_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesPost
     *
     * Create a policy
     *
     * @param  \OpenAPI\Client\Model\ProgramPolicyDto $program_policy_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesPost($program_policy_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPost'][0])
    {
        $this->apiV2ProgramPoliciesPostWithHttpInfo($program_policy_dto, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesPostWithHttpInfo
     *
     * Create a policy
     *
     * @param  \OpenAPI\Client\Model\ProgramPolicyDto $program_policy_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesPostWithHttpInfo($program_policy_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPost'][0])
    {
        $request = $this->apiV2ProgramPoliciesPostRequest($program_policy_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesPostAsync
     *
     * Create a policy
     *
     * @param  \OpenAPI\Client\Model\ProgramPolicyDto $program_policy_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesPostAsync($program_policy_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPost'][0])
    {
        return $this->apiV2ProgramPoliciesPostAsyncWithHttpInfo($program_policy_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesPostAsyncWithHttpInfo
     *
     * Create a policy
     *
     * @param  \OpenAPI\Client\Model\ProgramPolicyDto $program_policy_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesPostAsyncWithHttpInfo($program_policy_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesPostRequest($program_policy_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesPost'
     *
     * @param  \OpenAPI\Client\Model\ProgramPolicyDto $program_policy_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesPostRequest($program_policy_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPost'][0])
    {



        $resourcePath = '/api/v2/ProgramPolicies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($program_policy_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($program_policy_dto));
            } else {
                $httpBody = $program_policy_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesPut
     *
     * Update a policy
     *
     * @param  \OpenAPI\Client\Model\ProgramPolicyDto $program_policy_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesPut($program_policy_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPut'][0])
    {
        $this->apiV2ProgramPoliciesPutWithHttpInfo($program_policy_dto, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesPutWithHttpInfo
     *
     * Update a policy
     *
     * @param  \OpenAPI\Client\Model\ProgramPolicyDto $program_policy_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesPutWithHttpInfo($program_policy_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPut'][0])
    {
        $request = $this->apiV2ProgramPoliciesPutRequest($program_policy_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesPutAsync
     *
     * Update a policy
     *
     * @param  \OpenAPI\Client\Model\ProgramPolicyDto $program_policy_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesPutAsync($program_policy_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPut'][0])
    {
        return $this->apiV2ProgramPoliciesPutAsyncWithHttpInfo($program_policy_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesPutAsyncWithHttpInfo
     *
     * Update a policy
     *
     * @param  \OpenAPI\Client\Model\ProgramPolicyDto $program_policy_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesPutAsyncWithHttpInfo($program_policy_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesPutRequest($program_policy_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesPut'
     *
     * @param  \OpenAPI\Client\Model\ProgramPolicyDto $program_policy_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesPutRequest($program_policy_dto = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesPut'][0])
    {



        $resourcePath = '/api/v2/ProgramPolicies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($program_policy_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($program_policy_dto));
            } else {
                $httpBody = $program_policy_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ProgramPoliciesRemainingslotsGet
     *
     * Get the remaining slots
     *
     * @param  int $term_id  (optional)
     * @param  int $prog_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesRemainingslotsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ProgramPoliciesRemainingslotsGet($term_id = null, $prog_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesRemainingslotsGet'][0])
    {
        $this->apiV2ProgramPoliciesRemainingslotsGetWithHttpInfo($term_id, $prog_id, $contentType);
    }

    /**
     * Operation apiV2ProgramPoliciesRemainingslotsGetWithHttpInfo
     *
     * Get the remaining slots
     *
     * @param  int $term_id  (optional)
     * @param  int $prog_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesRemainingslotsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ProgramPoliciesRemainingslotsGetWithHttpInfo($term_id = null, $prog_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesRemainingslotsGet'][0])
    {
        $request = $this->apiV2ProgramPoliciesRemainingslotsGetRequest($term_id, $prog_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ProgramPoliciesRemainingslotsGetAsync
     *
     * Get the remaining slots
     *
     * @param  int $term_id  (optional)
     * @param  int $prog_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesRemainingslotsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesRemainingslotsGetAsync($term_id = null, $prog_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesRemainingslotsGet'][0])
    {
        return $this->apiV2ProgramPoliciesRemainingslotsGetAsyncWithHttpInfo($term_id, $prog_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ProgramPoliciesRemainingslotsGetAsyncWithHttpInfo
     *
     * Get the remaining slots
     *
     * @param  int $term_id  (optional)
     * @param  int $prog_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesRemainingslotsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ProgramPoliciesRemainingslotsGetAsyncWithHttpInfo($term_id = null, $prog_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesRemainingslotsGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ProgramPoliciesRemainingslotsGetRequest($term_id, $prog_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ProgramPoliciesRemainingslotsGet'
     *
     * @param  int $term_id  (optional)
     * @param  int $prog_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ProgramPoliciesRemainingslotsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ProgramPoliciesRemainingslotsGetRequest($term_id = null, $prog_id = null, string $contentType = self::contentTypes['apiV2ProgramPoliciesRemainingslotsGet'][0])
    {




        $resourcePath = '/api/v2/ProgramPolicies/remainingslots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $term_id,
            'termId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prog_id,
            'progId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPolicy
     *
     * Get a policy by Id
     *
     * @param  int $prog_policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPolicy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getPolicy($prog_policy_id, string $contentType = self::contentTypes['getPolicy'][0])
    {
        $this->getPolicyWithHttpInfo($prog_policy_id, $contentType);
    }

    /**
     * Operation getPolicyWithHttpInfo
     *
     * Get a policy by Id
     *
     * @param  int $prog_policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPolicy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPolicyWithHttpInfo($prog_policy_id, string $contentType = self::contentTypes['getPolicy'][0])
    {
        $request = $this->getPolicyRequest($prog_policy_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getPolicyAsync
     *
     * Get a policy by Id
     *
     * @param  int $prog_policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPolicy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPolicyAsync($prog_policy_id, string $contentType = self::contentTypes['getPolicy'][0])
    {
        return $this->getPolicyAsyncWithHttpInfo($prog_policy_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPolicyAsyncWithHttpInfo
     *
     * Get a policy by Id
     *
     * @param  int $prog_policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPolicy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPolicyAsyncWithHttpInfo($prog_policy_id, string $contentType = self::contentTypes['getPolicy'][0])
    {
        $returnType = '';
        $request = $this->getPolicyRequest($prog_policy_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPolicy'
     *
     * @param  int $prog_policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPolicy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPolicyRequest($prog_policy_id, string $contentType = self::contentTypes['getPolicy'][0])
    {

        // verify the required parameter 'prog_policy_id' is set
        if ($prog_policy_id === null || (is_array($prog_policy_id) && count($prog_policy_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prog_policy_id when calling getPolicy'
            );
        }


        $resourcePath = '/api/v2/ProgramPolicies/{progPolicyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($prog_policy_id !== null) {
            $resourcePath = str_replace(
                '{' . 'progPolicyId' . '}',
                ObjectSerializer::toPathValue($prog_policy_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
