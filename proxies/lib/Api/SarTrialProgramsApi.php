<?php
/**
 * SarTrialProgramsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * SarTrialProgramsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SarTrialProgramsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2SarSarTrialProgramsByStudentStudentNoGet' => [
            'application/json',
        ],
        'apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet' => [
            'application/json',
        ],
        'apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet' => [
            'application/json',
        ],
        'apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet' => [
            'application/json',
        ],
        'apiV2SarSarTrialProgramsDatatablePagedGet' => [
            'application/json',
        ],
        'apiV2SarSarTrialProgramsIdCancelPut' => [
            'application/json',
        ],
        'apiV2SarSarTrialProgramsIdEnroll2UserIdPost' => [
            'application/json',
        ],
        'apiV2SarSarTrialProgramsIdEnrollPost' => [
            'application/json',
        ],
        'apiV2SarSarTrialProgramsIdProfileClassSectionPut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2SarSarTrialProgramsIdProfileCurriculumPut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2SarSarTrialProgramsIdProfileGrantTemplatePut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut' => [
            'application/json',
        ],
        'apiV2SarSarTrialProgramsIdProfileProgramPut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut' => [
            'application/json',
        ],
        'apiV2SarSarTrialProgramsIdProfileSchoProviderPut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2SarSarTrialProgramsIdProfileTableOfFeePut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2SarSarTrialProgramsIdProfileYearLevelPut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2SarSarTrialProgramsIdSetTransactionTypePost' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2SarSarTrialProgramsIdSubmitPut' => [
            'application/json',
        ],
        'apiV2SarSarTrialProgramsPost' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2SarSarTrialProgramsSyncPatch' => [
            'application/json',
        ],
        'apiV2SarSarTrialProgramsSyncTpEnrollmentPatch' => [
            'application/json',
        ],
        'apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch' => [
            'application/json',
        ],
        'getTrialProgram' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2SarSarTrialProgramsByStudentStudentNoGet
     *
     * Get the trial program by studentNo
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsByStudentStudentNoGet($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoGet'][0])
    {
        $this->apiV2SarSarTrialProgramsByStudentStudentNoGetWithHttpInfo($student_no, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsByStudentStudentNoGetWithHttpInfo
     *
     * Get the trial program by studentNo
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsByStudentStudentNoGetWithHttpInfo($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoGet'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsByStudentStudentNoGetRequest($student_no, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsByStudentStudentNoGetAsync
     *
     * Get the trial program by studentNo
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsByStudentStudentNoGetAsync($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoGet'][0])
    {
        return $this->apiV2SarSarTrialProgramsByStudentStudentNoGetAsyncWithHttpInfo($student_no, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsByStudentStudentNoGetAsyncWithHttpInfo
     *
     * Get the trial program by studentNo
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsByStudentStudentNoGetAsyncWithHttpInfo($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsByStudentStudentNoGetRequest($student_no, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsByStudentStudentNoGet'
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsByStudentStudentNoGetRequest($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoGet'][0])
    {

        // verify the required parameter 'student_no' is set
        if ($student_no === null || (is_array($student_no) && count($student_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_no when calling apiV2SarSarTrialProgramsByStudentStudentNoGet'
            );
        }



        $resourcePath = '/api/v2/sar/SarTrialPrograms/by-student/{studentNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($student_no !== null) {
            $resourcePath = str_replace(
                '{' . 'studentNo' . '}',
                ObjectSerializer::toPathValue($student_no),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet
     *
     * @param  string $student_no student_no (required)
     * @param  int $term_id term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet'][0])
    {
        $this->apiV2SarSarTrialProgramsByStudentStudentNoTermIdGetWithHttpInfo($student_no, $term_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsByStudentStudentNoTermIdGetWithHttpInfo
     *
     * @param  string $student_no (required)
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsByStudentStudentNoTermIdGetWithHttpInfo($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsByStudentStudentNoTermIdGetRequest($student_no, $term_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsByStudentStudentNoTermIdGetAsync
     *
     * @param  string $student_no (required)
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsByStudentStudentNoTermIdGetAsync($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet'][0])
    {
        return $this->apiV2SarSarTrialProgramsByStudentStudentNoTermIdGetAsyncWithHttpInfo($student_no, $term_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsByStudentStudentNoTermIdGetAsyncWithHttpInfo
     *
     * @param  string $student_no (required)
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsByStudentStudentNoTermIdGetAsyncWithHttpInfo($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsByStudentStudentNoTermIdGetRequest($student_no, $term_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet'
     *
     * @param  string $student_no (required)
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsByStudentStudentNoTermIdGetRequest($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet'][0])
    {

        // verify the required parameter 'student_no' is set
        if ($student_no === null || (is_array($student_no) && count($student_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_no when calling apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet'
            );
        }

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2SarSarTrialProgramsByStudentStudentNoTermIdGet'
            );
        }



        $resourcePath = '/api/v2/sar/SarTrialPrograms/by-student/{studentNo}/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($student_no !== null) {
            $resourcePath = str_replace(
                '{' . 'studentNo' . '}',
                ObjectSerializer::toPathValue($student_no),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet
     *
     * Count of all Enrollments through SAR
     *
     * @param  int $main_term_id  (required)
     * @param  int $kcc_term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet($main_term_id, $kcc_term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet'][0])
    {
        $this->apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGetWithHttpInfo($main_term_id, $kcc_term_id, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGetWithHttpInfo
     *
     * Count of all Enrollments through SAR
     *
     * @param  int $main_term_id  (required)
     * @param  int $kcc_term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGetWithHttpInfo($main_term_id, $kcc_term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGetRequest($main_term_id, $kcc_term_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGetAsync
     *
     * Count of all Enrollments through SAR
     *
     * @param  int $main_term_id  (required)
     * @param  int $kcc_term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGetAsync($main_term_id, $kcc_term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet'][0])
    {
        return $this->apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGetAsyncWithHttpInfo($main_term_id, $kcc_term_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGetAsyncWithHttpInfo
     *
     * Count of all Enrollments through SAR
     *
     * @param  int $main_term_id  (required)
     * @param  int $kcc_term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGetAsyncWithHttpInfo($main_term_id, $kcc_term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGetRequest($main_term_id, $kcc_term_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet'
     *
     * @param  int $main_term_id  (required)
     * @param  int $kcc_term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGetRequest($main_term_id, $kcc_term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet'][0])
    {

        // verify the required parameter 'main_term_id' is set
        if ($main_term_id === null || (is_array($main_term_id) && count($main_term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $main_term_id when calling apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet'
            );
        }

        // verify the required parameter 'kcc_term_id' is set
        if ($kcc_term_id === null || (is_array($kcc_term_id) && count($kcc_term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kcc_term_id when calling apiV2SarSarTrialProgramsCountAllEnrolledThroughSarMainTermIdKccTermIdGet'
            );
        }


        $resourcePath = '/api/v2/sar/SarTrialPrograms/count-all-enrolled-through-sar/{mainTermId}/{kccTermId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($main_term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mainTermId' . '}',
                ObjectSerializer::toPathValue($main_term_id),
                $resourcePath
            );
        }
        // path params
        if ($kcc_term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kccTermId' . '}',
                ObjectSerializer::toPathValue($kcc_term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet
     *
     * Count all SAR registrations by term
     *
     * @param  int $main_term_id  (required)
     * @param  int $kcc_term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet($main_term_id, $kcc_term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet'][0])
    {
        $this->apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGetWithHttpInfo($main_term_id, $kcc_term_id, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGetWithHttpInfo
     *
     * Count all SAR registrations by term
     *
     * @param  int $main_term_id  (required)
     * @param  int $kcc_term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGetWithHttpInfo($main_term_id, $kcc_term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGetRequest($main_term_id, $kcc_term_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGetAsync
     *
     * Count all SAR registrations by term
     *
     * @param  int $main_term_id  (required)
     * @param  int $kcc_term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGetAsync($main_term_id, $kcc_term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet'][0])
    {
        return $this->apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGetAsyncWithHttpInfo($main_term_id, $kcc_term_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGetAsyncWithHttpInfo
     *
     * Count all SAR registrations by term
     *
     * @param  int $main_term_id  (required)
     * @param  int $kcc_term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGetAsyncWithHttpInfo($main_term_id, $kcc_term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGetRequest($main_term_id, $kcc_term_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet'
     *
     * @param  int $main_term_id  (required)
     * @param  int $kcc_term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGetRequest($main_term_id, $kcc_term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet'][0])
    {

        // verify the required parameter 'main_term_id' is set
        if ($main_term_id === null || (is_array($main_term_id) && count($main_term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $main_term_id when calling apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet'
            );
        }

        // verify the required parameter 'kcc_term_id' is set
        if ($kcc_term_id === null || (is_array($kcc_term_id) && count($kcc_term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kcc_term_id when calling apiV2SarSarTrialProgramsCountAllSarRegsMainTermIdKccTermIdGet'
            );
        }


        $resourcePath = '/api/v2/sar/SarTrialPrograms/countAllSarRegs/{mainTermId}/{kccTermId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($main_term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mainTermId' . '}',
                ObjectSerializer::toPathValue($main_term_id),
                $resourcePath
            );
        }
        // path params
        if ($kcc_term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kccTermId' . '}',
                ObjectSerializer::toPathValue($kcc_term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsDatatablePagedGet
     *
     * @param  int $row row (optional)
     * @param  int $page_size page_size (optional)
     * @param  string $keyword keyword (optional)
     * @param  int $campus_id campus_id (optional)
     * @param  int $term_id term_id (optional)
     * @param  int $program_id program_id (optional)
     * @param  int $major_id major_id (optional)
     * @param  string $status status (optional)
     * @param  string $transaction_type transaction_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsDatatablePagedGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsDatatablePagedGet($row = null, $page_size = null, $keyword = null, $campus_id = null, $term_id = null, $program_id = null, $major_id = null, $status = null, $transaction_type = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsDatatablePagedGet'][0])
    {
        $this->apiV2SarSarTrialProgramsDatatablePagedGetWithHttpInfo($row, $page_size, $keyword, $campus_id, $term_id, $program_id, $major_id, $status, $transaction_type, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsDatatablePagedGetWithHttpInfo
     *
     * @param  int $row (optional)
     * @param  int $page_size (optional)
     * @param  string $keyword (optional)
     * @param  int $campus_id (optional)
     * @param  int $term_id (optional)
     * @param  int $program_id (optional)
     * @param  int $major_id (optional)
     * @param  string $status (optional)
     * @param  string $transaction_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsDatatablePagedGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsDatatablePagedGetWithHttpInfo($row = null, $page_size = null, $keyword = null, $campus_id = null, $term_id = null, $program_id = null, $major_id = null, $status = null, $transaction_type = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsDatatablePagedGet'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsDatatablePagedGetRequest($row, $page_size, $keyword, $campus_id, $term_id, $program_id, $major_id, $status, $transaction_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsDatatablePagedGetAsync
     *
     * @param  int $row (optional)
     * @param  int $page_size (optional)
     * @param  string $keyword (optional)
     * @param  int $campus_id (optional)
     * @param  int $term_id (optional)
     * @param  int $program_id (optional)
     * @param  int $major_id (optional)
     * @param  string $status (optional)
     * @param  string $transaction_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsDatatablePagedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsDatatablePagedGetAsync($row = null, $page_size = null, $keyword = null, $campus_id = null, $term_id = null, $program_id = null, $major_id = null, $status = null, $transaction_type = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsDatatablePagedGet'][0])
    {
        return $this->apiV2SarSarTrialProgramsDatatablePagedGetAsyncWithHttpInfo($row, $page_size, $keyword, $campus_id, $term_id, $program_id, $major_id, $status, $transaction_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsDatatablePagedGetAsyncWithHttpInfo
     *
     * @param  int $row (optional)
     * @param  int $page_size (optional)
     * @param  string $keyword (optional)
     * @param  int $campus_id (optional)
     * @param  int $term_id (optional)
     * @param  int $program_id (optional)
     * @param  int $major_id (optional)
     * @param  string $status (optional)
     * @param  string $transaction_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsDatatablePagedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsDatatablePagedGetAsyncWithHttpInfo($row = null, $page_size = null, $keyword = null, $campus_id = null, $term_id = null, $program_id = null, $major_id = null, $status = null, $transaction_type = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsDatatablePagedGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsDatatablePagedGetRequest($row, $page_size, $keyword, $campus_id, $term_id, $program_id, $major_id, $status, $transaction_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsDatatablePagedGet'
     *
     * @param  int $row (optional)
     * @param  int $page_size (optional)
     * @param  string $keyword (optional)
     * @param  int $campus_id (optional)
     * @param  int $term_id (optional)
     * @param  int $program_id (optional)
     * @param  int $major_id (optional)
     * @param  string $status (optional)
     * @param  string $transaction_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsDatatablePagedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsDatatablePagedGetRequest($row = null, $page_size = null, $keyword = null, $campus_id = null, $term_id = null, $program_id = null, $major_id = null, $status = null, $transaction_type = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsDatatablePagedGet'][0])
    {











        $resourcePath = '/api/v2/sar/SarTrialPrograms/datatable/paged';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $row,
            'Row', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'PageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keyword,
            'Keyword', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campus_id,
            'CampusId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $term_id,
            'TermId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $program_id,
            'ProgramId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $major_id,
            'MajorId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'Status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_type,
            'TransactionType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdCancelPut
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdCancelPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsIdCancelPut($id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdCancelPut'][0])
    {
        $this->apiV2SarSarTrialProgramsIdCancelPutWithHttpInfo($id, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdCancelPutWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdCancelPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsIdCancelPutWithHttpInfo($id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdCancelPut'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsIdCancelPutRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdCancelPutAsync
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdCancelPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdCancelPutAsync($id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdCancelPut'][0])
    {
        return $this->apiV2SarSarTrialProgramsIdCancelPutAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdCancelPutAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdCancelPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdCancelPutAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdCancelPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsIdCancelPutRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsIdCancelPut'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdCancelPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsIdCancelPutRequest($id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdCancelPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2SarSarTrialProgramsIdCancelPut'
            );
        }


        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdEnroll2UserIdPost
     *
     * @param  int $id id (required)
     * @param  string $user_id user_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdEnroll2UserIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsIdEnroll2UserIdPost($id, $user_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdEnroll2UserIdPost'][0])
    {
        $this->apiV2SarSarTrialProgramsIdEnroll2UserIdPostWithHttpInfo($id, $user_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdEnroll2UserIdPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $user_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdEnroll2UserIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsIdEnroll2UserIdPostWithHttpInfo($id, $user_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdEnroll2UserIdPost'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsIdEnroll2UserIdPostRequest($id, $user_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdEnroll2UserIdPostAsync
     *
     * @param  int $id (required)
     * @param  string $user_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdEnroll2UserIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdEnroll2UserIdPostAsync($id, $user_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdEnroll2UserIdPost'][0])
    {
        return $this->apiV2SarSarTrialProgramsIdEnroll2UserIdPostAsyncWithHttpInfo($id, $user_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdEnroll2UserIdPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $user_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdEnroll2UserIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdEnroll2UserIdPostAsyncWithHttpInfo($id, $user_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdEnroll2UserIdPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsIdEnroll2UserIdPostRequest($id, $user_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsIdEnroll2UserIdPost'
     *
     * @param  int $id (required)
     * @param  string $user_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdEnroll2UserIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsIdEnroll2UserIdPostRequest($id, $user_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdEnroll2UserIdPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2SarSarTrialProgramsIdEnroll2UserIdPost'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling apiV2SarSarTrialProgramsIdEnroll2UserIdPost'
            );
        }



        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}/enroll2/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdEnrollPost
     *
     * Enroll the student using TrialProgramId
     *
     * @param  int $id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdEnrollPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsIdEnrollPost($id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdEnrollPost'][0])
    {
        $this->apiV2SarSarTrialProgramsIdEnrollPostWithHttpInfo($id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdEnrollPostWithHttpInfo
     *
     * Enroll the student using TrialProgramId
     *
     * @param  int $id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdEnrollPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsIdEnrollPostWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdEnrollPost'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsIdEnrollPostRequest($id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdEnrollPostAsync
     *
     * Enroll the student using TrialProgramId
     *
     * @param  int $id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdEnrollPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdEnrollPostAsync($id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdEnrollPost'][0])
    {
        return $this->apiV2SarSarTrialProgramsIdEnrollPostAsyncWithHttpInfo($id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdEnrollPostAsyncWithHttpInfo
     *
     * Enroll the student using TrialProgramId
     *
     * @param  int $id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdEnrollPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdEnrollPostAsyncWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdEnrollPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsIdEnrollPostRequest($id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsIdEnrollPost'
     *
     * @param  int $id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdEnrollPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsIdEnrollPostRequest($id, $tenant_id = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdEnrollPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2SarSarTrialProgramsIdEnrollPost'
            );
        }



        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}/enroll';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileClassSectionPut
     *
     * @param  int $id id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileClassSectionPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsIdProfileClassSectionPut($id, $tenant_id = null, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileClassSectionPut'][0])
    {
        $this->apiV2SarSarTrialProgramsIdProfileClassSectionPutWithHttpInfo($id, $tenant_id, $sar_profile_update_input, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileClassSectionPutWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileClassSectionPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsIdProfileClassSectionPutWithHttpInfo($id, $tenant_id = null, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileClassSectionPut'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsIdProfileClassSectionPutRequest($id, $tenant_id, $sar_profile_update_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileClassSectionPutAsync
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileClassSectionPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileClassSectionPutAsync($id, $tenant_id = null, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileClassSectionPut'][0])
    {
        return $this->apiV2SarSarTrialProgramsIdProfileClassSectionPutAsyncWithHttpInfo($id, $tenant_id, $sar_profile_update_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileClassSectionPutAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileClassSectionPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileClassSectionPutAsyncWithHttpInfo($id, $tenant_id = null, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileClassSectionPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsIdProfileClassSectionPutRequest($id, $tenant_id, $sar_profile_update_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsIdProfileClassSectionPut'
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileClassSectionPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsIdProfileClassSectionPutRequest($id, $tenant_id = null, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileClassSectionPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2SarSarTrialProgramsIdProfileClassSectionPut'
            );
        }




        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}/profile/class-section';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sar_profile_update_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sar_profile_update_input));
            } else {
                $httpBody = $sar_profile_update_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileCurriculumPut
     *
     * @param  int $id id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileCurriculumPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsIdProfileCurriculumPut($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileCurriculumPut'][0])
    {
        $this->apiV2SarSarTrialProgramsIdProfileCurriculumPutWithHttpInfo($id, $sar_profile_update_input, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileCurriculumPutWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileCurriculumPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsIdProfileCurriculumPutWithHttpInfo($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileCurriculumPut'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsIdProfileCurriculumPutRequest($id, $sar_profile_update_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileCurriculumPutAsync
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileCurriculumPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileCurriculumPutAsync($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileCurriculumPut'][0])
    {
        return $this->apiV2SarSarTrialProgramsIdProfileCurriculumPutAsyncWithHttpInfo($id, $sar_profile_update_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileCurriculumPutAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileCurriculumPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileCurriculumPutAsyncWithHttpInfo($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileCurriculumPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsIdProfileCurriculumPutRequest($id, $sar_profile_update_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsIdProfileCurriculumPut'
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileCurriculumPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsIdProfileCurriculumPutRequest($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileCurriculumPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2SarSarTrialProgramsIdProfileCurriculumPut'
            );
        }



        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}/profile/curriculum';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sar_profile_update_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sar_profile_update_input));
            } else {
                $httpBody = $sar_profile_update_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileGrantTemplatePut
     *
     * @param  int $id id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileGrantTemplatePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsIdProfileGrantTemplatePut($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileGrantTemplatePut'][0])
    {
        $this->apiV2SarSarTrialProgramsIdProfileGrantTemplatePutWithHttpInfo($id, $sar_profile_update_input, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileGrantTemplatePutWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileGrantTemplatePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsIdProfileGrantTemplatePutWithHttpInfo($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileGrantTemplatePut'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsIdProfileGrantTemplatePutRequest($id, $sar_profile_update_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileGrantTemplatePutAsync
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileGrantTemplatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileGrantTemplatePutAsync($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileGrantTemplatePut'][0])
    {
        return $this->apiV2SarSarTrialProgramsIdProfileGrantTemplatePutAsyncWithHttpInfo($id, $sar_profile_update_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileGrantTemplatePutAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileGrantTemplatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileGrantTemplatePutAsyncWithHttpInfo($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileGrantTemplatePut'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsIdProfileGrantTemplatePutRequest($id, $sar_profile_update_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsIdProfileGrantTemplatePut'
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileGrantTemplatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsIdProfileGrantTemplatePutRequest($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileGrantTemplatePut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2SarSarTrialProgramsIdProfileGrantTemplatePut'
            );
        }



        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}/profile/grant-template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sar_profile_update_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sar_profile_update_input));
            } else {
                $httpBody = $sar_profile_update_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut
     *
     * @param  int $id id (required)
     * @param  int $max_load_units max_load_units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut($id, $max_load_units, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut'][0])
    {
        $this->apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPutWithHttpInfo($id, $max_load_units, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPutWithHttpInfo
     *
     * @param  int $id (required)
     * @param  int $max_load_units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPutWithHttpInfo($id, $max_load_units, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPutRequest($id, $max_load_units, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPutAsync
     *
     * @param  int $id (required)
     * @param  int $max_load_units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPutAsync($id, $max_load_units, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut'][0])
    {
        return $this->apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPutAsyncWithHttpInfo($id, $max_load_units, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPutAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  int $max_load_units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPutAsyncWithHttpInfo($id, $max_load_units, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPutRequest($id, $max_load_units, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut'
     *
     * @param  int $id (required)
     * @param  int $max_load_units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPutRequest($id, $max_load_units, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut'
            );
        }

        // verify the required parameter 'max_load_units' is set
        if ($max_load_units === null || (is_array($max_load_units) && count($max_load_units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $max_load_units when calling apiV2SarSarTrialProgramsIdProfileMaxLoadUnitMaxLoadUnitsPut'
            );
        }


        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}/profile/max-load-unit/{maxLoadUnits}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($max_load_units !== null) {
            $resourcePath = str_replace(
                '{' . 'maxLoadUnits' . '}',
                ObjectSerializer::toPathValue($max_load_units),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileProgramPut
     *
     * @param  int $id id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileProgramPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsIdProfileProgramPut($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileProgramPut'][0])
    {
        $this->apiV2SarSarTrialProgramsIdProfileProgramPutWithHttpInfo($id, $sar_profile_update_input, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileProgramPutWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileProgramPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsIdProfileProgramPutWithHttpInfo($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileProgramPut'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsIdProfileProgramPutRequest($id, $sar_profile_update_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileProgramPutAsync
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileProgramPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileProgramPutAsync($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileProgramPut'][0])
    {
        return $this->apiV2SarSarTrialProgramsIdProfileProgramPutAsyncWithHttpInfo($id, $sar_profile_update_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileProgramPutAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileProgramPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileProgramPutAsyncWithHttpInfo($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileProgramPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsIdProfileProgramPutRequest($id, $sar_profile_update_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsIdProfileProgramPut'
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileProgramPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsIdProfileProgramPutRequest($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileProgramPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2SarSarTrialProgramsIdProfileProgramPut'
            );
        }



        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}/profile/program';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sar_profile_update_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sar_profile_update_input));
            } else {
                $httpBody = $sar_profile_update_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut
     *
     * @param  int $id id (required)
     * @param  bool $value value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut($id, $value, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut'][0])
    {
        $this->apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePutWithHttpInfo($id, $value, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePutWithHttpInfo
     *
     * @param  int $id (required)
     * @param  bool $value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePutWithHttpInfo($id, $value, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePutRequest($id, $value, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePutAsync
     *
     * @param  int $id (required)
     * @param  bool $value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePutAsync($id, $value, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut'][0])
    {
        return $this->apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePutAsyncWithHttpInfo($id, $value, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePutAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  bool $value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePutAsyncWithHttpInfo($id, $value, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePutRequest($id, $value, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut'
     *
     * @param  int $id (required)
     * @param  bool $value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePutRequest($id, $value, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut'
            );
        }

        // verify the required parameter 'value' is set
        if ($value === null || (is_array($value) && count($value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling apiV2SarSarTrialProgramsIdProfileResidencyOnlyValuePut'
            );
        }


        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}/profile/residency-only/{value}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($value !== null) {
            $resourcePath = str_replace(
                '{' . 'value' . '}',
                ObjectSerializer::toPathValue($value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileSchoProviderPut
     *
     * @param  int $id id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileSchoProviderPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsIdProfileSchoProviderPut($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileSchoProviderPut'][0])
    {
        $this->apiV2SarSarTrialProgramsIdProfileSchoProviderPutWithHttpInfo($id, $sar_profile_update_input, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileSchoProviderPutWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileSchoProviderPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsIdProfileSchoProviderPutWithHttpInfo($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileSchoProviderPut'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsIdProfileSchoProviderPutRequest($id, $sar_profile_update_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileSchoProviderPutAsync
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileSchoProviderPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileSchoProviderPutAsync($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileSchoProviderPut'][0])
    {
        return $this->apiV2SarSarTrialProgramsIdProfileSchoProviderPutAsyncWithHttpInfo($id, $sar_profile_update_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileSchoProviderPutAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileSchoProviderPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileSchoProviderPutAsyncWithHttpInfo($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileSchoProviderPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsIdProfileSchoProviderPutRequest($id, $sar_profile_update_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsIdProfileSchoProviderPut'
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileSchoProviderPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsIdProfileSchoProviderPutRequest($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileSchoProviderPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2SarSarTrialProgramsIdProfileSchoProviderPut'
            );
        }



        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}/profile/scho-provider';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sar_profile_update_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sar_profile_update_input));
            } else {
                $httpBody = $sar_profile_update_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileTableOfFeePut
     *
     * @param  int $id id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileTableOfFeePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsIdProfileTableOfFeePut($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileTableOfFeePut'][0])
    {
        $this->apiV2SarSarTrialProgramsIdProfileTableOfFeePutWithHttpInfo($id, $sar_profile_update_input, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileTableOfFeePutWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileTableOfFeePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsIdProfileTableOfFeePutWithHttpInfo($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileTableOfFeePut'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsIdProfileTableOfFeePutRequest($id, $sar_profile_update_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileTableOfFeePutAsync
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileTableOfFeePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileTableOfFeePutAsync($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileTableOfFeePut'][0])
    {
        return $this->apiV2SarSarTrialProgramsIdProfileTableOfFeePutAsyncWithHttpInfo($id, $sar_profile_update_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileTableOfFeePutAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileTableOfFeePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileTableOfFeePutAsyncWithHttpInfo($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileTableOfFeePut'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsIdProfileTableOfFeePutRequest($id, $sar_profile_update_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsIdProfileTableOfFeePut'
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileTableOfFeePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsIdProfileTableOfFeePutRequest($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileTableOfFeePut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2SarSarTrialProgramsIdProfileTableOfFeePut'
            );
        }



        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}/profile/table-of-fee';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sar_profile_update_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sar_profile_update_input));
            } else {
                $httpBody = $sar_profile_update_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileYearLevelPut
     *
     * @param  int $id id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileYearLevelPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsIdProfileYearLevelPut($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileYearLevelPut'][0])
    {
        $this->apiV2SarSarTrialProgramsIdProfileYearLevelPutWithHttpInfo($id, $sar_profile_update_input, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileYearLevelPutWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileYearLevelPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsIdProfileYearLevelPutWithHttpInfo($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileYearLevelPut'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsIdProfileYearLevelPutRequest($id, $sar_profile_update_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileYearLevelPutAsync
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileYearLevelPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileYearLevelPutAsync($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileYearLevelPut'][0])
    {
        return $this->apiV2SarSarTrialProgramsIdProfileYearLevelPutAsyncWithHttpInfo($id, $sar_profile_update_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdProfileYearLevelPutAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileYearLevelPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdProfileYearLevelPutAsyncWithHttpInfo($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileYearLevelPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsIdProfileYearLevelPutRequest($id, $sar_profile_update_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsIdProfileYearLevelPut'
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SarProfileUpdateInput $sar_profile_update_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdProfileYearLevelPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsIdProfileYearLevelPutRequest($id, $sar_profile_update_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdProfileYearLevelPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2SarSarTrialProgramsIdProfileYearLevelPut'
            );
        }



        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}/profile/year-level';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sar_profile_update_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sar_profile_update_input));
            } else {
                $httpBody = $sar_profile_update_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdSetTransactionTypePost
     *
     * @param  int $id id (required)
     * @param  \OpenAPI\Client\Model\SetTrialProgramTransTypeInput $set_trial_program_trans_type_input set_trial_program_trans_type_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdSetTransactionTypePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsIdSetTransactionTypePost($id, $set_trial_program_trans_type_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdSetTransactionTypePost'][0])
    {
        $this->apiV2SarSarTrialProgramsIdSetTransactionTypePostWithHttpInfo($id, $set_trial_program_trans_type_input, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdSetTransactionTypePostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SetTrialProgramTransTypeInput $set_trial_program_trans_type_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdSetTransactionTypePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsIdSetTransactionTypePostWithHttpInfo($id, $set_trial_program_trans_type_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdSetTransactionTypePost'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsIdSetTransactionTypePostRequest($id, $set_trial_program_trans_type_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdSetTransactionTypePostAsync
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SetTrialProgramTransTypeInput $set_trial_program_trans_type_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdSetTransactionTypePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdSetTransactionTypePostAsync($id, $set_trial_program_trans_type_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdSetTransactionTypePost'][0])
    {
        return $this->apiV2SarSarTrialProgramsIdSetTransactionTypePostAsyncWithHttpInfo($id, $set_trial_program_trans_type_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdSetTransactionTypePostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SetTrialProgramTransTypeInput $set_trial_program_trans_type_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdSetTransactionTypePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdSetTransactionTypePostAsyncWithHttpInfo($id, $set_trial_program_trans_type_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdSetTransactionTypePost'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsIdSetTransactionTypePostRequest($id, $set_trial_program_trans_type_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsIdSetTransactionTypePost'
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\SetTrialProgramTransTypeInput $set_trial_program_trans_type_input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdSetTransactionTypePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsIdSetTransactionTypePostRequest($id, $set_trial_program_trans_type_input = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdSetTransactionTypePost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2SarSarTrialProgramsIdSetTransactionTypePost'
            );
        }



        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}/set-transaction-type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($set_trial_program_trans_type_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($set_trial_program_trans_type_input));
            } else {
                $httpBody = $set_trial_program_trans_type_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdSubmitPut
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdSubmitPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsIdSubmitPut($id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdSubmitPut'][0])
    {
        $this->apiV2SarSarTrialProgramsIdSubmitPutWithHttpInfo($id, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdSubmitPutWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdSubmitPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsIdSubmitPutWithHttpInfo($id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdSubmitPut'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsIdSubmitPutRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdSubmitPutAsync
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdSubmitPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdSubmitPutAsync($id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdSubmitPut'][0])
    {
        return $this->apiV2SarSarTrialProgramsIdSubmitPutAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsIdSubmitPutAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdSubmitPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsIdSubmitPutAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdSubmitPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsIdSubmitPutRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsIdSubmitPut'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsIdSubmitPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsIdSubmitPutRequest($id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsIdSubmitPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2SarSarTrialProgramsIdSubmitPut'
            );
        }


        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}/submit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsPost
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  \OpenAPI\Client\Model\TrialProgramDto $trial_program_dto trial_program_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsPost($tenant_id = null, $trial_program_dto = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsPost'][0])
    {
        $this->apiV2SarSarTrialProgramsPostWithHttpInfo($tenant_id, $trial_program_dto, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\TrialProgramDto $trial_program_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsPostWithHttpInfo($tenant_id = null, $trial_program_dto = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsPost'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsPostRequest($tenant_id, $trial_program_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsPostAsync
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\TrialProgramDto $trial_program_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsPostAsync($tenant_id = null, $trial_program_dto = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsPost'][0])
    {
        return $this->apiV2SarSarTrialProgramsPostAsyncWithHttpInfo($tenant_id, $trial_program_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsPostAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\TrialProgramDto $trial_program_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsPostAsyncWithHttpInfo($tenant_id = null, $trial_program_dto = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsPostRequest($tenant_id, $trial_program_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsPost'
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\TrialProgramDto $trial_program_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsPostRequest($tenant_id = null, $trial_program_dto = null, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsPost'][0])
    {




        $resourcePath = '/api/v2/sar/SarTrialPrograms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($trial_program_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($trial_program_dto));
            } else {
                $httpBody = $trial_program_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsSyncPatch
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsSyncPatch(string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncPatch'][0])
    {
        $this->apiV2SarSarTrialProgramsSyncPatchWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsSyncPatchWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsSyncPatchWithHttpInfo(string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncPatch'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsSyncPatchRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsSyncPatchAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsSyncPatchAsync(string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncPatch'][0])
    {
        return $this->apiV2SarSarTrialProgramsSyncPatchAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsSyncPatchAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsSyncPatchAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncPatch'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsSyncPatchRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsSyncPatch'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsSyncPatchRequest(string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncPatch'][0])
    {


        $resourcePath = '/api/v2/sar/SarTrialPrograms/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsSyncTpEnrollmentPatch
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsSyncTpEnrollmentPatch(string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentPatch'][0])
    {
        $this->apiV2SarSarTrialProgramsSyncTpEnrollmentPatchWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsSyncTpEnrollmentPatchWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsSyncTpEnrollmentPatchWithHttpInfo(string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentPatch'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsSyncTpEnrollmentPatchRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsSyncTpEnrollmentPatchAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsSyncTpEnrollmentPatchAsync(string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentPatch'][0])
    {
        return $this->apiV2SarSarTrialProgramsSyncTpEnrollmentPatchAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsSyncTpEnrollmentPatchAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsSyncTpEnrollmentPatchAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentPatch'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsSyncTpEnrollmentPatchRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsSyncTpEnrollmentPatch'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsSyncTpEnrollmentPatchRequest(string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentPatch'][0])
    {


        $resourcePath = '/api/v2/sar/SarTrialPrograms/sync-tp-enrollment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch
     *
     * @param  int $term_id term_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch($term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch'][0])
    {
        $this->apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatchWithHttpInfo($term_id, $contentType);
    }

    /**
     * Operation apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatchWithHttpInfo
     *
     * @param  int $term_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatchWithHttpInfo($term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch'][0])
    {
        $request = $this->apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatchRequest($term_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatchAsync
     *
     * @param  int $term_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatchAsync($term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch'][0])
    {
        return $this->apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatchAsyncWithHttpInfo($term_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatchAsyncWithHttpInfo
     *
     * @param  int $term_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatchAsyncWithHttpInfo($term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch'][0])
    {
        $returnType = '';
        $request = $this->apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatchRequest($term_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch'
     *
     * @param  int $term_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatchRequest($term_id, string $contentType = self::contentTypes['apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch'][0])
    {

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2SarSarTrialProgramsSyncTpEnrollmentTermIdPatch'
            );
        }


        $resourcePath = '/api/v2/sar/SarTrialPrograms/sync-tp-enrollment/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTrialProgram
     *
     * @param  int $id id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrialProgram'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getTrialProgram($id, $tenant_id = null, string $contentType = self::contentTypes['getTrialProgram'][0])
    {
        $this->getTrialProgramWithHttpInfo($id, $tenant_id, $contentType);
    }

    /**
     * Operation getTrialProgramWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrialProgram'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTrialProgramWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['getTrialProgram'][0])
    {
        $request = $this->getTrialProgramRequest($id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getTrialProgramAsync
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrialProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrialProgramAsync($id, $tenant_id = null, string $contentType = self::contentTypes['getTrialProgram'][0])
    {
        return $this->getTrialProgramAsyncWithHttpInfo($id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTrialProgramAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrialProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrialProgramAsyncWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['getTrialProgram'][0])
    {
        $returnType = '';
        $request = $this->getTrialProgramRequest($id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTrialProgram'
     *
     * @param  int $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrialProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTrialProgramRequest($id, $tenant_id = null, string $contentType = self::contentTypes['getTrialProgram'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTrialProgram'
            );
        }



        $resourcePath = '/api/v2/sar/SarTrialPrograms/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
