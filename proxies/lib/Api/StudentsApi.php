<?php
/**
 * StudentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * StudentsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StudentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2StudentsAddStudentToPortalPost' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2StudentsAdmitStudentNoValidationPost' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2StudentsAdmitStudentPost' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2StudentsCampusCampusIdGetbyemailEmailGet' => [
            'application/json',
        ],
        'apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet' => [
            'application/json',
        ],
        'apiV2StudentsFilteredbystatusGet' => [
            'application/json',
        ],
        'apiV2StudentsGeneratenewidGet' => [
            'application/json',
        ],
        'apiV2StudentsGetemailpasswordGet' => [
            'application/json',
        ],
        'apiV2StudentsGetstudentidGet' => [
            'application/json',
        ],
        'apiV2StudentsMismatchedGet' => [
            'application/json',
        ],
        'apiV2StudentsNoValidationPost' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2StudentsPost' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2StudentsPreregStatuscountStatusPolicyIdGet' => [
            'application/json',
        ],
        'apiV2StudentsRequestemailupdatePut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2StudentsStudentIdDatacompletenessGet' => [
            'application/json',
        ],
        'apiV2StudentsStudentIdPut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2StudentsValidateregistrationGet' => [
            'application/json',
        ],
        'apiV2StudentsVerifyineslocalGet' => [
            'application/json',
        ],
        'apiV2StudentsWithauthPost' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'getStudent' => [
            'application/json',
        ],
        'getStudentByIdAndTenant' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2StudentsAddStudentToPortalPost
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAddStudentToPortalPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsAddStudentToPortalPost($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsAddStudentToPortalPost'][0])
    {
        $this->apiV2StudentsAddStudentToPortalPostWithHttpInfo($tenant_id, $student_dto, $contentType);
    }

    /**
     * Operation apiV2StudentsAddStudentToPortalPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAddStudentToPortalPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsAddStudentToPortalPostWithHttpInfo($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsAddStudentToPortalPost'][0])
    {
        $request = $this->apiV2StudentsAddStudentToPortalPostRequest($tenant_id, $student_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsAddStudentToPortalPostAsync
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAddStudentToPortalPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsAddStudentToPortalPostAsync($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsAddStudentToPortalPost'][0])
    {
        return $this->apiV2StudentsAddStudentToPortalPostAsyncWithHttpInfo($tenant_id, $student_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsAddStudentToPortalPostAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAddStudentToPortalPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsAddStudentToPortalPostAsyncWithHttpInfo($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsAddStudentToPortalPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsAddStudentToPortalPostRequest($tenant_id, $student_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsAddStudentToPortalPost'
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAddStudentToPortalPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsAddStudentToPortalPostRequest($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsAddStudentToPortalPost'][0])
    {




        $resourcePath = '/api/v2/Students/AddStudentToPortal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($student_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($student_dto));
            } else {
                $httpBody = $student_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsAdmitStudentNoValidationPost
     *
     * Approve student from econ. Validates if there are still slots
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  \OpenAPI\Client\Model\ApproveApplicantDto $approve_applicant_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAdmitStudentNoValidationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsAdmitStudentNoValidationPost($tenant_id = null, $approve_applicant_dto = null, string $contentType = self::contentTypes['apiV2StudentsAdmitStudentNoValidationPost'][0])
    {
        $this->apiV2StudentsAdmitStudentNoValidationPostWithHttpInfo($tenant_id, $approve_applicant_dto, $contentType);
    }

    /**
     * Operation apiV2StudentsAdmitStudentNoValidationPostWithHttpInfo
     *
     * Approve student from econ. Validates if there are still slots
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\ApproveApplicantDto $approve_applicant_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAdmitStudentNoValidationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsAdmitStudentNoValidationPostWithHttpInfo($tenant_id = null, $approve_applicant_dto = null, string $contentType = self::contentTypes['apiV2StudentsAdmitStudentNoValidationPost'][0])
    {
        $request = $this->apiV2StudentsAdmitStudentNoValidationPostRequest($tenant_id, $approve_applicant_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsAdmitStudentNoValidationPostAsync
     *
     * Approve student from econ. Validates if there are still slots
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\ApproveApplicantDto $approve_applicant_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAdmitStudentNoValidationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsAdmitStudentNoValidationPostAsync($tenant_id = null, $approve_applicant_dto = null, string $contentType = self::contentTypes['apiV2StudentsAdmitStudentNoValidationPost'][0])
    {
        return $this->apiV2StudentsAdmitStudentNoValidationPostAsyncWithHttpInfo($tenant_id, $approve_applicant_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsAdmitStudentNoValidationPostAsyncWithHttpInfo
     *
     * Approve student from econ. Validates if there are still slots
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\ApproveApplicantDto $approve_applicant_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAdmitStudentNoValidationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsAdmitStudentNoValidationPostAsyncWithHttpInfo($tenant_id = null, $approve_applicant_dto = null, string $contentType = self::contentTypes['apiV2StudentsAdmitStudentNoValidationPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsAdmitStudentNoValidationPostRequest($tenant_id, $approve_applicant_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsAdmitStudentNoValidationPost'
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\ApproveApplicantDto $approve_applicant_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAdmitStudentNoValidationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsAdmitStudentNoValidationPostRequest($tenant_id = null, $approve_applicant_dto = null, string $contentType = self::contentTypes['apiV2StudentsAdmitStudentNoValidationPost'][0])
    {




        $resourcePath = '/api/v2/Students/admit-student/no-validation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($approve_applicant_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($approve_applicant_dto));
            } else {
                $httpBody = $approve_applicant_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsAdmitStudentPost
     *
     * Approve student from econ. Validates if there are still slots
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  \OpenAPI\Client\Model\ApproveApplicantDto $approve_applicant_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAdmitStudentPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsAdmitStudentPost($tenant_id = null, $approve_applicant_dto = null, string $contentType = self::contentTypes['apiV2StudentsAdmitStudentPost'][0])
    {
        $this->apiV2StudentsAdmitStudentPostWithHttpInfo($tenant_id, $approve_applicant_dto, $contentType);
    }

    /**
     * Operation apiV2StudentsAdmitStudentPostWithHttpInfo
     *
     * Approve student from econ. Validates if there are still slots
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  \OpenAPI\Client\Model\ApproveApplicantDto $approve_applicant_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAdmitStudentPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsAdmitStudentPostWithHttpInfo($tenant_id = null, $approve_applicant_dto = null, string $contentType = self::contentTypes['apiV2StudentsAdmitStudentPost'][0])
    {
        $request = $this->apiV2StudentsAdmitStudentPostRequest($tenant_id, $approve_applicant_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsAdmitStudentPostAsync
     *
     * Approve student from econ. Validates if there are still slots
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  \OpenAPI\Client\Model\ApproveApplicantDto $approve_applicant_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAdmitStudentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsAdmitStudentPostAsync($tenant_id = null, $approve_applicant_dto = null, string $contentType = self::contentTypes['apiV2StudentsAdmitStudentPost'][0])
    {
        return $this->apiV2StudentsAdmitStudentPostAsyncWithHttpInfo($tenant_id, $approve_applicant_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsAdmitStudentPostAsyncWithHttpInfo
     *
     * Approve student from econ. Validates if there are still slots
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  \OpenAPI\Client\Model\ApproveApplicantDto $approve_applicant_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAdmitStudentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsAdmitStudentPostAsyncWithHttpInfo($tenant_id = null, $approve_applicant_dto = null, string $contentType = self::contentTypes['apiV2StudentsAdmitStudentPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsAdmitStudentPostRequest($tenant_id, $approve_applicant_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsAdmitStudentPost'
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  \OpenAPI\Client\Model\ApproveApplicantDto $approve_applicant_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsAdmitStudentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsAdmitStudentPostRequest($tenant_id = null, $approve_applicant_dto = null, string $contentType = self::contentTypes['apiV2StudentsAdmitStudentPost'][0])
    {




        $resourcePath = '/api/v2/Students/admit-student';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($approve_applicant_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($approve_applicant_dto));
            } else {
                $httpBody = $approve_applicant_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsCampusCampusIdGetbyemailEmailGet
     *
     * @param  string $email email (required)
     * @param  string $campus_id campus_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsCampusCampusIdGetbyemailEmailGet($email, $campus_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailGet'][0])
    {
        $this->apiV2StudentsCampusCampusIdGetbyemailEmailGetWithHttpInfo($email, $campus_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2StudentsCampusCampusIdGetbyemailEmailGetWithHttpInfo
     *
     * @param  string $email (required)
     * @param  string $campus_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsCampusCampusIdGetbyemailEmailGetWithHttpInfo($email, $campus_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailGet'][0])
    {
        $request = $this->apiV2StudentsCampusCampusIdGetbyemailEmailGetRequest($email, $campus_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsCampusCampusIdGetbyemailEmailGetAsync
     *
     * @param  string $email (required)
     * @param  string $campus_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsCampusCampusIdGetbyemailEmailGetAsync($email, $campus_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailGet'][0])
    {
        return $this->apiV2StudentsCampusCampusIdGetbyemailEmailGetAsyncWithHttpInfo($email, $campus_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsCampusCampusIdGetbyemailEmailGetAsyncWithHttpInfo
     *
     * @param  string $email (required)
     * @param  string $campus_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsCampusCampusIdGetbyemailEmailGetAsyncWithHttpInfo($email, $campus_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsCampusCampusIdGetbyemailEmailGetRequest($email, $campus_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsCampusCampusIdGetbyemailEmailGet'
     *
     * @param  string $email (required)
     * @param  string $campus_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsCampusCampusIdGetbyemailEmailGetRequest($email, $campus_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailGet'][0])
    {

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling apiV2StudentsCampusCampusIdGetbyemailEmailGet'
            );
        }

        // verify the required parameter 'campus_id' is set
        if ($campus_id === null || (is_array($campus_id) && count($campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campus_id when calling apiV2StudentsCampusCampusIdGetbyemailEmailGet'
            );
        }



        $resourcePath = '/api/v2/Students/campus/{campusId}/getbyemail/{email}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                '{' . 'email' . '}',
                ObjectSerializer::toPathValue($email),
                $resourcePath
            );
        }
        // path params
        if ($campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campusId' . '}',
                ObjectSerializer::toPathValue($campus_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet
     *
     * @param  string $email email (required)
     * @param  int $term_id term_id (required)
     * @param  string $campus_id campus_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet($email, $term_id, $campus_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet'][0])
    {
        $this->apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGetWithHttpInfo($email, $term_id, $campus_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGetWithHttpInfo
     *
     * @param  string $email (required)
     * @param  int $term_id (required)
     * @param  string $campus_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGetWithHttpInfo($email, $term_id, $campus_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet'][0])
    {
        $request = $this->apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGetRequest($email, $term_id, $campus_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGetAsync
     *
     * @param  string $email (required)
     * @param  int $term_id (required)
     * @param  string $campus_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGetAsync($email, $term_id, $campus_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet'][0])
    {
        return $this->apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGetAsyncWithHttpInfo($email, $term_id, $campus_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGetAsyncWithHttpInfo
     *
     * @param  string $email (required)
     * @param  int $term_id (required)
     * @param  string $campus_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGetAsyncWithHttpInfo($email, $term_id, $campus_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGetRequest($email, $term_id, $campus_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet'
     *
     * @param  string $email (required)
     * @param  int $term_id (required)
     * @param  string $campus_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGetRequest($email, $term_id, $campus_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet'][0])
    {

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet'
            );
        }

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet'
            );
        }

        // verify the required parameter 'campus_id' is set
        if ($campus_id === null || (is_array($campus_id) && count($campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campus_id when calling apiV2StudentsCampusCampusIdGetbyemailEmailTermTermIdGet'
            );
        }



        $resourcePath = '/api/v2/Students/campus/{campusId}/getbyemail/{email}/term/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                '{' . 'email' . '}',
                ObjectSerializer::toPathValue($email),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }
        // path params
        if ($campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campusId' . '}',
                ObjectSerializer::toPathValue($campus_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsFilteredbystatusGet
     *
     * @param  int $campus_id campus_id (optional)
     * @param  int $college_id college_id (optional)
     * @param  int $program_id program_id (optional)
     * @param  string $status status (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsFilteredbystatusGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsFilteredbystatusGet($campus_id = null, $college_id = null, $program_id = null, $status = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsFilteredbystatusGet'][0])
    {
        $this->apiV2StudentsFilteredbystatusGetWithHttpInfo($campus_id, $college_id, $program_id, $status, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2StudentsFilteredbystatusGetWithHttpInfo
     *
     * @param  int $campus_id (optional)
     * @param  int $college_id (optional)
     * @param  int $program_id (optional)
     * @param  string $status (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsFilteredbystatusGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsFilteredbystatusGetWithHttpInfo($campus_id = null, $college_id = null, $program_id = null, $status = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsFilteredbystatusGet'][0])
    {
        $request = $this->apiV2StudentsFilteredbystatusGetRequest($campus_id, $college_id, $program_id, $status, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsFilteredbystatusGetAsync
     *
     * @param  int $campus_id (optional)
     * @param  int $college_id (optional)
     * @param  int $program_id (optional)
     * @param  string $status (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsFilteredbystatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsFilteredbystatusGetAsync($campus_id = null, $college_id = null, $program_id = null, $status = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsFilteredbystatusGet'][0])
    {
        return $this->apiV2StudentsFilteredbystatusGetAsyncWithHttpInfo($campus_id, $college_id, $program_id, $status, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsFilteredbystatusGetAsyncWithHttpInfo
     *
     * @param  int $campus_id (optional)
     * @param  int $college_id (optional)
     * @param  int $program_id (optional)
     * @param  string $status (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsFilteredbystatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsFilteredbystatusGetAsyncWithHttpInfo($campus_id = null, $college_id = null, $program_id = null, $status = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsFilteredbystatusGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsFilteredbystatusGetRequest($campus_id, $college_id, $program_id, $status, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsFilteredbystatusGet'
     *
     * @param  int $campus_id (optional)
     * @param  int $college_id (optional)
     * @param  int $program_id (optional)
     * @param  string $status (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsFilteredbystatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsFilteredbystatusGetRequest($campus_id = null, $college_id = null, $program_id = null, $status = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsFilteredbystatusGet'][0])
    {







        $resourcePath = '/api/v2/Students/filteredbystatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campus_id,
            'CampusId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $college_id,
            'CollegeId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $program_id,
            'ProgramId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'Status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsGeneratenewidGet
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGeneratenewidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsGeneratenewidGet(string $contentType = self::contentTypes['apiV2StudentsGeneratenewidGet'][0])
    {
        $this->apiV2StudentsGeneratenewidGetWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2StudentsGeneratenewidGetWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGeneratenewidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsGeneratenewidGetWithHttpInfo(string $contentType = self::contentTypes['apiV2StudentsGeneratenewidGet'][0])
    {
        $request = $this->apiV2StudentsGeneratenewidGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsGeneratenewidGetAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGeneratenewidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsGeneratenewidGetAsync(string $contentType = self::contentTypes['apiV2StudentsGeneratenewidGet'][0])
    {
        return $this->apiV2StudentsGeneratenewidGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsGeneratenewidGetAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGeneratenewidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsGeneratenewidGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2StudentsGeneratenewidGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsGeneratenewidGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsGeneratenewidGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGeneratenewidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsGeneratenewidGetRequest(string $contentType = self::contentTypes['apiV2StudentsGeneratenewidGet'][0])
    {


        $resourcePath = '/api/v2/Students/generatenewid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsGetemailpasswordGet
     *
     * @param  int $campus_id campus_id (optional)
     * @param  int $term_id term_id (optional)
     * @param  string $student_no student_no (optional)
     * @param  string $last_name last_name (optional)
     * @param  string $first_name first_name (optional)
     * @param  int $cor_number cor_number (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGetemailpasswordGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsGetemailpasswordGet($campus_id = null, $term_id = null, $student_no = null, $last_name = null, $first_name = null, $cor_number = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsGetemailpasswordGet'][0])
    {
        $this->apiV2StudentsGetemailpasswordGetWithHttpInfo($campus_id, $term_id, $student_no, $last_name, $first_name, $cor_number, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2StudentsGetemailpasswordGetWithHttpInfo
     *
     * @param  int $campus_id (optional)
     * @param  int $term_id (optional)
     * @param  string $student_no (optional)
     * @param  string $last_name (optional)
     * @param  string $first_name (optional)
     * @param  int $cor_number (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGetemailpasswordGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsGetemailpasswordGetWithHttpInfo($campus_id = null, $term_id = null, $student_no = null, $last_name = null, $first_name = null, $cor_number = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsGetemailpasswordGet'][0])
    {
        $request = $this->apiV2StudentsGetemailpasswordGetRequest($campus_id, $term_id, $student_no, $last_name, $first_name, $cor_number, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsGetemailpasswordGetAsync
     *
     * @param  int $campus_id (optional)
     * @param  int $term_id (optional)
     * @param  string $student_no (optional)
     * @param  string $last_name (optional)
     * @param  string $first_name (optional)
     * @param  int $cor_number (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGetemailpasswordGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsGetemailpasswordGetAsync($campus_id = null, $term_id = null, $student_no = null, $last_name = null, $first_name = null, $cor_number = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsGetemailpasswordGet'][0])
    {
        return $this->apiV2StudentsGetemailpasswordGetAsyncWithHttpInfo($campus_id, $term_id, $student_no, $last_name, $first_name, $cor_number, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsGetemailpasswordGetAsyncWithHttpInfo
     *
     * @param  int $campus_id (optional)
     * @param  int $term_id (optional)
     * @param  string $student_no (optional)
     * @param  string $last_name (optional)
     * @param  string $first_name (optional)
     * @param  int $cor_number (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGetemailpasswordGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsGetemailpasswordGetAsyncWithHttpInfo($campus_id = null, $term_id = null, $student_no = null, $last_name = null, $first_name = null, $cor_number = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsGetemailpasswordGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsGetemailpasswordGetRequest($campus_id, $term_id, $student_no, $last_name, $first_name, $cor_number, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsGetemailpasswordGet'
     *
     * @param  int $campus_id (optional)
     * @param  int $term_id (optional)
     * @param  string $student_no (optional)
     * @param  string $last_name (optional)
     * @param  string $first_name (optional)
     * @param  int $cor_number (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGetemailpasswordGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsGetemailpasswordGetRequest($campus_id = null, $term_id = null, $student_no = null, $last_name = null, $first_name = null, $cor_number = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsGetemailpasswordGet'][0])
    {









        $resourcePath = '/api/v2/Students/getemailpassword';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campus_id,
            'CampusId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $term_id,
            'TermId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $student_no,
            'StudentNo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name,
            'LastName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name,
            'FirstName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cor_number,
            'CorNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsGetstudentidGet
     *
     * Searches all tenant DBs if the student exists
     *
     * @param  string $last_name last_name (optional)
     * @param  string $firstname firstname (optional)
     * @param  string $middle_name middle_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGetstudentidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsGetstudentidGet($last_name = null, $firstname = null, $middle_name = null, string $contentType = self::contentTypes['apiV2StudentsGetstudentidGet'][0])
    {
        $this->apiV2StudentsGetstudentidGetWithHttpInfo($last_name, $firstname, $middle_name, $contentType);
    }

    /**
     * Operation apiV2StudentsGetstudentidGetWithHttpInfo
     *
     * Searches all tenant DBs if the student exists
     *
     * @param  string $last_name (optional)
     * @param  string $firstname (optional)
     * @param  string $middle_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGetstudentidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsGetstudentidGetWithHttpInfo($last_name = null, $firstname = null, $middle_name = null, string $contentType = self::contentTypes['apiV2StudentsGetstudentidGet'][0])
    {
        $request = $this->apiV2StudentsGetstudentidGetRequest($last_name, $firstname, $middle_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsGetstudentidGetAsync
     *
     * Searches all tenant DBs if the student exists
     *
     * @param  string $last_name (optional)
     * @param  string $firstname (optional)
     * @param  string $middle_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGetstudentidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsGetstudentidGetAsync($last_name = null, $firstname = null, $middle_name = null, string $contentType = self::contentTypes['apiV2StudentsGetstudentidGet'][0])
    {
        return $this->apiV2StudentsGetstudentidGetAsyncWithHttpInfo($last_name, $firstname, $middle_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsGetstudentidGetAsyncWithHttpInfo
     *
     * Searches all tenant DBs if the student exists
     *
     * @param  string $last_name (optional)
     * @param  string $firstname (optional)
     * @param  string $middle_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGetstudentidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsGetstudentidGetAsyncWithHttpInfo($last_name = null, $firstname = null, $middle_name = null, string $contentType = self::contentTypes['apiV2StudentsGetstudentidGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsGetstudentidGetRequest($last_name, $firstname, $middle_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsGetstudentidGet'
     *
     * @param  string $last_name (optional)
     * @param  string $firstname (optional)
     * @param  string $middle_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsGetstudentidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsGetstudentidGetRequest($last_name = null, $firstname = null, $middle_name = null, string $contentType = self::contentTypes['apiV2StudentsGetstudentidGet'][0])
    {





        $resourcePath = '/api/v2/Students/getstudentid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name,
            'LastName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $firstname,
            'Firstname', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $middle_name,
            'MiddleName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsMismatchedGet
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsMismatchedGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsMismatchedGet(string $contentType = self::contentTypes['apiV2StudentsMismatchedGet'][0])
    {
        $this->apiV2StudentsMismatchedGetWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2StudentsMismatchedGetWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsMismatchedGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsMismatchedGetWithHttpInfo(string $contentType = self::contentTypes['apiV2StudentsMismatchedGet'][0])
    {
        $request = $this->apiV2StudentsMismatchedGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsMismatchedGetAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsMismatchedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsMismatchedGetAsync(string $contentType = self::contentTypes['apiV2StudentsMismatchedGet'][0])
    {
        return $this->apiV2StudentsMismatchedGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsMismatchedGetAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsMismatchedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsMismatchedGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2StudentsMismatchedGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsMismatchedGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsMismatchedGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsMismatchedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsMismatchedGetRequest(string $contentType = self::contentTypes['apiV2StudentsMismatchedGet'][0])
    {


        $resourcePath = '/api/v2/Students/mismatched';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsNoValidationPost
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsNoValidationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsNoValidationPost($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsNoValidationPost'][0])
    {
        $this->apiV2StudentsNoValidationPostWithHttpInfo($tenant_id, $student_dto, $contentType);
    }

    /**
     * Operation apiV2StudentsNoValidationPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsNoValidationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsNoValidationPostWithHttpInfo($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsNoValidationPost'][0])
    {
        $request = $this->apiV2StudentsNoValidationPostRequest($tenant_id, $student_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsNoValidationPostAsync
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsNoValidationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsNoValidationPostAsync($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsNoValidationPost'][0])
    {
        return $this->apiV2StudentsNoValidationPostAsyncWithHttpInfo($tenant_id, $student_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsNoValidationPostAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsNoValidationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsNoValidationPostAsyncWithHttpInfo($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsNoValidationPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsNoValidationPostRequest($tenant_id, $student_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsNoValidationPost'
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsNoValidationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsNoValidationPostRequest($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsNoValidationPost'][0])
    {




        $resourcePath = '/api/v2/Students/no-validation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($student_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($student_dto));
            } else {
                $httpBody = $student_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsPost
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsPost($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsPost'][0])
    {
        $this->apiV2StudentsPostWithHttpInfo($tenant_id, $student_dto, $contentType);
    }

    /**
     * Operation apiV2StudentsPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsPostWithHttpInfo($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsPost'][0])
    {
        $request = $this->apiV2StudentsPostRequest($tenant_id, $student_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsPostAsync
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsPostAsync($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsPost'][0])
    {
        return $this->apiV2StudentsPostAsyncWithHttpInfo($tenant_id, $student_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsPostAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsPostAsyncWithHttpInfo($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsPostRequest($tenant_id, $student_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsPost'
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsPostRequest($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsPost'][0])
    {




        $resourcePath = '/api/v2/Students';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($student_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($student_dto));
            } else {
                $httpBody = $student_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsPreregStatuscountStatusPolicyIdGet
     *
     * @param  string $status status (required)
     * @param  int $policy_id policy_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsPreregStatuscountStatusPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsPreregStatuscountStatusPolicyIdGet($status, $policy_id, string $contentType = self::contentTypes['apiV2StudentsPreregStatuscountStatusPolicyIdGet'][0])
    {
        $this->apiV2StudentsPreregStatuscountStatusPolicyIdGetWithHttpInfo($status, $policy_id, $contentType);
    }

    /**
     * Operation apiV2StudentsPreregStatuscountStatusPolicyIdGetWithHttpInfo
     *
     * @param  string $status (required)
     * @param  int $policy_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsPreregStatuscountStatusPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsPreregStatuscountStatusPolicyIdGetWithHttpInfo($status, $policy_id, string $contentType = self::contentTypes['apiV2StudentsPreregStatuscountStatusPolicyIdGet'][0])
    {
        $request = $this->apiV2StudentsPreregStatuscountStatusPolicyIdGetRequest($status, $policy_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsPreregStatuscountStatusPolicyIdGetAsync
     *
     * @param  string $status (required)
     * @param  int $policy_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsPreregStatuscountStatusPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsPreregStatuscountStatusPolicyIdGetAsync($status, $policy_id, string $contentType = self::contentTypes['apiV2StudentsPreregStatuscountStatusPolicyIdGet'][0])
    {
        return $this->apiV2StudentsPreregStatuscountStatusPolicyIdGetAsyncWithHttpInfo($status, $policy_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsPreregStatuscountStatusPolicyIdGetAsyncWithHttpInfo
     *
     * @param  string $status (required)
     * @param  int $policy_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsPreregStatuscountStatusPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsPreregStatuscountStatusPolicyIdGetAsyncWithHttpInfo($status, $policy_id, string $contentType = self::contentTypes['apiV2StudentsPreregStatuscountStatusPolicyIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsPreregStatuscountStatusPolicyIdGetRequest($status, $policy_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsPreregStatuscountStatusPolicyIdGet'
     *
     * @param  string $status (required)
     * @param  int $policy_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsPreregStatuscountStatusPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsPreregStatuscountStatusPolicyIdGetRequest($status, $policy_id, string $contentType = self::contentTypes['apiV2StudentsPreregStatuscountStatusPolicyIdGet'][0])
    {

        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling apiV2StudentsPreregStatuscountStatusPolicyIdGet'
            );
        }

        // verify the required parameter 'policy_id' is set
        if ($policy_id === null || (is_array($policy_id) && count($policy_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $policy_id when calling apiV2StudentsPreregStatuscountStatusPolicyIdGet'
            );
        }


        $resourcePath = '/api/v2/Students/prereg/statuscount/{status}/{policyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($status !== null) {
            $resourcePath = str_replace(
                '{' . 'status' . '}',
                ObjectSerializer::toPathValue($status),
                $resourcePath
            );
        }
        // path params
        if ($policy_id !== null) {
            $resourcePath = str_replace(
                '{' . 'policyId' . '}',
                ObjectSerializer::toPathValue($policy_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsRequestemailupdatePut
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  \OpenAPI\Client\Model\RequestStudentValidationDto $request_student_validation_dto request_student_validation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsRequestemailupdatePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsRequestemailupdatePut($tenant_id = null, $request_student_validation_dto = null, string $contentType = self::contentTypes['apiV2StudentsRequestemailupdatePut'][0])
    {
        $this->apiV2StudentsRequestemailupdatePutWithHttpInfo($tenant_id, $request_student_validation_dto, $contentType);
    }

    /**
     * Operation apiV2StudentsRequestemailupdatePutWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\RequestStudentValidationDto $request_student_validation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsRequestemailupdatePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsRequestemailupdatePutWithHttpInfo($tenant_id = null, $request_student_validation_dto = null, string $contentType = self::contentTypes['apiV2StudentsRequestemailupdatePut'][0])
    {
        $request = $this->apiV2StudentsRequestemailupdatePutRequest($tenant_id, $request_student_validation_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsRequestemailupdatePutAsync
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\RequestStudentValidationDto $request_student_validation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsRequestemailupdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsRequestemailupdatePutAsync($tenant_id = null, $request_student_validation_dto = null, string $contentType = self::contentTypes['apiV2StudentsRequestemailupdatePut'][0])
    {
        return $this->apiV2StudentsRequestemailupdatePutAsyncWithHttpInfo($tenant_id, $request_student_validation_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsRequestemailupdatePutAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\RequestStudentValidationDto $request_student_validation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsRequestemailupdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsRequestemailupdatePutAsyncWithHttpInfo($tenant_id = null, $request_student_validation_dto = null, string $contentType = self::contentTypes['apiV2StudentsRequestemailupdatePut'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsRequestemailupdatePutRequest($tenant_id, $request_student_validation_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsRequestemailupdatePut'
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\RequestStudentValidationDto $request_student_validation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsRequestemailupdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsRequestemailupdatePutRequest($tenant_id = null, $request_student_validation_dto = null, string $contentType = self::contentTypes['apiV2StudentsRequestemailupdatePut'][0])
    {




        $resourcePath = '/api/v2/Students/requestemailupdate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_student_validation_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_student_validation_dto));
            } else {
                $httpBody = $request_student_validation_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsStudentIdDatacompletenessGet
     *
     * @param  string $student_id student_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsStudentIdDatacompletenessGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsStudentIdDatacompletenessGet($student_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsStudentIdDatacompletenessGet'][0])
    {
        $this->apiV2StudentsStudentIdDatacompletenessGetWithHttpInfo($student_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2StudentsStudentIdDatacompletenessGetWithHttpInfo
     *
     * @param  string $student_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsStudentIdDatacompletenessGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsStudentIdDatacompletenessGetWithHttpInfo($student_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsStudentIdDatacompletenessGet'][0])
    {
        $request = $this->apiV2StudentsStudentIdDatacompletenessGetRequest($student_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsStudentIdDatacompletenessGetAsync
     *
     * @param  string $student_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsStudentIdDatacompletenessGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsStudentIdDatacompletenessGetAsync($student_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsStudentIdDatacompletenessGet'][0])
    {
        return $this->apiV2StudentsStudentIdDatacompletenessGetAsyncWithHttpInfo($student_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsStudentIdDatacompletenessGetAsyncWithHttpInfo
     *
     * @param  string $student_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsStudentIdDatacompletenessGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsStudentIdDatacompletenessGetAsyncWithHttpInfo($student_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsStudentIdDatacompletenessGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsStudentIdDatacompletenessGetRequest($student_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsStudentIdDatacompletenessGet'
     *
     * @param  string $student_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsStudentIdDatacompletenessGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsStudentIdDatacompletenessGetRequest($student_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsStudentIdDatacompletenessGet'][0])
    {

        // verify the required parameter 'student_id' is set
        if ($student_id === null || (is_array($student_id) && count($student_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_id when calling apiV2StudentsStudentIdDatacompletenessGet'
            );
        }



        $resourcePath = '/api/v2/Students/{studentId}/datacompleteness';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($student_id !== null) {
            $resourcePath = str_replace(
                '{' . 'studentId' . '}',
                ObjectSerializer::toPathValue($student_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsStudentIdPut
     *
     * @param  string $student_id student_id (required)
     * @param  int $campus_id campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsStudentIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsStudentIdPut($student_id, $campus_id = null, $tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsStudentIdPut'][0])
    {
        $this->apiV2StudentsStudentIdPutWithHttpInfo($student_id, $campus_id, $tenant_id, $student_dto, $contentType);
    }

    /**
     * Operation apiV2StudentsStudentIdPutWithHttpInfo
     *
     * @param  string $student_id (required)
     * @param  int $campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsStudentIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsStudentIdPutWithHttpInfo($student_id, $campus_id = null, $tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsStudentIdPut'][0])
    {
        $request = $this->apiV2StudentsStudentIdPutRequest($student_id, $campus_id, $tenant_id, $student_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsStudentIdPutAsync
     *
     * @param  string $student_id (required)
     * @param  int $campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsStudentIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsStudentIdPutAsync($student_id, $campus_id = null, $tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsStudentIdPut'][0])
    {
        return $this->apiV2StudentsStudentIdPutAsyncWithHttpInfo($student_id, $campus_id, $tenant_id, $student_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsStudentIdPutAsyncWithHttpInfo
     *
     * @param  string $student_id (required)
     * @param  int $campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsStudentIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsStudentIdPutAsyncWithHttpInfo($student_id, $campus_id = null, $tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsStudentIdPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsStudentIdPutRequest($student_id, $campus_id, $tenant_id, $student_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsStudentIdPut'
     *
     * @param  string $student_id (required)
     * @param  int $campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsStudentIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsStudentIdPutRequest($student_id, $campus_id = null, $tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsStudentIdPut'][0])
    {

        // verify the required parameter 'student_id' is set
        if ($student_id === null || (is_array($student_id) && count($student_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_id when calling apiV2StudentsStudentIdPut'
            );
        }





        $resourcePath = '/api/v2/Students/{studentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campus_id,
            'campusId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($student_id !== null) {
            $resourcePath = str_replace(
                '{' . 'studentId' . '}',
                ObjectSerializer::toPathValue($student_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($student_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($student_dto));
            } else {
                $httpBody = $student_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsValidateregistrationGet
     *
     * @param  string $firstname firstname (optional)
     * @param  string $lastname lastname (optional)
     * @param  string $student_no student_no (optional)
     * @param  int $term_id term_id (optional)
     * @param  int $campus_id campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsValidateregistrationGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsValidateregistrationGet($firstname = null, $lastname = null, $student_no = null, $term_id = null, $campus_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsValidateregistrationGet'][0])
    {
        $this->apiV2StudentsValidateregistrationGetWithHttpInfo($firstname, $lastname, $student_no, $term_id, $campus_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2StudentsValidateregistrationGetWithHttpInfo
     *
     * @param  string $firstname (optional)
     * @param  string $lastname (optional)
     * @param  string $student_no (optional)
     * @param  int $term_id (optional)
     * @param  int $campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsValidateregistrationGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsValidateregistrationGetWithHttpInfo($firstname = null, $lastname = null, $student_no = null, $term_id = null, $campus_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsValidateregistrationGet'][0])
    {
        $request = $this->apiV2StudentsValidateregistrationGetRequest($firstname, $lastname, $student_no, $term_id, $campus_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsValidateregistrationGetAsync
     *
     * @param  string $firstname (optional)
     * @param  string $lastname (optional)
     * @param  string $student_no (optional)
     * @param  int $term_id (optional)
     * @param  int $campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsValidateregistrationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsValidateregistrationGetAsync($firstname = null, $lastname = null, $student_no = null, $term_id = null, $campus_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsValidateregistrationGet'][0])
    {
        return $this->apiV2StudentsValidateregistrationGetAsyncWithHttpInfo($firstname, $lastname, $student_no, $term_id, $campus_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsValidateregistrationGetAsyncWithHttpInfo
     *
     * @param  string $firstname (optional)
     * @param  string $lastname (optional)
     * @param  string $student_no (optional)
     * @param  int $term_id (optional)
     * @param  int $campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsValidateregistrationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsValidateregistrationGetAsyncWithHttpInfo($firstname = null, $lastname = null, $student_no = null, $term_id = null, $campus_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsValidateregistrationGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsValidateregistrationGetRequest($firstname, $lastname, $student_no, $term_id, $campus_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsValidateregistrationGet'
     *
     * @param  string $firstname (optional)
     * @param  string $lastname (optional)
     * @param  string $student_no (optional)
     * @param  int $term_id (optional)
     * @param  int $campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsValidateregistrationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsValidateregistrationGetRequest($firstname = null, $lastname = null, $student_no = null, $term_id = null, $campus_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2StudentsValidateregistrationGet'][0])
    {








        $resourcePath = '/api/v2/Students/validateregistration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $firstname,
            'Firstname', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastname,
            'Lastname', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $student_no,
            'StudentNo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $term_id,
            'TermId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campus_id,
            'CampusId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsVerifyineslocalGet
     *
     * @param  string $last_name last_name (optional)
     * @param  string $firstname firstname (optional)
     * @param  string $middle_name middle_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsVerifyineslocalGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsVerifyineslocalGet($last_name = null, $firstname = null, $middle_name = null, string $contentType = self::contentTypes['apiV2StudentsVerifyineslocalGet'][0])
    {
        $this->apiV2StudentsVerifyineslocalGetWithHttpInfo($last_name, $firstname, $middle_name, $contentType);
    }

    /**
     * Operation apiV2StudentsVerifyineslocalGetWithHttpInfo
     *
     * @param  string $last_name (optional)
     * @param  string $firstname (optional)
     * @param  string $middle_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsVerifyineslocalGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsVerifyineslocalGetWithHttpInfo($last_name = null, $firstname = null, $middle_name = null, string $contentType = self::contentTypes['apiV2StudentsVerifyineslocalGet'][0])
    {
        $request = $this->apiV2StudentsVerifyineslocalGetRequest($last_name, $firstname, $middle_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsVerifyineslocalGetAsync
     *
     * @param  string $last_name (optional)
     * @param  string $firstname (optional)
     * @param  string $middle_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsVerifyineslocalGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsVerifyineslocalGetAsync($last_name = null, $firstname = null, $middle_name = null, string $contentType = self::contentTypes['apiV2StudentsVerifyineslocalGet'][0])
    {
        return $this->apiV2StudentsVerifyineslocalGetAsyncWithHttpInfo($last_name, $firstname, $middle_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsVerifyineslocalGetAsyncWithHttpInfo
     *
     * @param  string $last_name (optional)
     * @param  string $firstname (optional)
     * @param  string $middle_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsVerifyineslocalGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsVerifyineslocalGetAsyncWithHttpInfo($last_name = null, $firstname = null, $middle_name = null, string $contentType = self::contentTypes['apiV2StudentsVerifyineslocalGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsVerifyineslocalGetRequest($last_name, $firstname, $middle_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsVerifyineslocalGet'
     *
     * @param  string $last_name (optional)
     * @param  string $firstname (optional)
     * @param  string $middle_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsVerifyineslocalGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsVerifyineslocalGetRequest($last_name = null, $firstname = null, $middle_name = null, string $contentType = self::contentTypes['apiV2StudentsVerifyineslocalGet'][0])
    {





        $resourcePath = '/api/v2/Students/verifyineslocal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name,
            'LastName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $firstname,
            'Firstname', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $middle_name,
            'MiddleName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2StudentsWithauthPost
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsWithauthPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StudentsWithauthPost($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsWithauthPost'][0])
    {
        $this->apiV2StudentsWithauthPostWithHttpInfo($tenant_id, $student_dto, $contentType);
    }

    /**
     * Operation apiV2StudentsWithauthPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsWithauthPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StudentsWithauthPostWithHttpInfo($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsWithauthPost'][0])
    {
        $request = $this->apiV2StudentsWithauthPostRequest($tenant_id, $student_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StudentsWithauthPostAsync
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsWithauthPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsWithauthPostAsync($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsWithauthPost'][0])
    {
        return $this->apiV2StudentsWithauthPostAsyncWithHttpInfo($tenant_id, $student_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StudentsWithauthPostAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsWithauthPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2StudentsWithauthPostAsyncWithHttpInfo($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsWithauthPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2StudentsWithauthPostRequest($tenant_id, $student_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StudentsWithauthPost'
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentDto $student_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2StudentsWithauthPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2StudentsWithauthPostRequest($tenant_id = null, $student_dto = null, string $contentType = self::contentTypes['apiV2StudentsWithauthPost'][0])
    {




        $resourcePath = '/api/v2/Students/withauth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($student_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($student_dto));
            } else {
                $httpBody = $student_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStudent
     *
     * @param  string $id id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getStudent($id, $tenant_id = null, string $contentType = self::contentTypes['getStudent'][0])
    {
        $this->getStudentWithHttpInfo($id, $tenant_id, $contentType);
    }

    /**
     * Operation getStudentWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudentWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['getStudent'][0])
    {
        $request = $this->getStudentRequest($id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getStudentAsync
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentAsync($id, $tenant_id = null, string $contentType = self::contentTypes['getStudent'][0])
    {
        return $this->getStudentAsyncWithHttpInfo($id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStudentAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentAsyncWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['getStudent'][0])
    {
        $returnType = '';
        $request = $this->getStudentRequest($id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStudent'
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStudentRequest($id, $tenant_id = null, string $contentType = self::contentTypes['getStudent'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStudent'
            );
        }



        $resourcePath = '/api/v2/Students/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStudentByIdAndTenant
     *
     * @param  string $id id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentByIdAndTenant'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getStudentByIdAndTenant($id, $tenant_id = null, string $contentType = self::contentTypes['getStudentByIdAndTenant'][0])
    {
        $this->getStudentByIdAndTenantWithHttpInfo($id, $tenant_id, $contentType);
    }

    /**
     * Operation getStudentByIdAndTenantWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentByIdAndTenant'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudentByIdAndTenantWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['getStudentByIdAndTenant'][0])
    {
        $request = $this->getStudentByIdAndTenantRequest($id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getStudentByIdAndTenantAsync
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentByIdAndTenant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentByIdAndTenantAsync($id, $tenant_id = null, string $contentType = self::contentTypes['getStudentByIdAndTenant'][0])
    {
        return $this->getStudentByIdAndTenantAsyncWithHttpInfo($id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStudentByIdAndTenantAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentByIdAndTenant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentByIdAndTenantAsyncWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['getStudentByIdAndTenant'][0])
    {
        $returnType = '';
        $request = $this->getStudentByIdAndTenantRequest($id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStudentByIdAndTenant'
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentByIdAndTenant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStudentByIdAndTenantRequest($id, $tenant_id = null, string $contentType = self::contentTypes['getStudentByIdAndTenant'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStudentByIdAndTenant'
            );
        }



        $resourcePath = '/api/v2/Students/{id}/tenant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
