<?php
/**
 * CurriculumsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CurriculumsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CurriculumsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2CurriculumsFilterByPolicyIdPolicyIdGet' => [
            'application/json',
        ],
        'apiV2CurriculumsFilterProgramProgramIdGet' => [
            'application/json',
        ],
        'apiV2CurriculumsListGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2CurriculumsFilterByPolicyIdPolicyIdGet
     *
     * Filter curriculums by policyId
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsFilterByPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2CurriculumsFilterByPolicyIdPolicyIdGet($policy_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsFilterByPolicyIdPolicyIdGet'][0])
    {
        $this->apiV2CurriculumsFilterByPolicyIdPolicyIdGetWithHttpInfo($policy_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2CurriculumsFilterByPolicyIdPolicyIdGetWithHttpInfo
     *
     * Filter curriculums by policyId
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsFilterByPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2CurriculumsFilterByPolicyIdPolicyIdGetWithHttpInfo($policy_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsFilterByPolicyIdPolicyIdGet'][0])
    {
        $request = $this->apiV2CurriculumsFilterByPolicyIdPolicyIdGetRequest($policy_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2CurriculumsFilterByPolicyIdPolicyIdGetAsync
     *
     * Filter curriculums by policyId
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsFilterByPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CurriculumsFilterByPolicyIdPolicyIdGetAsync($policy_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsFilterByPolicyIdPolicyIdGet'][0])
    {
        return $this->apiV2CurriculumsFilterByPolicyIdPolicyIdGetAsyncWithHttpInfo($policy_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2CurriculumsFilterByPolicyIdPolicyIdGetAsyncWithHttpInfo
     *
     * Filter curriculums by policyId
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsFilterByPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CurriculumsFilterByPolicyIdPolicyIdGetAsyncWithHttpInfo($policy_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsFilterByPolicyIdPolicyIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2CurriculumsFilterByPolicyIdPolicyIdGetRequest($policy_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2CurriculumsFilterByPolicyIdPolicyIdGet'
     *
     * @param  int $policy_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsFilterByPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2CurriculumsFilterByPolicyIdPolicyIdGetRequest($policy_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsFilterByPolicyIdPolicyIdGet'][0])
    {

        // verify the required parameter 'policy_id' is set
        if ($policy_id === null || (is_array($policy_id) && count($policy_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $policy_id when calling apiV2CurriculumsFilterByPolicyIdPolicyIdGet'
            );
        }



        $resourcePath = '/api/v2/Curriculums/filter/by-policyId/{policyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($policy_id !== null) {
            $resourcePath = str_replace(
                '{' . 'policyId' . '}',
                ObjectSerializer::toPathValue($policy_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2CurriculumsFilterProgramProgramIdGet
     *
     * Filter by campus and program
     *
     * @param  int $program_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsFilterProgramProgramIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2CurriculumsFilterProgramProgramIdGet($program_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsFilterProgramProgramIdGet'][0])
    {
        $this->apiV2CurriculumsFilterProgramProgramIdGetWithHttpInfo($program_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2CurriculumsFilterProgramProgramIdGetWithHttpInfo
     *
     * Filter by campus and program
     *
     * @param  int $program_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsFilterProgramProgramIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2CurriculumsFilterProgramProgramIdGetWithHttpInfo($program_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsFilterProgramProgramIdGet'][0])
    {
        $request = $this->apiV2CurriculumsFilterProgramProgramIdGetRequest($program_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2CurriculumsFilterProgramProgramIdGetAsync
     *
     * Filter by campus and program
     *
     * @param  int $program_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsFilterProgramProgramIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CurriculumsFilterProgramProgramIdGetAsync($program_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsFilterProgramProgramIdGet'][0])
    {
        return $this->apiV2CurriculumsFilterProgramProgramIdGetAsyncWithHttpInfo($program_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2CurriculumsFilterProgramProgramIdGetAsyncWithHttpInfo
     *
     * Filter by campus and program
     *
     * @param  int $program_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsFilterProgramProgramIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CurriculumsFilterProgramProgramIdGetAsyncWithHttpInfo($program_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsFilterProgramProgramIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2CurriculumsFilterProgramProgramIdGetRequest($program_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2CurriculumsFilterProgramProgramIdGet'
     *
     * @param  int $program_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsFilterProgramProgramIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2CurriculumsFilterProgramProgramIdGetRequest($program_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsFilterProgramProgramIdGet'][0])
    {

        // verify the required parameter 'program_id' is set
        if ($program_id === null || (is_array($program_id) && count($program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $program_id when calling apiV2CurriculumsFilterProgramProgramIdGet'
            );
        }



        $resourcePath = '/api/v2/Curriculums/filter/program/{programId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'programId' . '}',
                ObjectSerializer::toPathValue($program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2CurriculumsListGet
     *
     * @param  int $campus_id campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2CurriculumsListGet($campus_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsListGet'][0])
    {
        $this->apiV2CurriculumsListGetWithHttpInfo($campus_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2CurriculumsListGetWithHttpInfo
     *
     * @param  int $campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2CurriculumsListGetWithHttpInfo($campus_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsListGet'][0])
    {
        $request = $this->apiV2CurriculumsListGetRequest($campus_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2CurriculumsListGetAsync
     *
     * @param  int $campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CurriculumsListGetAsync($campus_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsListGet'][0])
    {
        return $this->apiV2CurriculumsListGetAsyncWithHttpInfo($campus_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2CurriculumsListGetAsyncWithHttpInfo
     *
     * @param  int $campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CurriculumsListGetAsyncWithHttpInfo($campus_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsListGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2CurriculumsListGetRequest($campus_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2CurriculumsListGet'
     *
     * @param  int $campus_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CurriculumsListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2CurriculumsListGetRequest($campus_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2CurriculumsListGet'][0])
    {




        $resourcePath = '/api/v2/Curriculums/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campus_id,
            'campusId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
