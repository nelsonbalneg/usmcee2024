<?php
/**
 * RegistrationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * RegistrationsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RegistrationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2RegistrationsBalanceStudentNoGet' => [
            'application/json',
        ],
        'apiV2RegistrationsBystudentStudentNoTermTermIdGet' => [
            'application/json',
        ],
        'apiV2RegistrationsCorrectemailsfromgoogletostudentPut' => [
            'application/json',
        ],
        'apiV2RegistrationsCorrectemailsofstudentsTermIdPut' => [
            'application/json',
        ],
        'apiV2RegistrationsGetAllRegistrationsStudentNoGet' => [
            'application/json',
        ],
        'apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet' => [
            'application/json',
        ],
        'apiV2RegistrationsSchedulesStudentNoTermIdGet' => [
            'application/json',
        ],
        'apiV2RegistrationsStudentAccountabilitiesStudentNoGet' => [
            'application/json',
        ],
        'apiV2RegistrationsTermTermIdStudentStudentNoGet' => [
            'application/json',
        ],
        'apiV2RegistrationsTotalernrolledTermTermIdGet' => [
            'application/json',
        ],
        'apiV2RegistrationsYearsofresidencyStudentStudentNoGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2RegistrationsBalanceStudentNoGet
     *
     * Get total student balance
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsBalanceStudentNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2RegistrationsBalanceStudentNoGet($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsBalanceStudentNoGet'][0])
    {
        $this->apiV2RegistrationsBalanceStudentNoGetWithHttpInfo($student_no, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2RegistrationsBalanceStudentNoGetWithHttpInfo
     *
     * Get total student balance
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsBalanceStudentNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2RegistrationsBalanceStudentNoGetWithHttpInfo($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsBalanceStudentNoGet'][0])
    {
        $request = $this->apiV2RegistrationsBalanceStudentNoGetRequest($student_no, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2RegistrationsBalanceStudentNoGetAsync
     *
     * Get total student balance
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsBalanceStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsBalanceStudentNoGetAsync($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsBalanceStudentNoGet'][0])
    {
        return $this->apiV2RegistrationsBalanceStudentNoGetAsyncWithHttpInfo($student_no, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2RegistrationsBalanceStudentNoGetAsyncWithHttpInfo
     *
     * Get total student balance
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsBalanceStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsBalanceStudentNoGetAsyncWithHttpInfo($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsBalanceStudentNoGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2RegistrationsBalanceStudentNoGetRequest($student_no, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2RegistrationsBalanceStudentNoGet'
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsBalanceStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2RegistrationsBalanceStudentNoGetRequest($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsBalanceStudentNoGet'][0])
    {

        // verify the required parameter 'student_no' is set
        if ($student_no === null || (is_array($student_no) && count($student_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_no when calling apiV2RegistrationsBalanceStudentNoGet'
            );
        }



        $resourcePath = '/api/v2/Registrations/balance/{studentNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($student_no !== null) {
            $resourcePath = str_replace(
                '{' . 'studentNo' . '}',
                ObjectSerializer::toPathValue($student_no),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2RegistrationsBystudentStudentNoTermTermIdGet
     *
     * Get student registration record by term
     *
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsBystudentStudentNoTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2RegistrationsBystudentStudentNoTermTermIdGet($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsBystudentStudentNoTermTermIdGet'][0])
    {
        $this->apiV2RegistrationsBystudentStudentNoTermTermIdGetWithHttpInfo($student_no, $term_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2RegistrationsBystudentStudentNoTermTermIdGetWithHttpInfo
     *
     * Get student registration record by term
     *
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsBystudentStudentNoTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2RegistrationsBystudentStudentNoTermTermIdGetWithHttpInfo($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsBystudentStudentNoTermTermIdGet'][0])
    {
        $request = $this->apiV2RegistrationsBystudentStudentNoTermTermIdGetRequest($student_no, $term_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2RegistrationsBystudentStudentNoTermTermIdGetAsync
     *
     * Get student registration record by term
     *
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsBystudentStudentNoTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsBystudentStudentNoTermTermIdGetAsync($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsBystudentStudentNoTermTermIdGet'][0])
    {
        return $this->apiV2RegistrationsBystudentStudentNoTermTermIdGetAsyncWithHttpInfo($student_no, $term_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2RegistrationsBystudentStudentNoTermTermIdGetAsyncWithHttpInfo
     *
     * Get student registration record by term
     *
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsBystudentStudentNoTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsBystudentStudentNoTermTermIdGetAsyncWithHttpInfo($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsBystudentStudentNoTermTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2RegistrationsBystudentStudentNoTermTermIdGetRequest($student_no, $term_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2RegistrationsBystudentStudentNoTermTermIdGet'
     *
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsBystudentStudentNoTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2RegistrationsBystudentStudentNoTermTermIdGetRequest($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsBystudentStudentNoTermTermIdGet'][0])
    {

        // verify the required parameter 'student_no' is set
        if ($student_no === null || (is_array($student_no) && count($student_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_no when calling apiV2RegistrationsBystudentStudentNoTermTermIdGet'
            );
        }

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2RegistrationsBystudentStudentNoTermTermIdGet'
            );
        }



        $resourcePath = '/api/v2/Registrations/bystudent/{studentNo}/term/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($student_no !== null) {
            $resourcePath = str_replace(
                '{' . 'studentNo' . '}',
                ObjectSerializer::toPathValue($student_no),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2RegistrationsCorrectemailsfromgoogletostudentPut
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsCorrectemailsfromgoogletostudentPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2RegistrationsCorrectemailsfromgoogletostudentPut($tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsCorrectemailsfromgoogletostudentPut'][0])
    {
        $this->apiV2RegistrationsCorrectemailsfromgoogletostudentPutWithHttpInfo($tenant_id, $contentType);
    }

    /**
     * Operation apiV2RegistrationsCorrectemailsfromgoogletostudentPutWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsCorrectemailsfromgoogletostudentPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2RegistrationsCorrectemailsfromgoogletostudentPutWithHttpInfo($tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsCorrectemailsfromgoogletostudentPut'][0])
    {
        $request = $this->apiV2RegistrationsCorrectemailsfromgoogletostudentPutRequest($tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2RegistrationsCorrectemailsfromgoogletostudentPutAsync
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsCorrectemailsfromgoogletostudentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsCorrectemailsfromgoogletostudentPutAsync($tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsCorrectemailsfromgoogletostudentPut'][0])
    {
        return $this->apiV2RegistrationsCorrectemailsfromgoogletostudentPutAsyncWithHttpInfo($tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2RegistrationsCorrectemailsfromgoogletostudentPutAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsCorrectemailsfromgoogletostudentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsCorrectemailsfromgoogletostudentPutAsyncWithHttpInfo($tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsCorrectemailsfromgoogletostudentPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2RegistrationsCorrectemailsfromgoogletostudentPutRequest($tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2RegistrationsCorrectemailsfromgoogletostudentPut'
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsCorrectemailsfromgoogletostudentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2RegistrationsCorrectemailsfromgoogletostudentPutRequest($tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsCorrectemailsfromgoogletostudentPut'][0])
    {



        $resourcePath = '/api/v2/Registrations/correctemailsfromgoogletostudent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2RegistrationsCorrectemailsofstudentsTermIdPut
     *
     * @param  int $term_id term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsCorrectemailsofstudentsTermIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2RegistrationsCorrectemailsofstudentsTermIdPut($term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsCorrectemailsofstudentsTermIdPut'][0])
    {
        $this->apiV2RegistrationsCorrectemailsofstudentsTermIdPutWithHttpInfo($term_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2RegistrationsCorrectemailsofstudentsTermIdPutWithHttpInfo
     *
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsCorrectemailsofstudentsTermIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2RegistrationsCorrectemailsofstudentsTermIdPutWithHttpInfo($term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsCorrectemailsofstudentsTermIdPut'][0])
    {
        $request = $this->apiV2RegistrationsCorrectemailsofstudentsTermIdPutRequest($term_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2RegistrationsCorrectemailsofstudentsTermIdPutAsync
     *
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsCorrectemailsofstudentsTermIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsCorrectemailsofstudentsTermIdPutAsync($term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsCorrectemailsofstudentsTermIdPut'][0])
    {
        return $this->apiV2RegistrationsCorrectemailsofstudentsTermIdPutAsyncWithHttpInfo($term_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2RegistrationsCorrectemailsofstudentsTermIdPutAsyncWithHttpInfo
     *
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsCorrectemailsofstudentsTermIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsCorrectemailsofstudentsTermIdPutAsyncWithHttpInfo($term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsCorrectemailsofstudentsTermIdPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2RegistrationsCorrectemailsofstudentsTermIdPutRequest($term_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2RegistrationsCorrectemailsofstudentsTermIdPut'
     *
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsCorrectemailsofstudentsTermIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2RegistrationsCorrectemailsofstudentsTermIdPutRequest($term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsCorrectemailsofstudentsTermIdPut'][0])
    {

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2RegistrationsCorrectemailsofstudentsTermIdPut'
            );
        }



        $resourcePath = '/api/v2/Registrations/correctemailsofstudents/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2RegistrationsGetAllRegistrationsStudentNoGet
     *
     * @param  string $student_no student_no (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsGetAllRegistrationsStudentNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2RegistrationsGetAllRegistrationsStudentNoGet($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsGetAllRegistrationsStudentNoGet'][0])
    {
        $this->apiV2RegistrationsGetAllRegistrationsStudentNoGetWithHttpInfo($student_no, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2RegistrationsGetAllRegistrationsStudentNoGetWithHttpInfo
     *
     * @param  string $student_no (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsGetAllRegistrationsStudentNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2RegistrationsGetAllRegistrationsStudentNoGetWithHttpInfo($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsGetAllRegistrationsStudentNoGet'][0])
    {
        $request = $this->apiV2RegistrationsGetAllRegistrationsStudentNoGetRequest($student_no, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2RegistrationsGetAllRegistrationsStudentNoGetAsync
     *
     * @param  string $student_no (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsGetAllRegistrationsStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsGetAllRegistrationsStudentNoGetAsync($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsGetAllRegistrationsStudentNoGet'][0])
    {
        return $this->apiV2RegistrationsGetAllRegistrationsStudentNoGetAsyncWithHttpInfo($student_no, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2RegistrationsGetAllRegistrationsStudentNoGetAsyncWithHttpInfo
     *
     * @param  string $student_no (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsGetAllRegistrationsStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsGetAllRegistrationsStudentNoGetAsyncWithHttpInfo($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsGetAllRegistrationsStudentNoGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2RegistrationsGetAllRegistrationsStudentNoGetRequest($student_no, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2RegistrationsGetAllRegistrationsStudentNoGet'
     *
     * @param  string $student_no (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsGetAllRegistrationsStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2RegistrationsGetAllRegistrationsStudentNoGetRequest($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsGetAllRegistrationsStudentNoGet'][0])
    {

        // verify the required parameter 'student_no' is set
        if ($student_no === null || (is_array($student_no) && count($student_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_no when calling apiV2RegistrationsGetAllRegistrationsStudentNoGet'
            );
        }



        $resourcePath = '/api/v2/Registrations/get-all-registrations/{studentNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($student_no !== null) {
            $resourcePath = str_replace(
                '{' . 'studentNo' . '}',
                ObjectSerializer::toPathValue($student_no),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet
     *
     * Verify student registration
     *
     * @param  int $reg_id  (required)
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet($reg_id, $student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet'][0])
    {
        $this->apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGetWithHttpInfo($reg_id, $student_no, $term_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGetWithHttpInfo
     *
     * Verify student registration
     *
     * @param  int $reg_id  (required)
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGetWithHttpInfo($reg_id, $student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet'][0])
    {
        $request = $this->apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGetRequest($reg_id, $student_no, $term_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGetAsync
     *
     * Verify student registration
     *
     * @param  int $reg_id  (required)
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGetAsync($reg_id, $student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet'][0])
    {
        return $this->apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGetAsyncWithHttpInfo($reg_id, $student_no, $term_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGetAsyncWithHttpInfo
     *
     * Verify student registration
     *
     * @param  int $reg_id  (required)
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGetAsyncWithHttpInfo($reg_id, $student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGetRequest($reg_id, $student_no, $term_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet'
     *
     * @param  int $reg_id  (required)
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGetRequest($reg_id, $student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet'][0])
    {

        // verify the required parameter 'reg_id' is set
        if ($reg_id === null || (is_array($reg_id) && count($reg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reg_id when calling apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet'
            );
        }

        // verify the required parameter 'student_no' is set
        if ($student_no === null || (is_array($student_no) && count($student_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_no when calling apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet'
            );
        }

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2RegistrationsRegIdGetStudentStudentNoTermTermIdGet'
            );
        }



        $resourcePath = '/api/v2/Registrations/{regId}/get-student/{studentNo}/term/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($reg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'regId' . '}',
                ObjectSerializer::toPathValue($reg_id),
                $resourcePath
            );
        }
        // path params
        if ($student_no !== null) {
            $resourcePath = str_replace(
                '{' . 'studentNo' . '}',
                ObjectSerializer::toPathValue($student_no),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2RegistrationsSchedulesStudentNoTermIdGet
     *
     * get schedules by term and campus
     *
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsSchedulesStudentNoTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2RegistrationsSchedulesStudentNoTermIdGet($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsSchedulesStudentNoTermIdGet'][0])
    {
        $this->apiV2RegistrationsSchedulesStudentNoTermIdGetWithHttpInfo($student_no, $term_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2RegistrationsSchedulesStudentNoTermIdGetWithHttpInfo
     *
     * get schedules by term and campus
     *
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsSchedulesStudentNoTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2RegistrationsSchedulesStudentNoTermIdGetWithHttpInfo($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsSchedulesStudentNoTermIdGet'][0])
    {
        $request = $this->apiV2RegistrationsSchedulesStudentNoTermIdGetRequest($student_no, $term_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2RegistrationsSchedulesStudentNoTermIdGetAsync
     *
     * get schedules by term and campus
     *
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsSchedulesStudentNoTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsSchedulesStudentNoTermIdGetAsync($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsSchedulesStudentNoTermIdGet'][0])
    {
        return $this->apiV2RegistrationsSchedulesStudentNoTermIdGetAsyncWithHttpInfo($student_no, $term_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2RegistrationsSchedulesStudentNoTermIdGetAsyncWithHttpInfo
     *
     * get schedules by term and campus
     *
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsSchedulesStudentNoTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsSchedulesStudentNoTermIdGetAsyncWithHttpInfo($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsSchedulesStudentNoTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2RegistrationsSchedulesStudentNoTermIdGetRequest($student_no, $term_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2RegistrationsSchedulesStudentNoTermIdGet'
     *
     * @param  string $student_no  (required)
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsSchedulesStudentNoTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2RegistrationsSchedulesStudentNoTermIdGetRequest($student_no, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsSchedulesStudentNoTermIdGet'][0])
    {

        // verify the required parameter 'student_no' is set
        if ($student_no === null || (is_array($student_no) && count($student_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_no when calling apiV2RegistrationsSchedulesStudentNoTermIdGet'
            );
        }

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2RegistrationsSchedulesStudentNoTermIdGet'
            );
        }



        $resourcePath = '/api/v2/Registrations/schedules/{studentNo}/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($student_no !== null) {
            $resourcePath = str_replace(
                '{' . 'studentNo' . '}',
                ObjectSerializer::toPathValue($student_no),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2RegistrationsStudentAccountabilitiesStudentNoGet
     *
     * Get all outstanding Accountabilities
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsStudentAccountabilitiesStudentNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2RegistrationsStudentAccountabilitiesStudentNoGet($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsStudentAccountabilitiesStudentNoGet'][0])
    {
        $this->apiV2RegistrationsStudentAccountabilitiesStudentNoGetWithHttpInfo($student_no, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2RegistrationsStudentAccountabilitiesStudentNoGetWithHttpInfo
     *
     * Get all outstanding Accountabilities
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsStudentAccountabilitiesStudentNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2RegistrationsStudentAccountabilitiesStudentNoGetWithHttpInfo($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsStudentAccountabilitiesStudentNoGet'][0])
    {
        $request = $this->apiV2RegistrationsStudentAccountabilitiesStudentNoGetRequest($student_no, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2RegistrationsStudentAccountabilitiesStudentNoGetAsync
     *
     * Get all outstanding Accountabilities
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsStudentAccountabilitiesStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsStudentAccountabilitiesStudentNoGetAsync($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsStudentAccountabilitiesStudentNoGet'][0])
    {
        return $this->apiV2RegistrationsStudentAccountabilitiesStudentNoGetAsyncWithHttpInfo($student_no, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2RegistrationsStudentAccountabilitiesStudentNoGetAsyncWithHttpInfo
     *
     * Get all outstanding Accountabilities
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsStudentAccountabilitiesStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsStudentAccountabilitiesStudentNoGetAsyncWithHttpInfo($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsStudentAccountabilitiesStudentNoGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2RegistrationsStudentAccountabilitiesStudentNoGetRequest($student_no, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2RegistrationsStudentAccountabilitiesStudentNoGet'
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsStudentAccountabilitiesStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2RegistrationsStudentAccountabilitiesStudentNoGetRequest($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsStudentAccountabilitiesStudentNoGet'][0])
    {

        // verify the required parameter 'student_no' is set
        if ($student_no === null || (is_array($student_no) && count($student_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_no when calling apiV2RegistrationsStudentAccountabilitiesStudentNoGet'
            );
        }



        $resourcePath = '/api/v2/Registrations/student-accountabilities/{studentNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($student_no !== null) {
            $resourcePath = str_replace(
                '{' . 'studentNo' . '}',
                ObjectSerializer::toPathValue($student_no),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2RegistrationsTermTermIdStudentStudentNoGet
     *
     * Get student section
     *
     * @param  int $term_id  (required)
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsTermTermIdStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2RegistrationsTermTermIdStudentStudentNoGet($term_id, $student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsTermTermIdStudentStudentNoGet'][0])
    {
        $this->apiV2RegistrationsTermTermIdStudentStudentNoGetWithHttpInfo($term_id, $student_no, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2RegistrationsTermTermIdStudentStudentNoGetWithHttpInfo
     *
     * Get student section
     *
     * @param  int $term_id  (required)
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsTermTermIdStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2RegistrationsTermTermIdStudentStudentNoGetWithHttpInfo($term_id, $student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsTermTermIdStudentStudentNoGet'][0])
    {
        $request = $this->apiV2RegistrationsTermTermIdStudentStudentNoGetRequest($term_id, $student_no, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2RegistrationsTermTermIdStudentStudentNoGetAsync
     *
     * Get student section
     *
     * @param  int $term_id  (required)
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsTermTermIdStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsTermTermIdStudentStudentNoGetAsync($term_id, $student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsTermTermIdStudentStudentNoGet'][0])
    {
        return $this->apiV2RegistrationsTermTermIdStudentStudentNoGetAsyncWithHttpInfo($term_id, $student_no, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2RegistrationsTermTermIdStudentStudentNoGetAsyncWithHttpInfo
     *
     * Get student section
     *
     * @param  int $term_id  (required)
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsTermTermIdStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsTermTermIdStudentStudentNoGetAsyncWithHttpInfo($term_id, $student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsTermTermIdStudentStudentNoGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2RegistrationsTermTermIdStudentStudentNoGetRequest($term_id, $student_no, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2RegistrationsTermTermIdStudentStudentNoGet'
     *
     * @param  int $term_id  (required)
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsTermTermIdStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2RegistrationsTermTermIdStudentStudentNoGetRequest($term_id, $student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsTermTermIdStudentStudentNoGet'][0])
    {

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2RegistrationsTermTermIdStudentStudentNoGet'
            );
        }

        // verify the required parameter 'student_no' is set
        if ($student_no === null || (is_array($student_no) && count($student_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_no when calling apiV2RegistrationsTermTermIdStudentStudentNoGet'
            );
        }



        $resourcePath = '/api/v2/Registrations/term/{termId}/student/{studentNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }
        // path params
        if ($student_no !== null) {
            $resourcePath = str_replace(
                '{' . 'studentNo' . '}',
                ObjectSerializer::toPathValue($student_no),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2RegistrationsTotalernrolledTermTermIdGet
     *
     * Counts all enrolled students based on campus and term
     *
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsTotalernrolledTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2RegistrationsTotalernrolledTermTermIdGet($term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsTotalernrolledTermTermIdGet'][0])
    {
        $this->apiV2RegistrationsTotalernrolledTermTermIdGetWithHttpInfo($term_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2RegistrationsTotalernrolledTermTermIdGetWithHttpInfo
     *
     * Counts all enrolled students based on campus and term
     *
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsTotalernrolledTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2RegistrationsTotalernrolledTermTermIdGetWithHttpInfo($term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsTotalernrolledTermTermIdGet'][0])
    {
        $request = $this->apiV2RegistrationsTotalernrolledTermTermIdGetRequest($term_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2RegistrationsTotalernrolledTermTermIdGetAsync
     *
     * Counts all enrolled students based on campus and term
     *
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsTotalernrolledTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsTotalernrolledTermTermIdGetAsync($term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsTotalernrolledTermTermIdGet'][0])
    {
        return $this->apiV2RegistrationsTotalernrolledTermTermIdGetAsyncWithHttpInfo($term_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2RegistrationsTotalernrolledTermTermIdGetAsyncWithHttpInfo
     *
     * Counts all enrolled students based on campus and term
     *
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsTotalernrolledTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsTotalernrolledTermTermIdGetAsyncWithHttpInfo($term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsTotalernrolledTermTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2RegistrationsTotalernrolledTermTermIdGetRequest($term_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2RegistrationsTotalernrolledTermTermIdGet'
     *
     * @param  int $term_id  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsTotalernrolledTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2RegistrationsTotalernrolledTermTermIdGetRequest($term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsTotalernrolledTermTermIdGet'][0])
    {

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2RegistrationsTotalernrolledTermTermIdGet'
            );
        }



        $resourcePath = '/api/v2/Registrations/totalernrolled/term/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2RegistrationsYearsofresidencyStudentStudentNoGet
     *
     * Counts the number of years
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsYearsofresidencyStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2RegistrationsYearsofresidencyStudentStudentNoGet($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsYearsofresidencyStudentStudentNoGet'][0])
    {
        $this->apiV2RegistrationsYearsofresidencyStudentStudentNoGetWithHttpInfo($student_no, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2RegistrationsYearsofresidencyStudentStudentNoGetWithHttpInfo
     *
     * Counts the number of years
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsYearsofresidencyStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2RegistrationsYearsofresidencyStudentStudentNoGetWithHttpInfo($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsYearsofresidencyStudentStudentNoGet'][0])
    {
        $request = $this->apiV2RegistrationsYearsofresidencyStudentStudentNoGetRequest($student_no, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2RegistrationsYearsofresidencyStudentStudentNoGetAsync
     *
     * Counts the number of years
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsYearsofresidencyStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsYearsofresidencyStudentStudentNoGetAsync($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsYearsofresidencyStudentStudentNoGet'][0])
    {
        return $this->apiV2RegistrationsYearsofresidencyStudentStudentNoGetAsyncWithHttpInfo($student_no, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2RegistrationsYearsofresidencyStudentStudentNoGetAsyncWithHttpInfo
     *
     * Counts the number of years
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsYearsofresidencyStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2RegistrationsYearsofresidencyStudentStudentNoGetAsyncWithHttpInfo($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsYearsofresidencyStudentStudentNoGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2RegistrationsYearsofresidencyStudentStudentNoGetRequest($student_no, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2RegistrationsYearsofresidencyStudentStudentNoGet'
     *
     * @param  string $student_no  (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2RegistrationsYearsofresidencyStudentStudentNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2RegistrationsYearsofresidencyStudentStudentNoGetRequest($student_no, $tenant_id = null, string $contentType = self::contentTypes['apiV2RegistrationsYearsofresidencyStudentStudentNoGet'][0])
    {

        // verify the required parameter 'student_no' is set
        if ($student_no === null || (is_array($student_no) && count($student_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_no when calling apiV2RegistrationsYearsofresidencyStudentStudentNoGet'
            );
        }



        $resourcePath = '/api/v2/Registrations/yearsofresidency/student/{studentNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($student_no !== null) {
            $resourcePath = str_replace(
                '{' . 'studentNo' . '}',
                ObjectSerializer::toPathValue($student_no),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
