<?php
/**
 * GradesFacultyApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * GradesFacultyApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GradesFacultyApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2GradesFacultyFacultyloadEmpNoGet' => [
            'application/json',
        ],
        'apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet' => [
            'application/json',
        ],
        'apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet' => [
            'application/json',
        ],
        'apiV2GradesFacultyGradingsystemProgClassIDGet' => [
            'application/json',
        ],
        'apiV2GradesFacultyGradingsystemsettingsProgClassIDGet' => [
            'application/json',
        ],
        'apiV2GradesFacultyPost' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2GradesFacultyPostgradingsheetPut' => [
            'application/json',
        ],
        'apiV2GradesFacultyUpdateStudentFinalGradePut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2GradesFacultyUpdateStudentMidtermPut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2GradesFacultyUpdategradeofstudentPut' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2GradesFacultyFacultyloadEmpNoGet
     *
     * @param  string $emp_no emp_no (required)
     * @param  int $term_id term_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyFacultyloadEmpNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2GradesFacultyFacultyloadEmpNoGet($emp_no, $term_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyFacultyloadEmpNoGet'][0])
    {
        $this->apiV2GradesFacultyFacultyloadEmpNoGetWithHttpInfo($emp_no, $term_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2GradesFacultyFacultyloadEmpNoGetWithHttpInfo
     *
     * @param  string $emp_no (required)
     * @param  int $term_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyFacultyloadEmpNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2GradesFacultyFacultyloadEmpNoGetWithHttpInfo($emp_no, $term_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyFacultyloadEmpNoGet'][0])
    {
        $request = $this->apiV2GradesFacultyFacultyloadEmpNoGetRequest($emp_no, $term_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2GradesFacultyFacultyloadEmpNoGetAsync
     *
     * @param  string $emp_no (required)
     * @param  int $term_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyFacultyloadEmpNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyFacultyloadEmpNoGetAsync($emp_no, $term_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyFacultyloadEmpNoGet'][0])
    {
        return $this->apiV2GradesFacultyFacultyloadEmpNoGetAsyncWithHttpInfo($emp_no, $term_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2GradesFacultyFacultyloadEmpNoGetAsyncWithHttpInfo
     *
     * @param  string $emp_no (required)
     * @param  int $term_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyFacultyloadEmpNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyFacultyloadEmpNoGetAsyncWithHttpInfo($emp_no, $term_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyFacultyloadEmpNoGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2GradesFacultyFacultyloadEmpNoGetRequest($emp_no, $term_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2GradesFacultyFacultyloadEmpNoGet'
     *
     * @param  string $emp_no (required)
     * @param  int $term_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyFacultyloadEmpNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2GradesFacultyFacultyloadEmpNoGetRequest($emp_no, $term_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyFacultyloadEmpNoGet'][0])
    {

        // verify the required parameter 'emp_no' is set
        if ($emp_no === null || (is_array($emp_no) && count($emp_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $emp_no when calling apiV2GradesFacultyFacultyloadEmpNoGet'
            );
        }




        $resourcePath = '/api/v2/GradesFaculty/facultyload/{EmpNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $term_id,
            'TermId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($emp_no !== null) {
            $resourcePath = str_replace(
                '{' . 'EmpNo' . '}',
                ObjectSerializer::toPathValue($emp_no),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet
     *
     * @param  int $schedule_id schedule_id (required)
     * @param  int $term_id term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet($schedule_id, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet'][0])
    {
        $this->apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGetWithHttpInfo($schedule_id, $term_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGetWithHttpInfo
     *
     * @param  int $schedule_id (required)
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGetWithHttpInfo($schedule_id, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet'][0])
    {
        $request = $this->apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGetRequest($schedule_id, $term_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGetAsync
     *
     * @param  int $schedule_id (required)
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGetAsync($schedule_id, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet'][0])
    {
        return $this->apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGetAsyncWithHttpInfo($schedule_id, $term_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGetAsyncWithHttpInfo
     *
     * @param  int $schedule_id (required)
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGetAsyncWithHttpInfo($schedule_id, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGetRequest($schedule_id, $term_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet'
     *
     * @param  int $schedule_id (required)
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGetRequest($schedule_id, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet'][0])
    {

        // verify the required parameter 'schedule_id' is set
        if ($schedule_id === null || (is_array($schedule_id) && count($schedule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schedule_id when calling apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet'
            );
        }

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2GradesFacultyGradingsheetbyscheduleScheduleIdTermTermIdGet'
            );
        }



        $resourcePath = '/api/v2/GradesFaculty/gradingsheetbyschedule/{scheduleId}/term/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($schedule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'scheduleId' . '}',
                ObjectSerializer::toPathValue($schedule_id),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet
     *
     * @param  int $schedule_id schedule_id (required)
     * @param  int $term_id term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet($schedule_id, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet'][0])
    {
        $this->apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGetWithHttpInfo($schedule_id, $term_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGetWithHttpInfo
     *
     * @param  int $schedule_id (required)
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGetWithHttpInfo($schedule_id, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet'][0])
    {
        $request = $this->apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGetRequest($schedule_id, $term_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGetAsync
     *
     * @param  int $schedule_id (required)
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGetAsync($schedule_id, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet'][0])
    {
        return $this->apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGetAsyncWithHttpInfo($schedule_id, $term_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGetAsyncWithHttpInfo
     *
     * @param  int $schedule_id (required)
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGetAsyncWithHttpInfo($schedule_id, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGetRequest($schedule_id, $term_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet'
     *
     * @param  int $schedule_id (required)
     * @param  int $term_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGetRequest($schedule_id, $term_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet'][0])
    {

        // verify the required parameter 'schedule_id' is set
        if ($schedule_id === null || (is_array($schedule_id) && count($schedule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schedule_id when calling apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet'
            );
        }

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2GradesFacultyGradingsheetposteddateScheduleIdTermTermIdGet'
            );
        }



        $resourcePath = '/api/v2/GradesFaculty/gradingsheetposteddate/{scheduleId}/term/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($schedule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'scheduleId' . '}',
                ObjectSerializer::toPathValue($schedule_id),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2GradesFacultyGradingsystemProgClassIDGet
     *
     * @param  int $prog_class_id prog_class_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsystemProgClassIDGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2GradesFacultyGradingsystemProgClassIDGet($prog_class_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsystemProgClassIDGet'][0])
    {
        $this->apiV2GradesFacultyGradingsystemProgClassIDGetWithHttpInfo($prog_class_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2GradesFacultyGradingsystemProgClassIDGetWithHttpInfo
     *
     * @param  int $prog_class_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsystemProgClassIDGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2GradesFacultyGradingsystemProgClassIDGetWithHttpInfo($prog_class_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsystemProgClassIDGet'][0])
    {
        $request = $this->apiV2GradesFacultyGradingsystemProgClassIDGetRequest($prog_class_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2GradesFacultyGradingsystemProgClassIDGetAsync
     *
     * @param  int $prog_class_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsystemProgClassIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyGradingsystemProgClassIDGetAsync($prog_class_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsystemProgClassIDGet'][0])
    {
        return $this->apiV2GradesFacultyGradingsystemProgClassIDGetAsyncWithHttpInfo($prog_class_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2GradesFacultyGradingsystemProgClassIDGetAsyncWithHttpInfo
     *
     * @param  int $prog_class_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsystemProgClassIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyGradingsystemProgClassIDGetAsyncWithHttpInfo($prog_class_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsystemProgClassIDGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2GradesFacultyGradingsystemProgClassIDGetRequest($prog_class_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2GradesFacultyGradingsystemProgClassIDGet'
     *
     * @param  int $prog_class_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsystemProgClassIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2GradesFacultyGradingsystemProgClassIDGetRequest($prog_class_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsystemProgClassIDGet'][0])
    {

        // verify the required parameter 'prog_class_id' is set
        if ($prog_class_id === null || (is_array($prog_class_id) && count($prog_class_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prog_class_id when calling apiV2GradesFacultyGradingsystemProgClassIDGet'
            );
        }



        $resourcePath = '/api/v2/GradesFaculty/gradingsystem/{ProgClassID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($prog_class_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ProgClassID' . '}',
                ObjectSerializer::toPathValue($prog_class_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2GradesFacultyGradingsystemsettingsProgClassIDGet
     *
     * @param  int $prog_class_id prog_class_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsystemsettingsProgClassIDGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2GradesFacultyGradingsystemsettingsProgClassIDGet($prog_class_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsystemsettingsProgClassIDGet'][0])
    {
        $this->apiV2GradesFacultyGradingsystemsettingsProgClassIDGetWithHttpInfo($prog_class_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2GradesFacultyGradingsystemsettingsProgClassIDGetWithHttpInfo
     *
     * @param  int $prog_class_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsystemsettingsProgClassIDGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2GradesFacultyGradingsystemsettingsProgClassIDGetWithHttpInfo($prog_class_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsystemsettingsProgClassIDGet'][0])
    {
        $request = $this->apiV2GradesFacultyGradingsystemsettingsProgClassIDGetRequest($prog_class_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2GradesFacultyGradingsystemsettingsProgClassIDGetAsync
     *
     * @param  int $prog_class_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsystemsettingsProgClassIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyGradingsystemsettingsProgClassIDGetAsync($prog_class_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsystemsettingsProgClassIDGet'][0])
    {
        return $this->apiV2GradesFacultyGradingsystemsettingsProgClassIDGetAsyncWithHttpInfo($prog_class_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2GradesFacultyGradingsystemsettingsProgClassIDGetAsyncWithHttpInfo
     *
     * @param  int $prog_class_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsystemsettingsProgClassIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyGradingsystemsettingsProgClassIDGetAsyncWithHttpInfo($prog_class_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsystemsettingsProgClassIDGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2GradesFacultyGradingsystemsettingsProgClassIDGetRequest($prog_class_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2GradesFacultyGradingsystemsettingsProgClassIDGet'
     *
     * @param  int $prog_class_id (required)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyGradingsystemsettingsProgClassIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2GradesFacultyGradingsystemsettingsProgClassIDGetRequest($prog_class_id, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyGradingsystemsettingsProgClassIDGet'][0])
    {

        // verify the required parameter 'prog_class_id' is set
        if ($prog_class_id === null || (is_array($prog_class_id) && count($prog_class_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prog_class_id when calling apiV2GradesFacultyGradingsystemsettingsProgClassIDGet'
            );
        }



        $resourcePath = '/api/v2/GradesFaculty/gradingsystemsettings/{ProgClassID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($prog_class_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ProgClassID' . '}',
                ObjectSerializer::toPathValue($prog_class_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2GradesFacultyPost
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  \OpenAPI\Client\Model\GradesDto[] $grades_dto grades_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2GradesFacultyPost($tenant_id = null, $grades_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyPost'][0])
    {
        $this->apiV2GradesFacultyPostWithHttpInfo($tenant_id, $grades_dto, $contentType);
    }

    /**
     * Operation apiV2GradesFacultyPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\GradesDto[] $grades_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2GradesFacultyPostWithHttpInfo($tenant_id = null, $grades_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyPost'][0])
    {
        $request = $this->apiV2GradesFacultyPostRequest($tenant_id, $grades_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2GradesFacultyPostAsync
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\GradesDto[] $grades_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyPostAsync($tenant_id = null, $grades_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyPost'][0])
    {
        return $this->apiV2GradesFacultyPostAsyncWithHttpInfo($tenant_id, $grades_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2GradesFacultyPostAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\GradesDto[] $grades_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyPostAsyncWithHttpInfo($tenant_id = null, $grades_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2GradesFacultyPostRequest($tenant_id, $grades_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2GradesFacultyPost'
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\GradesDto[] $grades_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2GradesFacultyPostRequest($tenant_id = null, $grades_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyPost'][0])
    {




        $resourcePath = '/api/v2/GradesFaculty';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($grades_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($grades_dto));
            } else {
                $httpBody = $grades_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2GradesFacultyPostgradingsheetPut
     *
     * @param  int $schedule_id schedule_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyPostgradingsheetPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2GradesFacultyPostgradingsheetPut($schedule_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyPostgradingsheetPut'][0])
    {
        $this->apiV2GradesFacultyPostgradingsheetPutWithHttpInfo($schedule_id, $tenant_id, $contentType);
    }

    /**
     * Operation apiV2GradesFacultyPostgradingsheetPutWithHttpInfo
     *
     * @param  int $schedule_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyPostgradingsheetPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2GradesFacultyPostgradingsheetPutWithHttpInfo($schedule_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyPostgradingsheetPut'][0])
    {
        $request = $this->apiV2GradesFacultyPostgradingsheetPutRequest($schedule_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2GradesFacultyPostgradingsheetPutAsync
     *
     * @param  int $schedule_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyPostgradingsheetPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyPostgradingsheetPutAsync($schedule_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyPostgradingsheetPut'][0])
    {
        return $this->apiV2GradesFacultyPostgradingsheetPutAsyncWithHttpInfo($schedule_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2GradesFacultyPostgradingsheetPutAsyncWithHttpInfo
     *
     * @param  int $schedule_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyPostgradingsheetPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyPostgradingsheetPutAsyncWithHttpInfo($schedule_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyPostgradingsheetPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2GradesFacultyPostgradingsheetPutRequest($schedule_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2GradesFacultyPostgradingsheetPut'
     *
     * @param  int $schedule_id (optional)
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyPostgradingsheetPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2GradesFacultyPostgradingsheetPutRequest($schedule_id = null, $tenant_id = null, string $contentType = self::contentTypes['apiV2GradesFacultyPostgradingsheetPut'][0])
    {




        $resourcePath = '/api/v2/GradesFaculty/postgradingsheet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $schedule_id,
            'scheduleId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2GradesFacultyUpdateStudentFinalGradePut
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdateStudentFinalGradePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2GradesFacultyUpdateStudentFinalGradePut($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdateStudentFinalGradePut'][0])
    {
        $this->apiV2GradesFacultyUpdateStudentFinalGradePutWithHttpInfo($tenant_id, $student_grade_dto, $contentType);
    }

    /**
     * Operation apiV2GradesFacultyUpdateStudentFinalGradePutWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdateStudentFinalGradePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2GradesFacultyUpdateStudentFinalGradePutWithHttpInfo($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdateStudentFinalGradePut'][0])
    {
        $request = $this->apiV2GradesFacultyUpdateStudentFinalGradePutRequest($tenant_id, $student_grade_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2GradesFacultyUpdateStudentFinalGradePutAsync
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdateStudentFinalGradePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyUpdateStudentFinalGradePutAsync($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdateStudentFinalGradePut'][0])
    {
        return $this->apiV2GradesFacultyUpdateStudentFinalGradePutAsyncWithHttpInfo($tenant_id, $student_grade_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2GradesFacultyUpdateStudentFinalGradePutAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdateStudentFinalGradePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyUpdateStudentFinalGradePutAsyncWithHttpInfo($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdateStudentFinalGradePut'][0])
    {
        $returnType = '';
        $request = $this->apiV2GradesFacultyUpdateStudentFinalGradePutRequest($tenant_id, $student_grade_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2GradesFacultyUpdateStudentFinalGradePut'
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdateStudentFinalGradePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2GradesFacultyUpdateStudentFinalGradePutRequest($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdateStudentFinalGradePut'][0])
    {




        $resourcePath = '/api/v2/GradesFaculty/update-student-final-grade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($student_grade_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($student_grade_dto));
            } else {
                $httpBody = $student_grade_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2GradesFacultyUpdateStudentMidtermPut
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdateStudentMidtermPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2GradesFacultyUpdateStudentMidtermPut($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdateStudentMidtermPut'][0])
    {
        $this->apiV2GradesFacultyUpdateStudentMidtermPutWithHttpInfo($tenant_id, $student_grade_dto, $contentType);
    }

    /**
     * Operation apiV2GradesFacultyUpdateStudentMidtermPutWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdateStudentMidtermPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2GradesFacultyUpdateStudentMidtermPutWithHttpInfo($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdateStudentMidtermPut'][0])
    {
        $request = $this->apiV2GradesFacultyUpdateStudentMidtermPutRequest($tenant_id, $student_grade_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2GradesFacultyUpdateStudentMidtermPutAsync
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdateStudentMidtermPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyUpdateStudentMidtermPutAsync($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdateStudentMidtermPut'][0])
    {
        return $this->apiV2GradesFacultyUpdateStudentMidtermPutAsyncWithHttpInfo($tenant_id, $student_grade_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2GradesFacultyUpdateStudentMidtermPutAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdateStudentMidtermPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyUpdateStudentMidtermPutAsyncWithHttpInfo($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdateStudentMidtermPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2GradesFacultyUpdateStudentMidtermPutRequest($tenant_id, $student_grade_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2GradesFacultyUpdateStudentMidtermPut'
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdateStudentMidtermPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2GradesFacultyUpdateStudentMidtermPutRequest($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdateStudentMidtermPut'][0])
    {




        $resourcePath = '/api/v2/GradesFaculty/update-student-midterm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($student_grade_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($student_grade_dto));
            } else {
                $httpBody = $student_grade_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2GradesFacultyUpdategradeofstudentPut
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdategradeofstudentPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2GradesFacultyUpdategradeofstudentPut($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdategradeofstudentPut'][0])
    {
        $this->apiV2GradesFacultyUpdategradeofstudentPutWithHttpInfo($tenant_id, $student_grade_dto, $contentType);
    }

    /**
     * Operation apiV2GradesFacultyUpdategradeofstudentPutWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdategradeofstudentPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2GradesFacultyUpdategradeofstudentPutWithHttpInfo($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdategradeofstudentPut'][0])
    {
        $request = $this->apiV2GradesFacultyUpdategradeofstudentPutRequest($tenant_id, $student_grade_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2GradesFacultyUpdategradeofstudentPutAsync
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdategradeofstudentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyUpdategradeofstudentPutAsync($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdategradeofstudentPut'][0])
    {
        return $this->apiV2GradesFacultyUpdategradeofstudentPutAsyncWithHttpInfo($tenant_id, $student_grade_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2GradesFacultyUpdategradeofstudentPutAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdategradeofstudentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2GradesFacultyUpdategradeofstudentPutAsyncWithHttpInfo($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdategradeofstudentPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2GradesFacultyUpdategradeofstudentPutRequest($tenant_id, $student_grade_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2GradesFacultyUpdategradeofstudentPut'
     *
     * @param  \OpenAPI\Client\Model\TenantDbs $tenant_id (optional)
     * @param  \OpenAPI\Client\Model\StudentGradeDto $student_grade_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2GradesFacultyUpdategradeofstudentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2GradesFacultyUpdategradeofstudentPutRequest($tenant_id = null, $student_grade_dto = null, string $contentType = self::contentTypes['apiV2GradesFacultyUpdategradeofstudentPut'][0])
    {




        $resourcePath = '/api/v2/GradesFaculty/updategradeofstudent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'TenantDbs', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($student_grade_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($student_grade_dto));
            } else {
                $httpBody = $student_grade_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
