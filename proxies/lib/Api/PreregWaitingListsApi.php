<?php
/**
 * PreregWaitingListsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PreregWaitingListsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PreregWaitingListsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2PreregWaitingListsGetListGet' => [
            'application/json',
        ],
        'apiV2PreregWaitingListsNameAppNumberAppNumberGet' => [
            'application/json',
        ],
        'apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet' => [
            'application/json',
        ],
        'apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet' => [
            'application/json',
        ],
        'apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet' => [
            'application/json',
        ],
        'apiV2PreregWaitingListsPost' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet' => [
            'application/json',
        ],
        'apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet' => [
            'application/json',
        ],
        'apiV2PreregWaitingListsRealCampusesGet' => [
            'application/json',
        ],
        'apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet' => [
            'application/json',
        ],
        'apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet' => [
            'application/json',
        ],
        'apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2PreregWaitingListsGetListGet
     *
     * @param  string $keyword keyword (optional, default to '')
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsGetListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2PreregWaitingListsGetListGet($keyword = '', $page = 1, $page_size = 10, string $contentType = self::contentTypes['apiV2PreregWaitingListsGetListGet'][0])
    {
        $this->apiV2PreregWaitingListsGetListGetWithHttpInfo($keyword, $page, $page_size, $contentType);
    }

    /**
     * Operation apiV2PreregWaitingListsGetListGetWithHttpInfo
     *
     * @param  string $keyword (optional, default to '')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsGetListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2PreregWaitingListsGetListGetWithHttpInfo($keyword = '', $page = 1, $page_size = 10, string $contentType = self::contentTypes['apiV2PreregWaitingListsGetListGet'][0])
    {
        $request = $this->apiV2PreregWaitingListsGetListGetRequest($keyword, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2PreregWaitingListsGetListGetAsync
     *
     * @param  string $keyword (optional, default to '')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsGetListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsGetListGetAsync($keyword = '', $page = 1, $page_size = 10, string $contentType = self::contentTypes['apiV2PreregWaitingListsGetListGet'][0])
    {
        return $this->apiV2PreregWaitingListsGetListGetAsyncWithHttpInfo($keyword, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2PreregWaitingListsGetListGetAsyncWithHttpInfo
     *
     * @param  string $keyword (optional, default to '')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsGetListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsGetListGetAsyncWithHttpInfo($keyword = '', $page = 1, $page_size = 10, string $contentType = self::contentTypes['apiV2PreregWaitingListsGetListGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2PreregWaitingListsGetListGetRequest($keyword, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2PreregWaitingListsGetListGet'
     *
     * @param  string $keyword (optional, default to '')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsGetListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2PreregWaitingListsGetListGetRequest($keyword = '', $page = 1, $page_size = 10, string $contentType = self::contentTypes['apiV2PreregWaitingListsGetListGet'][0])
    {





        $resourcePath = '/api/v2/PreregWaitingLists/get-list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keyword,
            'keyword', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2PreregWaitingListsNameAppNumberAppNumberGet
     *
     * @param  string $app_number app_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNameAppNumberAppNumberGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2PreregWaitingListsNameAppNumberAppNumberGet($app_number, string $contentType = self::contentTypes['apiV2PreregWaitingListsNameAppNumberAppNumberGet'][0])
    {
        $this->apiV2PreregWaitingListsNameAppNumberAppNumberGetWithHttpInfo($app_number, $contentType);
    }

    /**
     * Operation apiV2PreregWaitingListsNameAppNumberAppNumberGetWithHttpInfo
     *
     * @param  string $app_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNameAppNumberAppNumberGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2PreregWaitingListsNameAppNumberAppNumberGetWithHttpInfo($app_number, string $contentType = self::contentTypes['apiV2PreregWaitingListsNameAppNumberAppNumberGet'][0])
    {
        $request = $this->apiV2PreregWaitingListsNameAppNumberAppNumberGetRequest($app_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2PreregWaitingListsNameAppNumberAppNumberGetAsync
     *
     * @param  string $app_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNameAppNumberAppNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsNameAppNumberAppNumberGetAsync($app_number, string $contentType = self::contentTypes['apiV2PreregWaitingListsNameAppNumberAppNumberGet'][0])
    {
        return $this->apiV2PreregWaitingListsNameAppNumberAppNumberGetAsyncWithHttpInfo($app_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2PreregWaitingListsNameAppNumberAppNumberGetAsyncWithHttpInfo
     *
     * @param  string $app_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNameAppNumberAppNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsNameAppNumberAppNumberGetAsyncWithHttpInfo($app_number, string $contentType = self::contentTypes['apiV2PreregWaitingListsNameAppNumberAppNumberGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2PreregWaitingListsNameAppNumberAppNumberGetRequest($app_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2PreregWaitingListsNameAppNumberAppNumberGet'
     *
     * @param  string $app_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNameAppNumberAppNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2PreregWaitingListsNameAppNumberAppNumberGetRequest($app_number, string $contentType = self::contentTypes['apiV2PreregWaitingListsNameAppNumberAppNumberGet'][0])
    {

        // verify the required parameter 'app_number' is set
        if ($app_number === null || (is_array($app_number) && count($app_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_number when calling apiV2PreregWaitingListsNameAppNumberAppNumberGet'
            );
        }


        $resourcePath = '/api/v2/PreregWaitingLists/name/app-number/{appNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_number !== null) {
            $resourcePath = str_replace(
                '{' . 'appNumber' . '}',
                ObjectSerializer::toPathValue($app_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet
     *
     * @param  int $policy_id policy_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet($policy_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet'][0])
    {
        $this->apiV2PreregWaitingListsNamesPolicyIdPolicyIdGetWithHttpInfo($policy_id, $contentType);
    }

    /**
     * Operation apiV2PreregWaitingListsNamesPolicyIdPolicyIdGetWithHttpInfo
     *
     * @param  int $policy_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2PreregWaitingListsNamesPolicyIdPolicyIdGetWithHttpInfo($policy_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet'][0])
    {
        $request = $this->apiV2PreregWaitingListsNamesPolicyIdPolicyIdGetRequest($policy_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2PreregWaitingListsNamesPolicyIdPolicyIdGetAsync
     *
     * @param  int $policy_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsNamesPolicyIdPolicyIdGetAsync($policy_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet'][0])
    {
        return $this->apiV2PreregWaitingListsNamesPolicyIdPolicyIdGetAsyncWithHttpInfo($policy_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2PreregWaitingListsNamesPolicyIdPolicyIdGetAsyncWithHttpInfo
     *
     * @param  int $policy_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsNamesPolicyIdPolicyIdGetAsyncWithHttpInfo($policy_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2PreregWaitingListsNamesPolicyIdPolicyIdGetRequest($policy_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet'
     *
     * @param  int $policy_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2PreregWaitingListsNamesPolicyIdPolicyIdGetRequest($policy_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet'][0])
    {

        // verify the required parameter 'policy_id' is set
        if ($policy_id === null || (is_array($policy_id) && count($policy_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $policy_id when calling apiV2PreregWaitingListsNamesPolicyIdPolicyIdGet'
            );
        }


        $resourcePath = '/api/v2/PreregWaitingLists/names/policyId/{policyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($policy_id !== null) {
            $resourcePath = str_replace(
                '{' . 'policyId' . '}',
                ObjectSerializer::toPathValue($policy_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet
     *
     * Names of applicants in waitlist
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $this->apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGetWithHttpInfo($real_campus_id, $term_id, $contentType);
    }

    /**
     * Operation apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGetWithHttpInfo
     *
     * Names of applicants in waitlist
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGetWithHttpInfo($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $request = $this->apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGetAsync
     *
     * Names of applicants in waitlist
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGetAsync($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet'][0])
    {
        return $this->apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo($real_campus_id, $term_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo
     *
     * Names of applicants in waitlist
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet'
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet'][0])
    {

        // verify the required parameter 'real_campus_id' is set
        if ($real_campus_id === null || (is_array($real_campus_id) && count($real_campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_campus_id when calling apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet'
            );
        }

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2PreregWaitingListsNamesRealCampusRealCampusIdTermTermIdGet'
            );
        }


        $resourcePath = '/api/v2/PreregWaitingLists/names/real-campus/{realCampusId}/term/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($real_campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'realCampusId' . '}',
                ObjectSerializer::toPathValue($real_campus_id),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet
     *
     * @param  int $term_id term_id (required)
     * @param  int $real_campus_id real_campus_id (required)
     * @param  int $college_id college_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet($term_id, $real_campus_id, $college_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet'][0])
    {
        $this->apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGetWithHttpInfo($term_id, $real_campus_id, $college_id, $contentType);
    }

    /**
     * Operation apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGetWithHttpInfo
     *
     * @param  int $term_id (required)
     * @param  int $real_campus_id (required)
     * @param  int $college_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGetWithHttpInfo($term_id, $real_campus_id, $college_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet'][0])
    {
        $request = $this->apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGetRequest($term_id, $real_campus_id, $college_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGetAsync
     *
     * @param  int $term_id (required)
     * @param  int $real_campus_id (required)
     * @param  int $college_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGetAsync($term_id, $real_campus_id, $college_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet'][0])
    {
        return $this->apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGetAsyncWithHttpInfo($term_id, $real_campus_id, $college_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGetAsyncWithHttpInfo
     *
     * @param  int $term_id (required)
     * @param  int $real_campus_id (required)
     * @param  int $college_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGetAsyncWithHttpInfo($term_id, $real_campus_id, $college_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGetRequest($term_id, $real_campus_id, $college_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet'
     *
     * @param  int $term_id (required)
     * @param  int $real_campus_id (required)
     * @param  int $college_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGetRequest($term_id, $real_campus_id, $college_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet'][0])
    {

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet'
            );
        }

        // verify the required parameter 'real_campus_id' is set
        if ($real_campus_id === null || (is_array($real_campus_id) && count($real_campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_campus_id when calling apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet'
            );
        }

        // verify the required parameter 'college_id' is set
        if ($college_id === null || (is_array($college_id) && count($college_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $college_id when calling apiV2PreregWaitingListsNamesTermIdTermIdRealCampusIdRealCampusIdCollegeCollegeIdGet'
            );
        }


        $resourcePath = '/api/v2/PreregWaitingLists/names/termId/{termId}/realCampusId/{realCampusId}/college/{collegeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }
        // path params
        if ($real_campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'realCampusId' . '}',
                ObjectSerializer::toPathValue($real_campus_id),
                $resourcePath
            );
        }
        // path params
        if ($college_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collegeId' . '}',
                ObjectSerializer::toPathValue($college_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2PreregWaitingListsPost
     *
     * @param  \OpenAPI\Client\Model\ReservationDto $reservation_dto reservation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2PreregWaitingListsPost($reservation_dto = null, string $contentType = self::contentTypes['apiV2PreregWaitingListsPost'][0])
    {
        $this->apiV2PreregWaitingListsPostWithHttpInfo($reservation_dto, $contentType);
    }

    /**
     * Operation apiV2PreregWaitingListsPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\ReservationDto $reservation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2PreregWaitingListsPostWithHttpInfo($reservation_dto = null, string $contentType = self::contentTypes['apiV2PreregWaitingListsPost'][0])
    {
        $request = $this->apiV2PreregWaitingListsPostRequest($reservation_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2PreregWaitingListsPostAsync
     *
     * @param  \OpenAPI\Client\Model\ReservationDto $reservation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsPostAsync($reservation_dto = null, string $contentType = self::contentTypes['apiV2PreregWaitingListsPost'][0])
    {
        return $this->apiV2PreregWaitingListsPostAsyncWithHttpInfo($reservation_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2PreregWaitingListsPostAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\ReservationDto $reservation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsPostAsyncWithHttpInfo($reservation_dto = null, string $contentType = self::contentTypes['apiV2PreregWaitingListsPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2PreregWaitingListsPostRequest($reservation_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2PreregWaitingListsPost'
     *
     * @param  \OpenAPI\Client\Model\ReservationDto $reservation_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2PreregWaitingListsPostRequest($reservation_dto = null, string $contentType = self::contentTypes['apiV2PreregWaitingListsPost'][0])
    {



        $resourcePath = '/api/v2/PreregWaitingLists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($reservation_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($reservation_dto));
            } else {
                $httpBody = $reservation_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet
     *
     * Names of applicants in pre-reg
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $this->apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGetWithHttpInfo($real_campus_id, $term_id, $contentType);
    }

    /**
     * Operation apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGetWithHttpInfo
     *
     * Names of applicants in pre-reg
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGetWithHttpInfo($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $request = $this->apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGetAsync
     *
     * Names of applicants in pre-reg
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGetAsync($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet'][0])
    {
        return $this->apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo($real_campus_id, $term_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo
     *
     * Names of applicants in pre-reg
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet'
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet'][0])
    {

        // verify the required parameter 'real_campus_id' is set
        if ($real_campus_id === null || (is_array($real_campus_id) && count($real_campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_campus_id when calling apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet'
            );
        }

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2PreregWaitingListsPreRegnamesRealCampusRealCampusIdTermTermIdGet'
            );
        }


        $resourcePath = '/api/v2/PreregWaitingLists/pre-regnames/real-campus/{realCampusId}/term/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($real_campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'realCampusId' . '}',
                ObjectSerializer::toPathValue($real_campus_id),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet
     *
     * Pre-registration Totals
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $this->apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGetWithHttpInfo($real_campus_id, $term_id, $contentType);
    }

    /**
     * Operation apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGetWithHttpInfo
     *
     * Pre-registration Totals
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGetWithHttpInfo($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $request = $this->apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGetAsync
     *
     * Pre-registration Totals
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGetAsync($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {
        return $this->apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo($real_campus_id, $term_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo
     *
     * Pre-registration Totals
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet'
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {

        // verify the required parameter 'real_campus_id' is set
        if ($real_campus_id === null || (is_array($real_campus_id) && count($real_campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_campus_id when calling apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet'
            );
        }

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2PreregWaitingListsPreregTotalsRealCampusRealCampusIdTermTermIdGet'
            );
        }


        $resourcePath = '/api/v2/PreregWaitingLists/prereg-totals/real-campus/{realCampusId}/term/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($real_campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'realCampusId' . '}',
                ObjectSerializer::toPathValue($real_campus_id),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2PreregWaitingListsRealCampusesGet
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsRealCampusesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2PreregWaitingListsRealCampusesGet(string $contentType = self::contentTypes['apiV2PreregWaitingListsRealCampusesGet'][0])
    {
        $this->apiV2PreregWaitingListsRealCampusesGetWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2PreregWaitingListsRealCampusesGetWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsRealCampusesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2PreregWaitingListsRealCampusesGetWithHttpInfo(string $contentType = self::contentTypes['apiV2PreregWaitingListsRealCampusesGet'][0])
    {
        $request = $this->apiV2PreregWaitingListsRealCampusesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2PreregWaitingListsRealCampusesGetAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsRealCampusesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsRealCampusesGetAsync(string $contentType = self::contentTypes['apiV2PreregWaitingListsRealCampusesGet'][0])
    {
        return $this->apiV2PreregWaitingListsRealCampusesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2PreregWaitingListsRealCampusesGetAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsRealCampusesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsRealCampusesGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2PreregWaitingListsRealCampusesGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2PreregWaitingListsRealCampusesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2PreregWaitingListsRealCampusesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsRealCampusesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2PreregWaitingListsRealCampusesGetRequest(string $contentType = self::contentTypes['apiV2PreregWaitingListsRealCampusesGet'][0])
    {


        $resourcePath = '/api/v2/PreregWaitingLists/real-campuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet
     *
     * Reservation Totals
     *
     * @param  int $campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet($campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet'][0])
    {
        $this->apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGetWithHttpInfo($campus_id, $term_id, $contentType);
    }

    /**
     * Operation apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGetWithHttpInfo
     *
     * Reservation Totals
     *
     * @param  int $campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGetWithHttpInfo($campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet'][0])
    {
        $request = $this->apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGetRequest($campus_id, $term_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGetAsync
     *
     * Reservation Totals
     *
     * @param  int $campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGetAsync($campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet'][0])
    {
        return $this->apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGetAsyncWithHttpInfo($campus_id, $term_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGetAsyncWithHttpInfo
     *
     * Reservation Totals
     *
     * @param  int $campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGetAsyncWithHttpInfo($campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGetRequest($campus_id, $term_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet'
     *
     * @param  int $campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGetRequest($campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet'][0])
    {

        // verify the required parameter 'campus_id' is set
        if ($campus_id === null || (is_array($campus_id) && count($campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campus_id when calling apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet'
            );
        }

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2PreregWaitingListsTotalsCampusCampusIdTermTermIdGet'
            );
        }


        $resourcePath = '/api/v2/PreregWaitingLists/totals/campus/{campusId}/term/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campusId' . '}',
                ObjectSerializer::toPathValue($campus_id),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet
     *
     * Reservation total per policy
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet($policy_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet'][0])
    {
        $this->apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGetWithHttpInfo($policy_id, $contentType);
    }

    /**
     * Operation apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGetWithHttpInfo
     *
     * Reservation total per policy
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGetWithHttpInfo($policy_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet'][0])
    {
        $request = $this->apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGetRequest($policy_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGetAsync
     *
     * Reservation total per policy
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGetAsync($policy_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet'][0])
    {
        return $this->apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGetAsyncWithHttpInfo($policy_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGetAsyncWithHttpInfo
     *
     * Reservation total per policy
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGetAsyncWithHttpInfo($policy_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGetRequest($policy_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet'
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGetRequest($policy_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet'][0])
    {

        // verify the required parameter 'policy_id' is set
        if ($policy_id === null || (is_array($policy_id) && count($policy_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $policy_id when calling apiV2PreregWaitingListsTotalsPolicyIdPolicyIdGet'
            );
        }


        $resourcePath = '/api/v2/PreregWaitingLists/totals/policyId/{policyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($policy_id !== null) {
            $resourcePath = str_replace(
                '{' . 'policyId' . '}',
                ObjectSerializer::toPathValue($policy_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet
     *
     * Reservation Totals (Real Campus)
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $this->apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGetWithHttpInfo($real_campus_id, $term_id, $contentType);
    }

    /**
     * Operation apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGetWithHttpInfo
     *
     * Reservation Totals (Real Campus)
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGetWithHttpInfo($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $request = $this->apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGetAsync
     *
     * Reservation Totals (Real Campus)
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGetAsync($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {
        return $this->apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo($real_campus_id, $term_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo
     *
     * Reservation Totals (Real Campus)
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet'
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {

        // verify the required parameter 'real_campus_id' is set
        if ($real_campus_id === null || (is_array($real_campus_id) && count($real_campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_campus_id when calling apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet'
            );
        }

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2PreregWaitingListsTotalsRealCampusRealCampusIdTermTermIdGet'
            );
        }


        $resourcePath = '/api/v2/PreregWaitingLists/totals/real-campus/{realCampusId}/term/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($real_campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'realCampusId' . '}',
                ObjectSerializer::toPathValue($real_campus_id),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
