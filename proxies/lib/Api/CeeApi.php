<?php
/**
 * CeeApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * USM Academic Systems Integration Api
 *
 * Integration API for multiple legacy systems and web apps
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rbsgaridan@usm.edu.ph
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CeeApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CeeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2CeeCommitRankingListByPolicyPolicyIdGet' => [
            'application/json',
        ],
        'apiV2CeeGetListGet' => [
            'application/json',
        ],
        'apiV2CeeGetRankedListByPolicyPolicyIdGet' => [
            'application/json',
        ],
        'apiV2CeeRankApplicantsForAllPoliciesByTermsPost' => [
            'application/json-patch+json; x-api-version=2.0',
            'application/json; x-api-version=2.0',
            'text/json; x-api-version=2.0',
            'application/*+json; x-api-version=2.0',
        ],
        'apiV2CeeResetApplicantAppNoPost' => [
            'application/json',
        ],
        'apiV2CeeResultByApplicant2ndPriorityApplicantIdGet' => [
            'application/json',
        ],
        'apiV2CeeResultByApplicant3rdPriorityApplicantIdGet' => [
            'application/json',
        ],
        'apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet' => [
            'application/json',
        ],
        'apiV2CeeResultByApplicantApplicantIdGet' => [
            'application/json',
        ],
        'apiV2CeeStudentsAppNoGet' => [
            'application/json',
        ],
        'apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2CeeCommitRankingListByPolicyPolicyIdGet
     *
     * Displays list of applicants ranked on CSA, Part 1, then Part 2
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeCommitRankingListByPolicyPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2CeeCommitRankingListByPolicyPolicyIdGet($policy_id, string $contentType = self::contentTypes['apiV2CeeCommitRankingListByPolicyPolicyIdGet'][0])
    {
        $this->apiV2CeeCommitRankingListByPolicyPolicyIdGetWithHttpInfo($policy_id, $contentType);
    }

    /**
     * Operation apiV2CeeCommitRankingListByPolicyPolicyIdGetWithHttpInfo
     *
     * Displays list of applicants ranked on CSA, Part 1, then Part 2
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeCommitRankingListByPolicyPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2CeeCommitRankingListByPolicyPolicyIdGetWithHttpInfo($policy_id, string $contentType = self::contentTypes['apiV2CeeCommitRankingListByPolicyPolicyIdGet'][0])
    {
        $request = $this->apiV2CeeCommitRankingListByPolicyPolicyIdGetRequest($policy_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2CeeCommitRankingListByPolicyPolicyIdGetAsync
     *
     * Displays list of applicants ranked on CSA, Part 1, then Part 2
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeCommitRankingListByPolicyPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeCommitRankingListByPolicyPolicyIdGetAsync($policy_id, string $contentType = self::contentTypes['apiV2CeeCommitRankingListByPolicyPolicyIdGet'][0])
    {
        return $this->apiV2CeeCommitRankingListByPolicyPolicyIdGetAsyncWithHttpInfo($policy_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2CeeCommitRankingListByPolicyPolicyIdGetAsyncWithHttpInfo
     *
     * Displays list of applicants ranked on CSA, Part 1, then Part 2
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeCommitRankingListByPolicyPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeCommitRankingListByPolicyPolicyIdGetAsyncWithHttpInfo($policy_id, string $contentType = self::contentTypes['apiV2CeeCommitRankingListByPolicyPolicyIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2CeeCommitRankingListByPolicyPolicyIdGetRequest($policy_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2CeeCommitRankingListByPolicyPolicyIdGet'
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeCommitRankingListByPolicyPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2CeeCommitRankingListByPolicyPolicyIdGetRequest($policy_id, string $contentType = self::contentTypes['apiV2CeeCommitRankingListByPolicyPolicyIdGet'][0])
    {

        // verify the required parameter 'policy_id' is set
        if ($policy_id === null || (is_array($policy_id) && count($policy_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $policy_id when calling apiV2CeeCommitRankingListByPolicyPolicyIdGet'
            );
        }


        $resourcePath = '/api/v2/Cee/commit-ranking-list-by-policy/{policyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($policy_id !== null) {
            $resourcePath = str_replace(
                '{' . 'policyId' . '}',
                ObjectSerializer::toPathValue($policy_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2CeeGetListGet
     *
     * @param  string $keyword keyword (optional, default to '')
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeGetListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2CeeGetListGet($keyword = '', $page = 1, $page_size = 10, string $contentType = self::contentTypes['apiV2CeeGetListGet'][0])
    {
        $this->apiV2CeeGetListGetWithHttpInfo($keyword, $page, $page_size, $contentType);
    }

    /**
     * Operation apiV2CeeGetListGetWithHttpInfo
     *
     * @param  string $keyword (optional, default to '')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeGetListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2CeeGetListGetWithHttpInfo($keyword = '', $page = 1, $page_size = 10, string $contentType = self::contentTypes['apiV2CeeGetListGet'][0])
    {
        $request = $this->apiV2CeeGetListGetRequest($keyword, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2CeeGetListGetAsync
     *
     * @param  string $keyword (optional, default to '')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeGetListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeGetListGetAsync($keyword = '', $page = 1, $page_size = 10, string $contentType = self::contentTypes['apiV2CeeGetListGet'][0])
    {
        return $this->apiV2CeeGetListGetAsyncWithHttpInfo($keyword, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2CeeGetListGetAsyncWithHttpInfo
     *
     * @param  string $keyword (optional, default to '')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeGetListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeGetListGetAsyncWithHttpInfo($keyword = '', $page = 1, $page_size = 10, string $contentType = self::contentTypes['apiV2CeeGetListGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2CeeGetListGetRequest($keyword, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2CeeGetListGet'
     *
     * @param  string $keyword (optional, default to '')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeGetListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2CeeGetListGetRequest($keyword = '', $page = 1, $page_size = 10, string $contentType = self::contentTypes['apiV2CeeGetListGet'][0])
    {





        $resourcePath = '/api/v2/Cee/get-list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keyword,
            'keyword', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2CeeGetRankedListByPolicyPolicyIdGet
     *
     * Displays list of applicants ranked on CSA, Part 1, then Part 2
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeGetRankedListByPolicyPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2CeeGetRankedListByPolicyPolicyIdGet($policy_id, string $contentType = self::contentTypes['apiV2CeeGetRankedListByPolicyPolicyIdGet'][0])
    {
        $this->apiV2CeeGetRankedListByPolicyPolicyIdGetWithHttpInfo($policy_id, $contentType);
    }

    /**
     * Operation apiV2CeeGetRankedListByPolicyPolicyIdGetWithHttpInfo
     *
     * Displays list of applicants ranked on CSA, Part 1, then Part 2
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeGetRankedListByPolicyPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2CeeGetRankedListByPolicyPolicyIdGetWithHttpInfo($policy_id, string $contentType = self::contentTypes['apiV2CeeGetRankedListByPolicyPolicyIdGet'][0])
    {
        $request = $this->apiV2CeeGetRankedListByPolicyPolicyIdGetRequest($policy_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2CeeGetRankedListByPolicyPolicyIdGetAsync
     *
     * Displays list of applicants ranked on CSA, Part 1, then Part 2
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeGetRankedListByPolicyPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeGetRankedListByPolicyPolicyIdGetAsync($policy_id, string $contentType = self::contentTypes['apiV2CeeGetRankedListByPolicyPolicyIdGet'][0])
    {
        return $this->apiV2CeeGetRankedListByPolicyPolicyIdGetAsyncWithHttpInfo($policy_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2CeeGetRankedListByPolicyPolicyIdGetAsyncWithHttpInfo
     *
     * Displays list of applicants ranked on CSA, Part 1, then Part 2
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeGetRankedListByPolicyPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeGetRankedListByPolicyPolicyIdGetAsyncWithHttpInfo($policy_id, string $contentType = self::contentTypes['apiV2CeeGetRankedListByPolicyPolicyIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2CeeGetRankedListByPolicyPolicyIdGetRequest($policy_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2CeeGetRankedListByPolicyPolicyIdGet'
     *
     * @param  int $policy_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeGetRankedListByPolicyPolicyIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2CeeGetRankedListByPolicyPolicyIdGetRequest($policy_id, string $contentType = self::contentTypes['apiV2CeeGetRankedListByPolicyPolicyIdGet'][0])
    {

        // verify the required parameter 'policy_id' is set
        if ($policy_id === null || (is_array($policy_id) && count($policy_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $policy_id when calling apiV2CeeGetRankedListByPolicyPolicyIdGet'
            );
        }


        $resourcePath = '/api/v2/Cee/get-ranked-list-by-policy/{policyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($policy_id !== null) {
            $resourcePath = str_replace(
                '{' . 'policyId' . '}',
                ObjectSerializer::toPathValue($policy_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2CeeRankApplicantsForAllPoliciesByTermsPost
     *
     * @param  int[] $request_body request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeRankApplicantsForAllPoliciesByTermsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2CeeRankApplicantsForAllPoliciesByTermsPost($request_body = null, string $contentType = self::contentTypes['apiV2CeeRankApplicantsForAllPoliciesByTermsPost'][0])
    {
        $this->apiV2CeeRankApplicantsForAllPoliciesByTermsPostWithHttpInfo($request_body, $contentType);
    }

    /**
     * Operation apiV2CeeRankApplicantsForAllPoliciesByTermsPostWithHttpInfo
     *
     * @param  int[] $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeRankApplicantsForAllPoliciesByTermsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2CeeRankApplicantsForAllPoliciesByTermsPostWithHttpInfo($request_body = null, string $contentType = self::contentTypes['apiV2CeeRankApplicantsForAllPoliciesByTermsPost'][0])
    {
        $request = $this->apiV2CeeRankApplicantsForAllPoliciesByTermsPostRequest($request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2CeeRankApplicantsForAllPoliciesByTermsPostAsync
     *
     * @param  int[] $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeRankApplicantsForAllPoliciesByTermsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeRankApplicantsForAllPoliciesByTermsPostAsync($request_body = null, string $contentType = self::contentTypes['apiV2CeeRankApplicantsForAllPoliciesByTermsPost'][0])
    {
        return $this->apiV2CeeRankApplicantsForAllPoliciesByTermsPostAsyncWithHttpInfo($request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2CeeRankApplicantsForAllPoliciesByTermsPostAsyncWithHttpInfo
     *
     * @param  int[] $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeRankApplicantsForAllPoliciesByTermsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeRankApplicantsForAllPoliciesByTermsPostAsyncWithHttpInfo($request_body = null, string $contentType = self::contentTypes['apiV2CeeRankApplicantsForAllPoliciesByTermsPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2CeeRankApplicantsForAllPoliciesByTermsPostRequest($request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2CeeRankApplicantsForAllPoliciesByTermsPost'
     *
     * @param  int[] $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeRankApplicantsForAllPoliciesByTermsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2CeeRankApplicantsForAllPoliciesByTermsPostRequest($request_body = null, string $contentType = self::contentTypes['apiV2CeeRankApplicantsForAllPoliciesByTermsPost'][0])
    {



        $resourcePath = '/api/v2/Cee/rank-applicants-for-all-policies-by-terms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2CeeResetApplicantAppNoPost
     *
     * @param  string $app_no app_no (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResetApplicantAppNoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2CeeResetApplicantAppNoPost($app_no, string $contentType = self::contentTypes['apiV2CeeResetApplicantAppNoPost'][0])
    {
        $this->apiV2CeeResetApplicantAppNoPostWithHttpInfo($app_no, $contentType);
    }

    /**
     * Operation apiV2CeeResetApplicantAppNoPostWithHttpInfo
     *
     * @param  string $app_no (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResetApplicantAppNoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2CeeResetApplicantAppNoPostWithHttpInfo($app_no, string $contentType = self::contentTypes['apiV2CeeResetApplicantAppNoPost'][0])
    {
        $request = $this->apiV2CeeResetApplicantAppNoPostRequest($app_no, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2CeeResetApplicantAppNoPostAsync
     *
     * @param  string $app_no (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResetApplicantAppNoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeResetApplicantAppNoPostAsync($app_no, string $contentType = self::contentTypes['apiV2CeeResetApplicantAppNoPost'][0])
    {
        return $this->apiV2CeeResetApplicantAppNoPostAsyncWithHttpInfo($app_no, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2CeeResetApplicantAppNoPostAsyncWithHttpInfo
     *
     * @param  string $app_no (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResetApplicantAppNoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeResetApplicantAppNoPostAsyncWithHttpInfo($app_no, string $contentType = self::contentTypes['apiV2CeeResetApplicantAppNoPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2CeeResetApplicantAppNoPostRequest($app_no, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2CeeResetApplicantAppNoPost'
     *
     * @param  string $app_no (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResetApplicantAppNoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2CeeResetApplicantAppNoPostRequest($app_no, string $contentType = self::contentTypes['apiV2CeeResetApplicantAppNoPost'][0])
    {

        // verify the required parameter 'app_no' is set
        if ($app_no === null || (is_array($app_no) && count($app_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_no when calling apiV2CeeResetApplicantAppNoPost'
            );
        }


        $resourcePath = '/api/v2/Cee/reset-applicant/{appNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_no !== null) {
            $resourcePath = str_replace(
                '{' . 'appNo' . '}',
                ObjectSerializer::toPathValue($app_no),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2CeeResultByApplicant2ndPriorityApplicantIdGet
     *
     * Use this for the 2nd priority. Programs are based on specialization kung pasado xa at may bakante pa.
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicant2ndPriorityApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ResultByApplicantView
     */
    public function apiV2CeeResultByApplicant2ndPriorityApplicantIdGet($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicant2ndPriorityApplicantIdGet'][0])
    {
        list($response) = $this->apiV2CeeResultByApplicant2ndPriorityApplicantIdGetWithHttpInfo($applicant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2CeeResultByApplicant2ndPriorityApplicantIdGetWithHttpInfo
     *
     * Use this for the 2nd priority. Programs are based on specialization kung pasado xa at may bakante pa.
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicant2ndPriorityApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ResultByApplicantView, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2CeeResultByApplicant2ndPriorityApplicantIdGetWithHttpInfo($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicant2ndPriorityApplicantIdGet'][0])
    {
        $request = $this->apiV2CeeResultByApplicant2ndPriorityApplicantIdGetRequest($applicant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ResultByApplicantView' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ResultByApplicantView' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ResultByApplicantView', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ResultByApplicantView';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResultByApplicantView',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2CeeResultByApplicant2ndPriorityApplicantIdGetAsync
     *
     * Use this for the 2nd priority. Programs are based on specialization kung pasado xa at may bakante pa.
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicant2ndPriorityApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeResultByApplicant2ndPriorityApplicantIdGetAsync($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicant2ndPriorityApplicantIdGet'][0])
    {
        return $this->apiV2CeeResultByApplicant2ndPriorityApplicantIdGetAsyncWithHttpInfo($applicant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2CeeResultByApplicant2ndPriorityApplicantIdGetAsyncWithHttpInfo
     *
     * Use this for the 2nd priority. Programs are based on specialization kung pasado xa at may bakante pa.
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicant2ndPriorityApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeResultByApplicant2ndPriorityApplicantIdGetAsyncWithHttpInfo($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicant2ndPriorityApplicantIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ResultByApplicantView';
        $request = $this->apiV2CeeResultByApplicant2ndPriorityApplicantIdGetRequest($applicant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2CeeResultByApplicant2ndPriorityApplicantIdGet'
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicant2ndPriorityApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2CeeResultByApplicant2ndPriorityApplicantIdGetRequest($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicant2ndPriorityApplicantIdGet'][0])
    {

        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null || (is_array($applicant_id) && count($applicant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $applicant_id when calling apiV2CeeResultByApplicant2ndPriorityApplicantIdGet'
            );
        }


        $resourcePath = '/api/v2/Cee/result-by-applicant-2nd-priority/{applicantId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicantId' . '}',
                ObjectSerializer::toPathValue($applicant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain; x-api-version=2.0', 'application/json; x-api-version=2.0', 'text/json; x-api-version=2.0', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2CeeResultByApplicant3rdPriorityApplicantIdGet
     *
     * Use this if program selection is based on CSA cutoff regardless of specialization.
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicant3rdPriorityApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ResultByApplicantDto
     */
    public function apiV2CeeResultByApplicant3rdPriorityApplicantIdGet($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicant3rdPriorityApplicantIdGet'][0])
    {
        list($response) = $this->apiV2CeeResultByApplicant3rdPriorityApplicantIdGetWithHttpInfo($applicant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2CeeResultByApplicant3rdPriorityApplicantIdGetWithHttpInfo
     *
     * Use this if program selection is based on CSA cutoff regardless of specialization.
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicant3rdPriorityApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ResultByApplicantDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2CeeResultByApplicant3rdPriorityApplicantIdGetWithHttpInfo($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicant3rdPriorityApplicantIdGet'][0])
    {
        $request = $this->apiV2CeeResultByApplicant3rdPriorityApplicantIdGetRequest($applicant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ResultByApplicantDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ResultByApplicantDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ResultByApplicantDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ResultByApplicantDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResultByApplicantDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2CeeResultByApplicant3rdPriorityApplicantIdGetAsync
     *
     * Use this if program selection is based on CSA cutoff regardless of specialization.
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicant3rdPriorityApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeResultByApplicant3rdPriorityApplicantIdGetAsync($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicant3rdPriorityApplicantIdGet'][0])
    {
        return $this->apiV2CeeResultByApplicant3rdPriorityApplicantIdGetAsyncWithHttpInfo($applicant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2CeeResultByApplicant3rdPriorityApplicantIdGetAsyncWithHttpInfo
     *
     * Use this if program selection is based on CSA cutoff regardless of specialization.
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicant3rdPriorityApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeResultByApplicant3rdPriorityApplicantIdGetAsyncWithHttpInfo($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicant3rdPriorityApplicantIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ResultByApplicantDto';
        $request = $this->apiV2CeeResultByApplicant3rdPriorityApplicantIdGetRequest($applicant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2CeeResultByApplicant3rdPriorityApplicantIdGet'
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicant3rdPriorityApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2CeeResultByApplicant3rdPriorityApplicantIdGetRequest($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicant3rdPriorityApplicantIdGet'][0])
    {

        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null || (is_array($applicant_id) && count($applicant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $applicant_id when calling apiV2CeeResultByApplicant3rdPriorityApplicantIdGet'
            );
        }


        $resourcePath = '/api/v2/Cee/result-by-applicant-3rd-priority/{applicantId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicantId' . '}',
                ObjectSerializer::toPathValue($applicant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain; x-api-version=2.0', 'application/json; x-api-version=2.0', 'text/json; x-api-version=2.0', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet
     *
     * Pwede na tumawid ang SEM, BAM at HED sa TEC also added if a program is ranked
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ResultByApplicantView
     */
    public function apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet'][0])
    {
        list($response) = $this->apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGetWithHttpInfo($applicant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGetWithHttpInfo
     *
     * Pwede na tumawid ang SEM, BAM at HED sa TEC also added if a program is ranked
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ResultByApplicantView, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGetWithHttpInfo($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet'][0])
    {
        $request = $this->apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGetRequest($applicant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ResultByApplicantView' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ResultByApplicantView' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ResultByApplicantView', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ResultByApplicantView';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResultByApplicantView',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGetAsync
     *
     * Pwede na tumawid ang SEM, BAM at HED sa TEC also added if a program is ranked
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGetAsync($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet'][0])
    {
        return $this->apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGetAsyncWithHttpInfo($applicant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGetAsyncWithHttpInfo
     *
     * Pwede na tumawid ang SEM, BAM at HED sa TEC also added if a program is ranked
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGetAsyncWithHttpInfo($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ResultByApplicantView';
        $request = $this->apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGetRequest($applicant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet'
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGetRequest($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet'][0])
    {

        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null || (is_array($applicant_id) && count($applicant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $applicant_id when calling apiV2CeeResultByApplicantAllowedTecWithRankingApplicantIdGet'
            );
        }


        $resourcePath = '/api/v2/Cee/result-by-applicant-allowed-tec-with-ranking/{applicantId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicantId' . '}',
                ObjectSerializer::toPathValue($applicant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain; x-api-version=2.0', 'application/json; x-api-version=2.0', 'text/json; x-api-version=2.0', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2CeeResultByApplicantApplicantIdGet
     *
     * Endpoint for First Priority only.
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicantApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ResultByApplicantDto
     */
    public function apiV2CeeResultByApplicantApplicantIdGet($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicantApplicantIdGet'][0])
    {
        list($response) = $this->apiV2CeeResultByApplicantApplicantIdGetWithHttpInfo($applicant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2CeeResultByApplicantApplicantIdGetWithHttpInfo
     *
     * Endpoint for First Priority only.
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicantApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ResultByApplicantDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2CeeResultByApplicantApplicantIdGetWithHttpInfo($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicantApplicantIdGet'][0])
    {
        $request = $this->apiV2CeeResultByApplicantApplicantIdGetRequest($applicant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ResultByApplicantDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ResultByApplicantDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ResultByApplicantDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ResultByApplicantDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResultByApplicantDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2CeeResultByApplicantApplicantIdGetAsync
     *
     * Endpoint for First Priority only.
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicantApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeResultByApplicantApplicantIdGetAsync($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicantApplicantIdGet'][0])
    {
        return $this->apiV2CeeResultByApplicantApplicantIdGetAsyncWithHttpInfo($applicant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2CeeResultByApplicantApplicantIdGetAsyncWithHttpInfo
     *
     * Endpoint for First Priority only.
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicantApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeResultByApplicantApplicantIdGetAsyncWithHttpInfo($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicantApplicantIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ResultByApplicantDto';
        $request = $this->apiV2CeeResultByApplicantApplicantIdGetRequest($applicant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2CeeResultByApplicantApplicantIdGet'
     *
     * @param  int $applicant_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeResultByApplicantApplicantIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2CeeResultByApplicantApplicantIdGetRequest($applicant_id, string $contentType = self::contentTypes['apiV2CeeResultByApplicantApplicantIdGet'][0])
    {

        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null || (is_array($applicant_id) && count($applicant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $applicant_id when calling apiV2CeeResultByApplicantApplicantIdGet'
            );
        }


        $resourcePath = '/api/v2/Cee/result-by-applicant/{applicantId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicantId' . '}',
                ObjectSerializer::toPathValue($applicant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain; x-api-version=2.0', 'application/json; x-api-version=2.0', 'text/json; x-api-version=2.0', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2CeeStudentsAppNoGet
     *
     * @param  string $app_no app_no (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeStudentsAppNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CeeStudentDto
     */
    public function apiV2CeeStudentsAppNoGet($app_no, string $contentType = self::contentTypes['apiV2CeeStudentsAppNoGet'][0])
    {
        list($response) = $this->apiV2CeeStudentsAppNoGetWithHttpInfo($app_no, $contentType);
        return $response;
    }

    /**
     * Operation apiV2CeeStudentsAppNoGetWithHttpInfo
     *
     * @param  string $app_no (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeStudentsAppNoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CeeStudentDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2CeeStudentsAppNoGetWithHttpInfo($app_no, string $contentType = self::contentTypes['apiV2CeeStudentsAppNoGet'][0])
    {
        $request = $this->apiV2CeeStudentsAppNoGetRequest($app_no, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CeeStudentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CeeStudentDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CeeStudentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\CeeStudentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CeeStudentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2CeeStudentsAppNoGetAsync
     *
     * @param  string $app_no (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeStudentsAppNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeStudentsAppNoGetAsync($app_no, string $contentType = self::contentTypes['apiV2CeeStudentsAppNoGet'][0])
    {
        return $this->apiV2CeeStudentsAppNoGetAsyncWithHttpInfo($app_no, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2CeeStudentsAppNoGetAsyncWithHttpInfo
     *
     * @param  string $app_no (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeStudentsAppNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeStudentsAppNoGetAsyncWithHttpInfo($app_no, string $contentType = self::contentTypes['apiV2CeeStudentsAppNoGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CeeStudentDto';
        $request = $this->apiV2CeeStudentsAppNoGetRequest($app_no, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2CeeStudentsAppNoGet'
     *
     * @param  string $app_no (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeStudentsAppNoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2CeeStudentsAppNoGetRequest($app_no, string $contentType = self::contentTypes['apiV2CeeStudentsAppNoGet'][0])
    {

        // verify the required parameter 'app_no' is set
        if ($app_no === null || (is_array($app_no) && count($app_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_no when calling apiV2CeeStudentsAppNoGet'
            );
        }


        $resourcePath = '/api/v2/Cee/students/{appNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_no !== null) {
            $resourcePath = str_replace(
                '{' . 'appNo' . '}',
                ObjectSerializer::toPathValue($app_no),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain; x-api-version=2.0', 'application/json; x-api-version=2.0', 'text/json; x-api-version=2.0', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet
     *
     * Reservation Totals (Real Campus)
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $this->apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGetWithHttpInfo($real_campus_id, $term_id, $contentType);
    }

    /**
     * Operation apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGetWithHttpInfo
     *
     * Reservation Totals (Real Campus)
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGetWithHttpInfo($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $request = $this->apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGetAsync
     *
     * Reservation Totals (Real Campus)
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGetAsync($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {
        return $this->apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo($real_campus_id, $term_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo
     *
     * Reservation Totals (Real Campus)
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGetAsyncWithHttpInfo($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet'
     *
     * @param  int $real_campus_id  (required)
     * @param  int $term_id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGetRequest($real_campus_id, $term_id, string $contentType = self::contentTypes['apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet'][0])
    {

        // verify the required parameter 'real_campus_id' is set
        if ($real_campus_id === null || (is_array($real_campus_id) && count($real_campus_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_campus_id when calling apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet'
            );
        }

        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling apiV2CeeTotalsRealCampusRealCampusIdTermTermIdGet'
            );
        }


        $resourcePath = '/api/v2/Cee/totals/real-campus/{realCampusId}/term/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($real_campus_id !== null) {
            $resourcePath = str_replace(
                '{' . 'realCampusId' . '}',
                ObjectSerializer::toPathValue($real_campus_id),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
